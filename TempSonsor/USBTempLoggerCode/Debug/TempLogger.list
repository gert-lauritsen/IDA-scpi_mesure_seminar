
TempLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e068  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d24  0800e128  0800e128  0000f128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee4c  0800ee4c  00010210  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee4c  0800ee4c  0000fe4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee54  0800ee54  00010210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee54  0800ee54  0000fe54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ee58  0800ee58  0000fe58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  0800ee5c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a8  20000210  0800f06c  00010210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017b8  0800f06c  000107b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9ef  00000000  00000000  00010238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000501e  00000000  00000000  0002ec27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a0  00000000  00000000  00033c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000135c  00000000  00000000  000355e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a37d  00000000  00000000  00036944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed96  00000000  00000000  00050cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b8fa  00000000  00000000  0006fa57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb351  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006234  00000000  00000000  000fb394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001015c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000210 	.word	0x20000210
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e110 	.word	0x0800e110

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000214 	.word	0x20000214
 8000104:	0800e110 	.word	0x0800e110

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f834 	bl	80004b4 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	46ce      	mov	lr, r9
 800045c:	4699      	mov	r9, r3
 800045e:	0c03      	lsrs	r3, r0, #16
 8000460:	469c      	mov	ip, r3
 8000462:	0413      	lsls	r3, r2, #16
 8000464:	4647      	mov	r7, r8
 8000466:	0c1b      	lsrs	r3, r3, #16
 8000468:	001d      	movs	r5, r3
 800046a:	000e      	movs	r6, r1
 800046c:	4661      	mov	r1, ip
 800046e:	0404      	lsls	r4, r0, #16
 8000470:	0c24      	lsrs	r4, r4, #16
 8000472:	b580      	push	{r7, lr}
 8000474:	0007      	movs	r7, r0
 8000476:	0c10      	lsrs	r0, r2, #16
 8000478:	434b      	muls	r3, r1
 800047a:	4365      	muls	r5, r4
 800047c:	4341      	muls	r1, r0
 800047e:	4360      	muls	r0, r4
 8000480:	0c2c      	lsrs	r4, r5, #16
 8000482:	18c0      	adds	r0, r0, r3
 8000484:	1824      	adds	r4, r4, r0
 8000486:	468c      	mov	ip, r1
 8000488:	42a3      	cmp	r3, r4
 800048a:	d903      	bls.n	8000494 <__aeabi_lmul+0x3c>
 800048c:	2380      	movs	r3, #128	@ 0x80
 800048e:	025b      	lsls	r3, r3, #9
 8000490:	4698      	mov	r8, r3
 8000492:	44c4      	add	ip, r8
 8000494:	4649      	mov	r1, r9
 8000496:	4379      	muls	r1, r7
 8000498:	4356      	muls	r6, r2
 800049a:	0c23      	lsrs	r3, r4, #16
 800049c:	042d      	lsls	r5, r5, #16
 800049e:	0c2d      	lsrs	r5, r5, #16
 80004a0:	1989      	adds	r1, r1, r6
 80004a2:	4463      	add	r3, ip
 80004a4:	0424      	lsls	r4, r4, #16
 80004a6:	1960      	adds	r0, r4, r5
 80004a8:	18c9      	adds	r1, r1, r3
 80004aa:	bcc0      	pop	{r6, r7}
 80004ac:	46b9      	mov	r9, r7
 80004ae:	46b0      	mov	r8, r6
 80004b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)

080004b4 <__udivmoddi4>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	4657      	mov	r7, sl
 80004b8:	464e      	mov	r6, r9
 80004ba:	4645      	mov	r5, r8
 80004bc:	46de      	mov	lr, fp
 80004be:	b5e0      	push	{r5, r6, r7, lr}
 80004c0:	0004      	movs	r4, r0
 80004c2:	000d      	movs	r5, r1
 80004c4:	4692      	mov	sl, r2
 80004c6:	4699      	mov	r9, r3
 80004c8:	b083      	sub	sp, #12
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d830      	bhi.n	8000530 <__udivmoddi4+0x7c>
 80004ce:	d02d      	beq.n	800052c <__udivmoddi4+0x78>
 80004d0:	4649      	mov	r1, r9
 80004d2:	4650      	mov	r0, sl
 80004d4:	f000 f8d8 	bl	8000688 <__clzdi2>
 80004d8:	0029      	movs	r1, r5
 80004da:	0006      	movs	r6, r0
 80004dc:	0020      	movs	r0, r4
 80004de:	f000 f8d3 	bl	8000688 <__clzdi2>
 80004e2:	1a33      	subs	r3, r6, r0
 80004e4:	4698      	mov	r8, r3
 80004e6:	3b20      	subs	r3, #32
 80004e8:	d434      	bmi.n	8000554 <__udivmoddi4+0xa0>
 80004ea:	469b      	mov	fp, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	465a      	mov	r2, fp
 80004f0:	4093      	lsls	r3, r2
 80004f2:	4642      	mov	r2, r8
 80004f4:	001f      	movs	r7, r3
 80004f6:	4653      	mov	r3, sl
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001e      	movs	r6, r3
 80004fc:	42af      	cmp	r7, r5
 80004fe:	d83b      	bhi.n	8000578 <__udivmoddi4+0xc4>
 8000500:	42af      	cmp	r7, r5
 8000502:	d100      	bne.n	8000506 <__udivmoddi4+0x52>
 8000504:	e079      	b.n	80005fa <__udivmoddi4+0x146>
 8000506:	465b      	mov	r3, fp
 8000508:	1ba4      	subs	r4, r4, r6
 800050a:	41bd      	sbcs	r5, r7
 800050c:	2b00      	cmp	r3, #0
 800050e:	da00      	bge.n	8000512 <__udivmoddi4+0x5e>
 8000510:	e076      	b.n	8000600 <__udivmoddi4+0x14c>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	465a      	mov	r2, fp
 800051e:	4093      	lsls	r3, r2
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	4642      	mov	r2, r8
 8000526:	4093      	lsls	r3, r2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	e029      	b.n	8000580 <__udivmoddi4+0xcc>
 800052c:	4282      	cmp	r2, r0
 800052e:	d9cf      	bls.n	80004d0 <__udivmoddi4+0x1c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <__udivmoddi4+0x8e>
 800053e:	601c      	str	r4, [r3, #0]
 8000540:	605d      	str	r5, [r3, #4]
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	9901      	ldr	r1, [sp, #4]
 8000546:	b003      	add	sp, #12
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	46bb      	mov	fp, r7
 800054c:	46b2      	mov	sl, r6
 800054e:	46a9      	mov	r9, r5
 8000550:	46a0      	mov	r8, r4
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	4642      	mov	r2, r8
 8000556:	469b      	mov	fp, r3
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	4652      	mov	r2, sl
 800055e:	40da      	lsrs	r2, r3
 8000560:	4641      	mov	r1, r8
 8000562:	0013      	movs	r3, r2
 8000564:	464a      	mov	r2, r9
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	4642      	mov	r2, r8
 800056c:	431f      	orrs	r7, r3
 800056e:	4653      	mov	r3, sl
 8000570:	4093      	lsls	r3, r2
 8000572:	001e      	movs	r6, r3
 8000574:	42af      	cmp	r7, r5
 8000576:	d9c3      	bls.n	8000500 <__udivmoddi4+0x4c>
 8000578:	2200      	movs	r2, #0
 800057a:	2300      	movs	r3, #0
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	4643      	mov	r3, r8
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0d8      	beq.n	8000538 <__udivmoddi4+0x84>
 8000586:	07fb      	lsls	r3, r7, #31
 8000588:	0872      	lsrs	r2, r6, #1
 800058a:	431a      	orrs	r2, r3
 800058c:	4646      	mov	r6, r8
 800058e:	087b      	lsrs	r3, r7, #1
 8000590:	e00e      	b.n	80005b0 <__udivmoddi4+0xfc>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d101      	bne.n	800059a <__udivmoddi4+0xe6>
 8000596:	42a2      	cmp	r2, r4
 8000598:	d80c      	bhi.n	80005b4 <__udivmoddi4+0x100>
 800059a:	1aa4      	subs	r4, r4, r2
 800059c:	419d      	sbcs	r5, r3
 800059e:	2001      	movs	r0, #1
 80005a0:	1924      	adds	r4, r4, r4
 80005a2:	416d      	adcs	r5, r5
 80005a4:	2100      	movs	r1, #0
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1824      	adds	r4, r4, r0
 80005aa:	414d      	adcs	r5, r1
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d006      	beq.n	80005be <__udivmoddi4+0x10a>
 80005b0:	42ab      	cmp	r3, r5
 80005b2:	d9ee      	bls.n	8000592 <__udivmoddi4+0xde>
 80005b4:	3e01      	subs	r6, #1
 80005b6:	1924      	adds	r4, r4, r4
 80005b8:	416d      	adcs	r5, r5
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d1f8      	bne.n	80005b0 <__udivmoddi4+0xfc>
 80005be:	9800      	ldr	r0, [sp, #0]
 80005c0:	9901      	ldr	r1, [sp, #4]
 80005c2:	465b      	mov	r3, fp
 80005c4:	1900      	adds	r0, r0, r4
 80005c6:	4169      	adcs	r1, r5
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db24      	blt.n	8000616 <__udivmoddi4+0x162>
 80005cc:	002b      	movs	r3, r5
 80005ce:	465a      	mov	r2, fp
 80005d0:	4644      	mov	r4, r8
 80005d2:	40d3      	lsrs	r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	40e2      	lsrs	r2, r4
 80005d8:	001c      	movs	r4, r3
 80005da:	465b      	mov	r3, fp
 80005dc:	0015      	movs	r5, r2
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db2a      	blt.n	8000638 <__udivmoddi4+0x184>
 80005e2:	0026      	movs	r6, r4
 80005e4:	409e      	lsls	r6, r3
 80005e6:	0033      	movs	r3, r6
 80005e8:	0026      	movs	r6, r4
 80005ea:	4647      	mov	r7, r8
 80005ec:	40be      	lsls	r6, r7
 80005ee:	0032      	movs	r2, r6
 80005f0:	1a80      	subs	r0, r0, r2
 80005f2:	4199      	sbcs	r1, r3
 80005f4:	9000      	str	r0, [sp, #0]
 80005f6:	9101      	str	r1, [sp, #4]
 80005f8:	e79e      	b.n	8000538 <__udivmoddi4+0x84>
 80005fa:	42a3      	cmp	r3, r4
 80005fc:	d8bc      	bhi.n	8000578 <__udivmoddi4+0xc4>
 80005fe:	e782      	b.n	8000506 <__udivmoddi4+0x52>
 8000600:	4642      	mov	r2, r8
 8000602:	2320      	movs	r3, #32
 8000604:	2100      	movs	r1, #0
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	2200      	movs	r2, #0
 800060a:	9100      	str	r1, [sp, #0]
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	2201      	movs	r2, #1
 8000610:	40da      	lsrs	r2, r3
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	e785      	b.n	8000522 <__udivmoddi4+0x6e>
 8000616:	4642      	mov	r2, r8
 8000618:	2320      	movs	r3, #32
 800061a:	1a9b      	subs	r3, r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	4646      	mov	r6, r8
 8000620:	409a      	lsls	r2, r3
 8000622:	0023      	movs	r3, r4
 8000624:	40f3      	lsrs	r3, r6
 8000626:	4644      	mov	r4, r8
 8000628:	4313      	orrs	r3, r2
 800062a:	002a      	movs	r2, r5
 800062c:	40e2      	lsrs	r2, r4
 800062e:	001c      	movs	r4, r3
 8000630:	465b      	mov	r3, fp
 8000632:	0015      	movs	r5, r2
 8000634:	2b00      	cmp	r3, #0
 8000636:	dad4      	bge.n	80005e2 <__udivmoddi4+0x12e>
 8000638:	4642      	mov	r2, r8
 800063a:	002f      	movs	r7, r5
 800063c:	2320      	movs	r3, #32
 800063e:	0026      	movs	r6, r4
 8000640:	4097      	lsls	r7, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	40de      	lsrs	r6, r3
 8000646:	003b      	movs	r3, r7
 8000648:	4333      	orrs	r3, r6
 800064a:	e7cd      	b.n	80005e8 <__udivmoddi4+0x134>

0800064c <__clzsi2>:
 800064c:	211c      	movs	r1, #28
 800064e:	2301      	movs	r3, #1
 8000650:	041b      	lsls	r3, r3, #16
 8000652:	4298      	cmp	r0, r3
 8000654:	d301      	bcc.n	800065a <__clzsi2+0xe>
 8000656:	0c00      	lsrs	r0, r0, #16
 8000658:	3910      	subs	r1, #16
 800065a:	0a1b      	lsrs	r3, r3, #8
 800065c:	4298      	cmp	r0, r3
 800065e:	d301      	bcc.n	8000664 <__clzsi2+0x18>
 8000660:	0a00      	lsrs	r0, r0, #8
 8000662:	3908      	subs	r1, #8
 8000664:	091b      	lsrs	r3, r3, #4
 8000666:	4298      	cmp	r0, r3
 8000668:	d301      	bcc.n	800066e <__clzsi2+0x22>
 800066a:	0900      	lsrs	r0, r0, #4
 800066c:	3904      	subs	r1, #4
 800066e:	a202      	add	r2, pc, #8	@ (adr r2, 8000678 <__clzsi2+0x2c>)
 8000670:	5c10      	ldrb	r0, [r2, r0]
 8000672:	1840      	adds	r0, r0, r1
 8000674:	4770      	bx	lr
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	02020304 	.word	0x02020304
 800067c:	01010101 	.word	0x01010101
	...

08000688 <__clzdi2>:
 8000688:	b510      	push	{r4, lr}
 800068a:	2900      	cmp	r1, #0
 800068c:	d103      	bne.n	8000696 <__clzdi2+0xe>
 800068e:	f7ff ffdd 	bl	800064c <__clzsi2>
 8000692:	3020      	adds	r0, #32
 8000694:	e002      	b.n	800069c <__clzdi2+0x14>
 8000696:	0008      	movs	r0, r1
 8000698:	f7ff ffd8 	bl	800064c <__clzsi2>
 800069c:	bd10      	pop	{r4, pc}
 800069e:	46c0      	nop			@ (mov r8, r8)

080006a0 <USB_RX>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USB_RX(uint8_t* Buf, uint32_t* Len) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
//data from USB
	memcpy((int8_t *) &UserRxBufferFS[0],(int8_t *) Buf, *Len);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <USB_RX+0x58>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f00d f901 	bl	800d8ba <memcpy>
	new_data_length +=*Len;
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <USB_RX+0x5c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	18d2      	adds	r2, r2, r3
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <USB_RX+0x5c>)
 80006c4:	601a      	str	r2, [r3, #0]
	if (memchr(Buf, '\r', *Len))  {
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	210d      	movs	r1, #13
 80006ce:	0018      	movs	r0, r3
 80006d0:	f00d f8e8 	bl	800d8a4 <memchr>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d00a      	beq.n	80006ee <USB_RX+0x4e>
		SCPI_Input(&scpi_context,(char *) UserRxBufferFS, new_data_length);
 80006d8:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <USB_RX+0x5c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	001a      	movs	r2, r3
 80006de:	4906      	ldr	r1, [pc, #24]	@ (80006f8 <USB_RX+0x58>)
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <USB_RX+0x60>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f003 f9b2 	bl	8003a4c <SCPI_Input>
		new_data_length=0;
 80006e8:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <USB_RX+0x5c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
	}
}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	20000758 	.word	0x20000758
 80006fc:	200002c8 	.word	0x200002c8
 8000700:	200003f0 	.word	0x200003f0

08000704 <send_msg>:
#else
  return max6675_readTemp(sensor);
#endif
}

void send_msg(uint8_t *msg,uint8_t len) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	000a      	movs	r2, r1
 800070e:	1cfb      	adds	r3, r7, #3
 8000710:	701a      	strb	r2, [r3, #0]
	  CDC_Transmit_FS(msg, len);
 8000712:	1cfb      	adds	r3, r7, #3
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b29a      	uxth	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	0011      	movs	r1, r2
 800071c:	0018      	movs	r0, r3
 800071e:	f00c fa1d 	bl	800cb5c <CDC_Transmit_FS>
}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b002      	add	sp, #8
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b089      	sub	sp, #36	@ 0x24
 8000730:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f004 fed9 	bl	80054e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f84b 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073a:	f000 f94d 	bl	80009d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800073e:	f000 f8bd 	bl	80008bc <MX_SPI1_Init>
  MX_TIM2_Init();
 8000742:	f000 f8f3 	bl	800092c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000746:	f00c f96b 	bl	800ca20 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
#ifdef max31855
  max31855_init();
#else
  max6675_init();
 800074a:	f000 f9af 	bl	8000aac <max6675_init>
#endif
  RegisterCallback(USB_RX);
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <main+0x74>)
 8000750:	0018      	movs	r0, r3
 8000752:	f00c f999 	bl	800ca88 <RegisterCallback>
  SCPI_Init(&scpi_context,
 8000756:	4c13      	ldr	r4, [pc, #76]	@ (80007a4 <main+0x78>)
 8000758:	4a13      	ldr	r2, [pc, #76]	@ (80007a8 <main+0x7c>)
 800075a:	4914      	ldr	r1, [pc, #80]	@ (80007ac <main+0x80>)
 800075c:	4814      	ldr	r0, [pc, #80]	@ (80007b0 <main+0x84>)
 800075e:	2311      	movs	r3, #17
 8000760:	9307      	str	r3, [sp, #28]
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <main+0x88>)
 8000764:	9306      	str	r3, [sp, #24]
 8000766:	2380      	movs	r3, #128	@ 0x80
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	9305      	str	r3, [sp, #20]
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <main+0x8c>)
 800076e:	9304      	str	r3, [sp, #16]
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <main+0x90>)
 8000772:	9303      	str	r3, [sp, #12]
 8000774:	2300      	movs	r3, #0
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <main+0x94>)
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <main+0x98>)
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	0023      	movs	r3, r4
 8000782:	f003 f926 	bl	80039d2 <SCPI_Init>
      &scpi_interface,
      scpi_units_def,
      SCPI_IDN1, SCPI_IDN2, SCPI_IDN3, SCPI_IDN4,
      scpi_input_buffer, SCPI_INPUT_BUFFER_LENGTH,
      scpi_error_queue_data, SCPI_ERROR_QUEUE_SIZE);
  send_msg((uint8_t *) &InstID[0], sizeof(InstID));
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <main+0x9c>)
 8000788:	2119      	movs	r1, #25
 800078a:	0018      	movs	r0, r3
 800078c:	f7ff ffba 	bl	8000704 <send_msg>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if (is_new_data_ready) {
 8000790:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <main+0xa0>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d0fb      	beq.n	8000790 <main+0x64>

	      is_new_data_ready = 0;
 8000798:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <main+0xa0>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
	    if (is_new_data_ready) {
 800079e:	e7f7      	b.n	8000790 <main+0x64>
 80007a0:	080006a1 	.word	0x080006a1
 80007a4:	0800ea78 	.word	0x0800ea78
 80007a8:	20000030 	.word	0x20000030
 80007ac:	0800e730 	.word	0x0800e730
 80007b0:	200003f0 	.word	0x200003f0
 80007b4:	200003cc 	.word	0x200003cc
 80007b8:	200002cc 	.word	0x200002cc
 80007bc:	0800e128 	.word	0x0800e128
 80007c0:	0800e130 	.word	0x0800e130
 80007c4:	0800e13c 	.word	0x0800e13c
 80007c8:	0800e714 	.word	0x0800e714
 80007cc:	200002c4 	.word	0x200002c4

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b09d      	sub	sp, #116	@ 0x74
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	2438      	movs	r4, #56	@ 0x38
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	0018      	movs	r0, r3
 80007dc:	2338      	movs	r3, #56	@ 0x38
 80007de:	001a      	movs	r2, r3
 80007e0:	2100      	movs	r1, #0
 80007e2:	f00c fffa 	bl	800d7da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e6:	2324      	movs	r3, #36	@ 0x24
 80007e8:	18fb      	adds	r3, r7, r3
 80007ea:	0018      	movs	r0, r3
 80007ec:	2314      	movs	r3, #20
 80007ee:	001a      	movs	r2, r3
 80007f0:	2100      	movs	r1, #0
 80007f2:	f00c fff2 	bl	800d7da <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f6:	003b      	movs	r3, r7
 80007f8:	0018      	movs	r0, r3
 80007fa:	2324      	movs	r3, #36	@ 0x24
 80007fc:	001a      	movs	r2, r3
 80007fe:	2100      	movs	r1, #0
 8000800:	f00c ffeb 	bl	800d7da <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000804:	4b2b      	ldr	r3, [pc, #172]	@ (80008b4 <SystemClock_Config+0xe4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a2b      	ldr	r2, [pc, #172]	@ (80008b8 <SystemClock_Config+0xe8>)
 800080a:	401a      	ands	r2, r3
 800080c:	4b29      	ldr	r3, [pc, #164]	@ (80008b4 <SystemClock_Config+0xe4>)
 800080e:	2180      	movs	r1, #128	@ 0x80
 8000810:	0109      	lsls	r1, r1, #4
 8000812:	430a      	orrs	r2, r1
 8000814:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000816:	0021      	movs	r1, r4
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2222      	movs	r2, #34	@ 0x22
 800081c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2201      	movs	r2, #1
 8000822:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2210      	movs	r2, #16
 8000828:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2201      	movs	r2, #1
 800082e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2202      	movs	r2, #2
 8000834:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2280      	movs	r2, #128	@ 0x80
 8000840:	02d2      	lsls	r2, r2, #11
 8000842:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2280      	movs	r2, #128	@ 0x80
 8000848:	03d2      	lsls	r2, r2, #15
 800084a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	187b      	adds	r3, r7, r1
 800084e:	0018      	movs	r0, r3
 8000850:	f006 ffaa 	bl	80077a8 <HAL_RCC_OscConfig>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000858:	f000 f922 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	2124      	movs	r1, #36	@ 0x24
 800085e:	187b      	adds	r3, r7, r1
 8000860:	220f      	movs	r2, #15
 8000862:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2203      	movs	r2, #3
 8000868:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2101      	movs	r1, #1
 8000880:	0018      	movs	r0, r3
 8000882:	f007 fb65 	bl	8007f50 <HAL_RCC_ClockConfig>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800088a:	f000 f909 	bl	8000aa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800088e:	003b      	movs	r3, r7
 8000890:	2240      	movs	r2, #64	@ 0x40
 8000892:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000894:	003b      	movs	r3, r7
 8000896:	2280      	movs	r2, #128	@ 0x80
 8000898:	04d2      	lsls	r2, r2, #19
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800089c:	003b      	movs	r3, r7
 800089e:	0018      	movs	r0, r3
 80008a0:	f007 fd44 	bl	800832c <HAL_RCCEx_PeriphCLKConfig>
 80008a4:	1e03      	subs	r3, r0, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80008a8:	f000 f8fa 	bl	8000aa0 <Error_Handler>
  }
}
 80008ac:	46c0      	nop			@ (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b01d      	add	sp, #116	@ 0x74
 80008b2:	bd90      	pop	{r4, r7, pc}
 80008b4:	40007000 	.word	0x40007000
 80008b8:	ffffe7ff 	.word	0xffffe7ff

080008bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c0:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <MX_SPI1_Init+0x68>)
 80008c2:	4a19      	ldr	r2, [pc, #100]	@ (8000928 <MX_SPI1_Init+0x6c>)
 80008c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008c6:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <MX_SPI1_Init+0x68>)
 80008c8:	2282      	movs	r2, #130	@ 0x82
 80008ca:	0052      	lsls	r2, r2, #1
 80008cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ce:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <MX_SPI1_Init+0x68>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d4:	4b13      	ldr	r3, [pc, #76]	@ (8000924 <MX_SPI1_Init+0x68>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <MX_SPI1_Init+0x68>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e0:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <MX_SPI1_Init+0x68>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <MX_SPI1_Init+0x68>)
 80008e8:	2280      	movs	r2, #128	@ 0x80
 80008ea:	0092      	lsls	r2, r2, #2
 80008ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <MX_SPI1_Init+0x68>)
 80008f0:	2220      	movs	r2, #32
 80008f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <MX_SPI1_Init+0x68>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <MX_SPI1_Init+0x68>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000900:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <MX_SPI1_Init+0x68>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000906:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <MX_SPI1_Init+0x68>)
 8000908:	2207      	movs	r2, #7
 800090a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800090c:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <MX_SPI1_Init+0x68>)
 800090e:	0018      	movs	r0, r3
 8000910:	f007 fe68 	bl	80085e4 <HAL_SPI_Init>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000918:	f000 f8c2 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800091c:	46c0      	nop			@ (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	2000022c 	.word	0x2000022c
 8000928:	40013000 	.word	0x40013000

0800092c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	2308      	movs	r3, #8
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	0018      	movs	r0, r3
 8000938:	2310      	movs	r3, #16
 800093a:	001a      	movs	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	f00c ff4c 	bl	800d7da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000942:	003b      	movs	r3, r7
 8000944:	0018      	movs	r0, r3
 8000946:	2308      	movs	r3, #8
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f00c ff45 	bl	800d7da <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000950:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <MX_TIM2_Init+0xa4>)
 8000952:	2280      	movs	r2, #128	@ 0x80
 8000954:	05d2      	lsls	r2, r2, #23
 8000956:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 8000958:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <MX_TIM2_Init+0xa4>)
 800095a:	22fa      	movs	r2, #250	@ 0xfa
 800095c:	01d2      	lsls	r2, r2, #7
 800095e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <MX_TIM2_Init+0xa4>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000966:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <MX_TIM2_Init+0xa4>)
 8000968:	4a1a      	ldr	r2, [pc, #104]	@ (80009d4 <MX_TIM2_Init+0xa8>)
 800096a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096c:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <MX_TIM2_Init+0xa4>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000972:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <MX_TIM2_Init+0xa4>)
 8000974:	2280      	movs	r2, #128	@ 0x80
 8000976:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000978:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <MX_TIM2_Init+0xa4>)
 800097a:	0018      	movs	r0, r3
 800097c:	f007 fec6 	bl	800870c <HAL_TIM_Base_Init>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000984:	f000 f88c 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000988:	2108      	movs	r1, #8
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2280      	movs	r2, #128	@ 0x80
 800098e:	0152      	lsls	r2, r2, #5
 8000990:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000992:	187a      	adds	r2, r7, r1
 8000994:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_TIM2_Init+0xa4>)
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f007 ffdf 	bl	800895c <HAL_TIM_ConfigClockSource>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80009a2:	f000 f87d 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	003b      	movs	r3, r7
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ac:	003b      	movs	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009b2:	003a      	movs	r2, r7
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_TIM2_Init+0xa4>)
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f008 f9c3 	bl	8008d44 <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80009c2:	f000 f86d 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b006      	add	sp, #24
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	20000284 	.word	0x20000284
 80009d4:	000003e7 	.word	0x000003e7

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b089      	sub	sp, #36	@ 0x24
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	240c      	movs	r4, #12
 80009e0:	193b      	adds	r3, r7, r4
 80009e2:	0018      	movs	r0, r3
 80009e4:	2314      	movs	r3, #20
 80009e6:	001a      	movs	r2, r3
 80009e8:	2100      	movs	r1, #0
 80009ea:	f00c fef6 	bl	800d7da <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000a98 <MX_GPIO_Init+0xc0>)
 80009f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009f2:	4b29      	ldr	r3, [pc, #164]	@ (8000a98 <MX_GPIO_Init+0xc0>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	430a      	orrs	r2, r1
 80009f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009fa:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <MX_GPIO_Init+0xc0>)
 80009fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009fe:	2201      	movs	r2, #1
 8000a00:	4013      	ands	r3, r2
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	4b24      	ldr	r3, [pc, #144]	@ (8000a98 <MX_GPIO_Init+0xc0>)
 8000a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a0a:	4b23      	ldr	r3, [pc, #140]	@ (8000a98 <MX_GPIO_Init+0xc0>)
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a12:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <MX_GPIO_Init+0xc0>)
 8000a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a16:	2202      	movs	r2, #2
 8000a18:	4013      	ands	r3, r2
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|CS2_Pin, GPIO_PIN_SET);
 8000a1e:	23a0      	movs	r3, #160	@ 0xa0
 8000a20:	05db      	lsls	r3, r3, #23
 8000a22:	2201      	movs	r2, #1
 8000a24:	2118      	movs	r1, #24
 8000a26:	0018      	movs	r0, r3
 8000a28:	f005 f84e 	bl	8005ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS3_Pin|CS4_Pin, GPIO_PIN_SET);
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a9c <MX_GPIO_Init+0xc4>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2103      	movs	r1, #3
 8000a32:	0018      	movs	r0, r3
 8000a34:	f005 f848 	bl	8005ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8000a38:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <MX_GPIO_Init+0xc4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2108      	movs	r1, #8
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f005 f842 	bl	8005ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS1_Pin CS2_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin;
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	2218      	movs	r2, #24
 8000a48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	193a      	adds	r2, r7, r4
 8000a5e:	23a0      	movs	r3, #160	@ 0xa0
 8000a60:	05db      	lsls	r3, r3, #23
 8000a62:	0011      	movs	r1, r2
 8000a64:	0018      	movs	r0, r3
 8000a66:	f004 feb1 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS3_Pin CS4_Pin Relay_Pin */
  GPIO_InitStruct.Pin = CS3_Pin|CS4_Pin|Relay_Pin;
 8000a6a:	0021      	movs	r1, r4
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	220b      	movs	r2, #11
 8000a70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2201      	movs	r2, #1
 8000a76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	4a05      	ldr	r2, [pc, #20]	@ (8000a9c <MX_GPIO_Init+0xc4>)
 8000a88:	0019      	movs	r1, r3
 8000a8a:	0010      	movs	r0, r2
 8000a8c:	f004 fe9e 	bl	80057cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b009      	add	sp, #36	@ 0x24
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	50000400 	.word	0x50000400

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	e7fd      	b.n	8000aa8 <Error_Handler+0x8>

08000aac <max6675_init>:
#include "max6675.h"
#include "stdbool.h"
#include "stdio.h"
extern SPI_HandleTypeDef hspi1;

void max6675_init(void){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0

}
 8000ab0:	46c0      	nop			@ (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <SCPI_Write>:
 #include <string.h>
 #include "../../libscpi/inc/scpi/scpi.h"
 #include "scpi-def.h"
 #include "usbd_cdc_if.h"

size_t SCPI_Write(scpi_t * context, const char * data, size_t len) {
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b084      	sub	sp, #16
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	60f8      	str	r0, [r7, #12]
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
    (void) context;

    while (CDC_Transmit_FS((uint8_t *)data, len));
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	0011      	movs	r1, r2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f00c f845 	bl	800cb5c <CDC_Transmit_FS>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d1f6      	bne.n	8000ac4 <SCPI_Write+0xe>
    return SCPI_RES_OK;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	0018      	movs	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b004      	add	sp, #16
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <SCPI_Flush>:

scpi_result_t SCPI_Flush(scpi_t * context) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
    (void) context;
    return SCPI_RES_OK;
 8000ae8:	2301      	movs	r3, #1
}
 8000aea:	0018      	movs	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b002      	add	sp, #8
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <SCPI_Error>:

int SCPI_Error(scpi_t * context, int_fast16_t err) {
 8000af4:	b5b0      	push	{r4, r5, r7, lr}
 8000af6:	b090      	sub	sp, #64	@ 0x40
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
    (void) context;
    char _err[50];
    sprintf(_err, "**ERROR: %d, \"%s\"\r\n", (int16_t) err, SCPI_ErrorTranslate(err));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b21b      	sxth	r3, r3
 8000b02:	001c      	movs	r4, r3
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b21b      	sxth	r3, r3
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 fe43 	bl	8001794 <SCPI_ErrorTranslate>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	4907      	ldr	r1, [pc, #28]	@ (8000b30 <SCPI_Error+0x3c>)
 8000b12:	250c      	movs	r5, #12
 8000b14:	1978      	adds	r0, r7, r5
 8000b16:	0022      	movs	r2, r4
 8000b18:	f00c fe2c 	bl	800d774 <siprintf>
    CDC_Transmit_FS((uint8_t *) &_err[0], 50);
 8000b1c:	197b      	adds	r3, r7, r5
 8000b1e:	2132      	movs	r1, #50	@ 0x32
 8000b20:	0018      	movs	r0, r3
 8000b22:	f00c f81b 	bl	800cb5c <CDC_Transmit_FS>
    return 0;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b010      	add	sp, #64	@ 0x40
 8000b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b30:	0800e14c 	.word	0x0800e14c

08000b34 <SCPI_Control>:

scpi_result_t SCPI_Control(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b093      	sub	sp, #76	@ 0x4c
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	0008      	movs	r0, r1
 8000b3e:	0011      	movs	r1, r2
 8000b40:	1cfb      	adds	r3, r7, #3
 8000b42:	1c02      	adds	r2, r0, #0
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	003b      	movs	r3, r7
 8000b48:	1c0a      	adds	r2, r1, #0
 8000b4a:	801a      	strh	r2, [r3, #0]
    char _err[50];
	(void) context;

    if (SCPI_CTRL_SRQ == ctrl) {
 8000b4c:	1cfb      	adds	r3, r7, #3
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d109      	bne.n	8000b68 <SCPI_Control+0x34>
        sprintf(_err, "**SRQ: 0x%X (%d)\r\n", val, val);
 8000b54:	003b      	movs	r3, r7
 8000b56:	881a      	ldrh	r2, [r3, #0]
 8000b58:	003b      	movs	r3, r7
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	490e      	ldr	r1, [pc, #56]	@ (8000b98 <SCPI_Control+0x64>)
 8000b5e:	200c      	movs	r0, #12
 8000b60:	1838      	adds	r0, r7, r0
 8000b62:	f00c fe07 	bl	800d774 <siprintf>
 8000b66:	e00c      	b.n	8000b82 <SCPI_Control+0x4e>
    } else {
        sprintf(_err, "**CTRL %02x: 0x%X (%d)\r\n", ctrl, val, val);
 8000b68:	1cfb      	adds	r3, r7, #3
 8000b6a:	781a      	ldrb	r2, [r3, #0]
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	881c      	ldrh	r4, [r3, #0]
 8000b70:	003b      	movs	r3, r7
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	4909      	ldr	r1, [pc, #36]	@ (8000b9c <SCPI_Control+0x68>)
 8000b76:	200c      	movs	r0, #12
 8000b78:	1838      	adds	r0, r7, r0
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	0023      	movs	r3, r4
 8000b7e:	f00c fdf9 	bl	800d774 <siprintf>
    }
    CDC_Transmit_FS((uint8_t *) &_err[0], 50);
 8000b82:	230c      	movs	r3, #12
 8000b84:	18fb      	adds	r3, r7, r3
 8000b86:	2132      	movs	r1, #50	@ 0x32
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f00b ffe7 	bl	800cb5c <CDC_Transmit_FS>
    return SCPI_RES_OK;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b011      	add	sp, #68	@ 0x44
 8000b96:	bd90      	pop	{r4, r7, pc}
 8000b98:	0800e160 	.word	0x0800e160
 8000b9c:	0800e174 	.word	0x0800e174

08000ba0 <SCPI_Reset>:

scpi_result_t SCPI_Reset(scpi_t * context) {
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b091      	sub	sp, #68	@ 0x44
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
    (void) context;
    char _err[50];
    sprintf(_err, "**Reset\r\n");
 8000ba8:	4a08      	ldr	r2, [pc, #32]	@ (8000bcc <SCPI_Reset+0x2c>)
 8000baa:	240c      	movs	r4, #12
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	0011      	movs	r1, r2
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f00c fddf 	bl	800d774 <siprintf>
    CDC_Transmit_FS((uint8_t *) &_err[0], 50);
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	2132      	movs	r1, #50	@ 0x32
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f00b ffce 	bl	800cb5c <CDC_Transmit_FS>
    return SCPI_RES_OK;
 8000bc0:	2301      	movs	r3, #1
}
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b011      	add	sp, #68	@ 0x44
 8000bc8:	bd90      	pop	{r4, r7, pc}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	0800e190 	.word	0x0800e190

08000bd0 <SCPI_SystemCommTcpipControlQ>:

scpi_result_t SCPI_SystemCommTcpipControlQ(scpi_t * context) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
    (void) context;

    return SCPI_RES_ERR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	425b      	negs	r3, r3
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b002      	add	sp, #8
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <EXAMPLE_MeasureVoltageIn>:
#include "scpi-def.h"

static uint32_t voltage = 1337;
static double output = 1337.23f;

static scpi_result_t EXAMPLE_MeasureVoltageIn(scpi_t * context) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
    SCPI_ResultDouble(context, output);
 8000bec:	4b05      	ldr	r3, [pc, #20]	@ (8000c04 <EXAMPLE_MeasureVoltageIn+0x20>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	0008      	movs	r0, r1
 8000bf6:	f003 f893 	bl	8003d20 <SCPI_ResultDouble>

    return SCPI_RES_OK;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000008 	.word	0x20000008

08000c08 <EXAMPLE_MeasureVoltageOut>:

static scpi_result_t EXAMPLE_MeasureVoltageOut(scpi_t * context) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
    SCPI_ResultUInt32(context, voltage);
 8000c10:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <EXAMPLE_MeasureVoltageOut+0x20>)
 8000c12:	6819      	ldr	r1, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	220a      	movs	r2, #10
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f003 f86d 	bl	8003cf8 <SCPI_ResultUInt32Base>

    return SCPI_RES_OK;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	0018      	movs	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b002      	add	sp, #8
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000000 	.word	0x20000000

08000c2c <TEST_Bool>:
    CDC_Transmit_FS(_err, 150);

    return SCPI_RES_OK;
}

static scpi_result_t TEST_Bool(scpi_t * context) {
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b0a9      	sub	sp, #164	@ 0xa4
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
    scpi_bool_t param1;
    char _err[150] = {0};
 8000c34:	2308      	movs	r3, #8
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2292      	movs	r2, #146	@ 0x92
 8000c40:	2100      	movs	r1, #0
 8000c42:	0018      	movs	r0, r3
 8000c44:	f00c fdc9 	bl	800d7da <memset>

    /* read first parameter if present */
    if (!SCPI_ParamBool(context, &param1, TRUE)) {
 8000c48:	239f      	movs	r3, #159	@ 0x9f
 8000c4a:	18f9      	adds	r1, r7, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	0018      	movs	r0, r3
 8000c52:	f003 fd3d 	bl	80046d0 <SCPI_ParamBool>
 8000c56:	0003      	movs	r3, r0
 8000c58:	001a      	movs	r2, r3
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	4053      	eors	r3, r2
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <TEST_Bool+0x3e>
        return SCPI_RES_ERR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	425b      	negs	r3, r3
 8000c68:	e00f      	b.n	8000c8a <TEST_Bool+0x5e>
    }

    sprintf(_err, "TEST:BOOL\tP1=%d", param1);
 8000c6a:	239f      	movs	r3, #159	@ 0x9f
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	001a      	movs	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	@ (8000c94 <TEST_Bool+0x68>)
 8000c74:	2408      	movs	r4, #8
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f00c fd7b 	bl	800d774 <siprintf>
    CDC_Transmit_FS(_err, 150);
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2196      	movs	r1, #150	@ 0x96
 8000c82:	0018      	movs	r0, r3
 8000c84:	f00b ff6a 	bl	800cb5c <CDC_Transmit_FS>

    return SCPI_RES_OK;
 8000c88:	2301      	movs	r3, #1
}
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b029      	add	sp, #164	@ 0xa4
 8000c90:	bd90      	pop	{r4, r7, pc}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	0800e1d4 	.word	0x0800e1d4

08000c98 <TEST_ChoiceQ>:
    {"IMMediate", 6},
    {"EXTernal", 7},
    SCPI_CHOICE_LIST_END /* termination of option list */
};

static scpi_result_t TEST_ChoiceQ(scpi_t * context) {
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b0ab      	sub	sp, #172	@ 0xac
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
    char _err[150] = {0};
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	18fb      	adds	r3, r7, r3
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2292      	movs	r2, #146	@ 0x92
 8000cac:	2100      	movs	r1, #0
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f00c fd93 	bl	800d7da <memset>
    int32_t param;
    const char * name;

    if (!SCPI_ParamChoice(context, trigger_source, &param, TRUE)) {
 8000cb4:	230c      	movs	r3, #12
 8000cb6:	18fa      	adds	r2, r7, r3
 8000cb8:	4916      	ldr	r1, [pc, #88]	@ (8000d14 <TEST_ChoiceQ+0x7c>)
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	f003 fd5d 	bl	800477c <SCPI_ParamChoice>
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	4053      	eors	r3, r2
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <TEST_ChoiceQ+0x3e>
        return SCPI_RES_ERR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	425b      	negs	r3, r3
 8000cd4:	e019      	b.n	8000d0a <TEST_ChoiceQ+0x72>
    }

    SCPI_ChoiceToName(trigger_source, param, &name);
 8000cd6:	68f9      	ldr	r1, [r7, #12]
 8000cd8:	2308      	movs	r3, #8
 8000cda:	18fa      	adds	r2, r7, r3
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d14 <TEST_ChoiceQ+0x7c>)
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f003 fccc 	bl	800467c <SCPI_ChoiceToName>

    sprintf(_err, "\tP1=%s (%ld)", name, (long int) param);
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	490b      	ldr	r1, [pc, #44]	@ (8000d18 <TEST_ChoiceQ+0x80>)
 8000cea:	2410      	movs	r4, #16
 8000cec:	1938      	adds	r0, r7, r4
 8000cee:	f00c fd41 	bl	800d774 <siprintf>
    CDC_Transmit_FS(_err, 150);
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	2196      	movs	r1, #150	@ 0x96
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f00b ff30 	bl	800cb5c <CDC_Transmit_FS>

    SCPI_ResultInt32(context, param);
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f002 ffe8 	bl	8003cd8 <SCPI_ResultInt32>

    return SCPI_RES_OK;
 8000d08:	2301      	movs	r3, #1
}
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b02b      	add	sp, #172	@ 0xac
 8000d10:	bd90      	pop	{r4, r7, pc}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	20000010 	.word	0x20000010
 8000d18:	0800e200 	.word	0x0800e200

08000d1c <TEST_Numbers>:

static scpi_result_t TEST_Numbers(scpi_t * context) {
 8000d1c:	b5b0      	push	{r4, r5, r7, lr}
 8000d1e:	b0aa      	sub	sp, #168	@ 0xa8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
    int32_t numbers[2];
    char _err[150] = {0};
 8000d24:	2408      	movs	r4, #8
 8000d26:	193b      	adds	r3, r7, r4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2292      	movs	r2, #146	@ 0x92
 8000d30:	2100      	movs	r1, #0
 8000d32:	0018      	movs	r0, r3
 8000d34:	f00c fd51 	bl	800d7da <memset>

    SCPI_CommandNumbers(context, numbers, 2, 1);
 8000d38:	25a0      	movs	r5, #160	@ 0xa0
 8000d3a:	1979      	adds	r1, r7, r5
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	2301      	movs	r3, #1
 8000d40:	2202      	movs	r2, #2
 8000d42:	f003 fef7 	bl	8004b34 <SCPI_CommandNumbers>

    sprintf(_err, "TEST numbers %d %d", numbers[0], numbers[1]);
 8000d46:	0029      	movs	r1, r5
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	4906      	ldr	r1, [pc, #24]	@ (8000d6c <TEST_Numbers+0x50>)
 8000d52:	1938      	adds	r0, r7, r4
 8000d54:	f00c fd0e 	bl	800d774 <siprintf>
    CDC_Transmit_FS(_err, 150);
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	2196      	movs	r1, #150	@ 0x96
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f00b fefd 	bl	800cb5c <CDC_Transmit_FS>

    return SCPI_RES_OK;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b02a      	add	sp, #168	@ 0xa8
 8000d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d6c:	0800e210 	.word	0x0800e210

08000d70 <TEST_Text>:

static scpi_result_t TEST_Text(scpi_t * context) {
 8000d70:	b590      	push	{r4, r7, lr}
 8000d72:	b0c5      	sub	sp, #276	@ 0x114
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	6078      	str	r0, [r7, #4]
    char buffer[100];
    char _err[150] = {0};
 8000d78:	230c      	movs	r3, #12
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2292      	movs	r2, #146	@ 0x92
 8000d84:	2100      	movs	r1, #0
 8000d86:	0018      	movs	r0, r3
 8000d88:	f00c fd27 	bl	800d7da <memset>
    size_t copy_len;

    if (!SCPI_ParamCopyText(context, buffer, sizeof(buffer), &copy_len, FALSE)) {
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	18fb      	adds	r3, r7, r3
 8000d90:	24a4      	movs	r4, #164	@ 0xa4
 8000d92:	1939      	adds	r1, r7, r4
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	9200      	str	r2, [sp, #0]
 8000d9a:	2264      	movs	r2, #100	@ 0x64
 8000d9c:	f003 fb72 	bl	8004484 <SCPI_ParamCopyText>
 8000da0:	0003      	movs	r3, r0
 8000da2:	001a      	movs	r2, r3
 8000da4:	2301      	movs	r3, #1
 8000da6:	4053      	eors	r3, r2
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d002      	beq.n	8000db4 <TEST_Text+0x44>
        buffer[0] = '\0';
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
    }

    sprintf(_err, "TEXT: ***%s***", buffer);
 8000db4:	23a4      	movs	r3, #164	@ 0xa4
 8000db6:	18fa      	adds	r2, r7, r3
 8000db8:	4907      	ldr	r1, [pc, #28]	@ (8000dd8 <TEST_Text+0x68>)
 8000dba:	240c      	movs	r4, #12
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f00c fcd8 	bl	800d774 <siprintf>
    CDC_Transmit_FS(_err, 150);
 8000dc4:	193b      	adds	r3, r7, r4
 8000dc6:	2196      	movs	r1, #150	@ 0x96
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f00b fec7 	bl	800cb5c <CDC_Transmit_FS>

    return SCPI_RES_OK;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b043      	add	sp, #268	@ 0x10c
 8000dd6:	bd90      	pop	{r4, r7, pc}
 8000dd8:	0800e224 	.word	0x0800e224

08000ddc <TEST_ArbQ>:

static scpi_result_t TEST_ArbQ(scpi_t * context) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
    const char * data;
    size_t len;

    if (SCPI_ParamArbitraryBlock(context, &data, &len, FALSE)) {
 8000de4:	2308      	movs	r3, #8
 8000de6:	18fa      	adds	r2, r7, r3
 8000de8:	230c      	movs	r3, #12
 8000dea:	18f9      	adds	r1, r7, r3
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	2300      	movs	r3, #0
 8000df0:	f003 fafe 	bl	80043f0 <SCPI_ParamArbitraryBlock>
 8000df4:	1e03      	subs	r3, r0, #0
 8000df6:	d005      	beq.n	8000e04 <TEST_ArbQ+0x28>
        SCPI_ResultArbitraryBlock(context, data, len);
 8000df8:	68f9      	ldr	r1, [r7, #12]
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f003 f936 	bl	8004070 <SCPI_ResultArbitraryBlock>
    }

    return SCPI_RES_OK;
 8000e04:	2301      	movs	r3, #1
}
 8000e06:	0018      	movs	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b004      	add	sp, #16
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <TEST_Chanlst>:
 * (@1!1:3!2) would be 1!1, 1!2, 2!1, 2!2, 3!1, 3!2.
 * (@3!1:1!3) would be 3!1, 3!2, 3!3, 2!1, 2!2, 2!3, ... 1!3.
 *
 * @param channel_list channel list, compare to SCPI99 Vol 1 Ch. 8.3.2
 */
static scpi_result_t TEST_Chanlst(scpi_t *context) {
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e12:	b0d7      	sub	sp, #348	@ 0x15c
 8000e14:	af04      	add	r7, sp, #16
 8000e16:	6078      	str	r0, [r7, #4]
#define MAXROW 2    /* maximum number of rows */
#define MAXCOL 6    /* maximum number of columns */
#define MAXDIM 2    /* maximum number of dimensions */
    scpi_channel_value_t array[MAXROW * MAXCOL]; /* array which holds values in order (2D) */
    size_t chanlst_idx; /* index for channel list */
    size_t arr_idx = 0; /* index for array */
 8000e18:	2300      	movs	r3, #0
 8000e1a:	24a0      	movs	r4, #160	@ 0xa0
 8000e1c:	0064      	lsls	r4, r4, #1
 8000e1e:	193a      	adds	r2, r7, r4
 8000e20:	6013      	str	r3, [r2, #0]
    size_t n, m = 1; /* counters for row (n) and columns (m) */
 8000e22:	2301      	movs	r3, #1
 8000e24:	229c      	movs	r2, #156	@ 0x9c
 8000e26:	0052      	lsls	r2, r2, #1
 8000e28:	18ba      	adds	r2, r7, r2
 8000e2a:	6013      	str	r3, [r2, #0]

    /* get channel list */
    if (SCPI_Parameter(context, &channel_list_param, TRUE)) {
 8000e2c:	258c      	movs	r5, #140	@ 0x8c
 8000e2e:	006d      	lsls	r5, r5, #1
 8000e30:	1979      	adds	r1, r7, r5
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2201      	movs	r2, #1
 8000e36:	0018      	movs	r0, r3
 8000e38:	f003 f94e 	bl	80040d8 <SCPI_Parameter>
 8000e3c:	1e03      	subs	r3, r0, #0
 8000e3e:	d100      	bne.n	8000e42 <TEST_Chanlst+0x32>
 8000e40:	e1a2      	b.n	8001188 <TEST_Chanlst+0x378>
        scpi_bool_t is_range;
        int32_t values_from[MAXDIM];
        int32_t values_to[MAXDIM];
        size_t dimensions;

        bool for_stop_row = FALSE; /* true if iteration for rows has to stop */
 8000e42:	2338      	movs	r3, #56	@ 0x38
 8000e44:	33ff      	adds	r3, #255	@ 0xff
 8000e46:	18fb      	adds	r3, r7, r3
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
        bool for_stop_col = FALSE; /* true if iteration for columns has to stop */
 8000e4c:	239b      	movs	r3, #155	@ 0x9b
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
        int32_t dir_row = 1; /* direction of counter for rows, +/-1 */
 8000e56:	2301      	movs	r3, #1
 8000e58:	2298      	movs	r2, #152	@ 0x98
 8000e5a:	0052      	lsls	r2, r2, #1
 8000e5c:	18ba      	adds	r2, r7, r2
 8000e5e:	6013      	str	r3, [r2, #0]
        int32_t dir_col = 1; /* direction of counter for columns, +/-1 */
 8000e60:	2301      	movs	r3, #1
 8000e62:	2296      	movs	r2, #150	@ 0x96
 8000e64:	0052      	lsls	r2, r2, #1
 8000e66:	18ba      	adds	r2, r7, r2
 8000e68:	6013      	str	r3, [r2, #0]

        /* the next statement is valid usage and it gets only real number of dimensions for the first item (index 0) */
        if (!SCPI_ExprChannelListEntry(context, &channel_list_param, 0, &is_range, NULL, NULL, 0, &dimensions)) {
 8000e6a:	23b7      	movs	r3, #183	@ 0xb7
 8000e6c:	18fa      	adds	r2, r7, r3
 8000e6e:	1979      	adds	r1, r7, r5
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	23a0      	movs	r3, #160	@ 0xa0
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	9303      	str	r3, [sp, #12]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	9302      	str	r3, [sp, #8]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	2300      	movs	r3, #0
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	0013      	movs	r3, r2
 8000e86:	2200      	movs	r2, #0
 8000e88:	f000 fda0 	bl	80019cc <SCPI_ExprChannelListEntry>
 8000e8c:	1e03      	subs	r3, r0, #0
 8000e8e:	d000      	beq.n	8000e92 <TEST_Chanlst+0x82>
 8000e90:	e17a      	b.n	8001188 <TEST_Chanlst+0x378>
            chanlst_idx = 0; /* call first index */
 8000e92:	2300      	movs	r3, #0
 8000e94:	22a2      	movs	r2, #162	@ 0xa2
 8000e96:	0052      	lsls	r2, r2, #1
 8000e98:	18ba      	adds	r2, r7, r2
 8000e9a:	6013      	str	r3, [r2, #0]
            arr_idx = 0; /* set arr_idx to 0 */
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	193a      	adds	r2, r7, r4
 8000ea0:	6013      	str	r3, [r2, #0]
            do { /* if valid, iterate over channel_list_param index while res == valid (do-while cause we have to do it once) */
                res = SCPI_ExprChannelListEntry(context, &channel_list_param, chanlst_idx, &is_range, values_from, values_to, 4, &dimensions);
 8000ea2:	23a2      	movs	r3, #162	@ 0xa2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	18fb      	adds	r3, r7, r3
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	2328      	movs	r3, #40	@ 0x28
 8000eac:	33ff      	adds	r3, #255	@ 0xff
 8000eae:	18fc      	adds	r4, r7, r3
 8000eb0:	26b7      	movs	r6, #183	@ 0xb7
 8000eb2:	19bd      	adds	r5, r7, r6
 8000eb4:	238c      	movs	r3, #140	@ 0x8c
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	18f9      	adds	r1, r7, r3
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	23a0      	movs	r3, #160	@ 0xa0
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	9303      	str	r3, [sp, #12]
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	9302      	str	r3, [sp, #8]
 8000ec6:	23a4      	movs	r3, #164	@ 0xa4
 8000ec8:	18fb      	adds	r3, r7, r3
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	23ac      	movs	r3, #172	@ 0xac
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	002b      	movs	r3, r5
 8000ed4:	f000 fd7a 	bl	80019cc <SCPI_ExprChannelListEntry>
 8000ed8:	0003      	movs	r3, r0
 8000eda:	7023      	strb	r3, [r4, #0]
                if (is_range == FALSE) { /* still can have multiple dimensions */
 8000edc:	19bb      	adds	r3, r7, r6
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4053      	eors	r3, r2
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d044      	beq.n	8000f74 <TEST_Chanlst+0x164>
                    if (dimensions == 1) {
 8000eea:	23a0      	movs	r3, #160	@ 0xa0
 8000eec:	18fa      	adds	r2, r7, r3
 8000eee:	6813      	ldr	r3, [r2, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d113      	bne.n	8000f1c <TEST_Chanlst+0x10c>
                        /* here we have our values
                         * row == values_from[0]
                         * col == 0 (fixed number)
                         * call a function or something */
                        array[arr_idx].row = values_from[0];
 8000ef4:	23ac      	movs	r3, #172	@ 0xac
 8000ef6:	18fb      	adds	r3, r7, r3
 8000ef8:	6819      	ldr	r1, [r3, #0]
 8000efa:	20b8      	movs	r0, #184	@ 0xb8
 8000efc:	183b      	adds	r3, r7, r0
 8000efe:	24a0      	movs	r4, #160	@ 0xa0
 8000f00:	0064      	lsls	r4, r4, #1
 8000f02:	193a      	adds	r2, r7, r4
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	00d2      	lsls	r2, r2, #3
 8000f08:	50d1      	str	r1, [r2, r3]
                        array[arr_idx].col = 0;
 8000f0a:	183a      	adds	r2, r7, r0
 8000f0c:	193b      	adds	r3, r7, r4
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	18d3      	adds	r3, r2, r3
 8000f14:	3304      	adds	r3, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	e01c      	b.n	8000f56 <TEST_Chanlst+0x146>
                    } else if (dimensions == 2) {
 8000f1c:	23a0      	movs	r3, #160	@ 0xa0
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d114      	bne.n	8000f50 <TEST_Chanlst+0x140>
                        /* here we have our values
                         * row == values_fom[0]
                         * col == values_from[1]
                         * call a function or something */
                        array[arr_idx].row = values_from[0];
 8000f26:	20ac      	movs	r0, #172	@ 0xac
 8000f28:	183b      	adds	r3, r7, r0
 8000f2a:	6819      	ldr	r1, [r3, #0]
 8000f2c:	24b8      	movs	r4, #184	@ 0xb8
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	25a0      	movs	r5, #160	@ 0xa0
 8000f32:	006d      	lsls	r5, r5, #1
 8000f34:	197a      	adds	r2, r7, r5
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	00d2      	lsls	r2, r2, #3
 8000f3a:	50d1      	str	r1, [r2, r3]
                        array[arr_idx].col = values_from[1];
 8000f3c:	183b      	adds	r3, r7, r0
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	1939      	adds	r1, r7, r4
 8000f42:	197b      	adds	r3, r7, r5
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	18cb      	adds	r3, r1, r3
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e002      	b.n	8000f56 <TEST_Chanlst+0x146>
                    } else {
                        return SCPI_RES_ERR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	425b      	negs	r3, r3
 8000f54:	e173      	b.n	800123e <TEST_Chanlst+0x42e>
                    }
                    arr_idx++; /* inkrement array where we want to save our values to, not neccessary otherwise */
 8000f56:	22a0      	movs	r2, #160	@ 0xa0
 8000f58:	0052      	lsls	r2, r2, #1
 8000f5a:	18bb      	adds	r3, r7, r2
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	18b9      	adds	r1, r7, r2
 8000f62:	600b      	str	r3, [r1, #0]
                    if (arr_idx >= MAXROW * MAXCOL) {
 8000f64:	18bb      	adds	r3, r7, r2
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b0b      	cmp	r3, #11
 8000f6a:	d800      	bhi.n	8000f6e <TEST_Chanlst+0x15e>
 8000f6c:	e0ec      	b.n	8001148 <TEST_Chanlst+0x338>
                        return SCPI_RES_ERR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	425b      	negs	r3, r3
 8000f72:	e164      	b.n	800123e <TEST_Chanlst+0x42e>
                    }
                } else if (is_range == TRUE) {
 8000f74:	23b7      	movs	r3, #183	@ 0xb7
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d100      	bne.n	8000f80 <TEST_Chanlst+0x170>
 8000f7e:	e0e0      	b.n	8001142 <TEST_Chanlst+0x332>
                    if (values_from[0] > values_to[0]) {
 8000f80:	23ac      	movs	r3, #172	@ 0xac
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	23a4      	movs	r3, #164	@ 0xa4
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	dd06      	ble.n	8000f9e <TEST_Chanlst+0x18e>
                        dir_row = -1; /* we have to decrement from values_from */
 8000f90:	2301      	movs	r3, #1
 8000f92:	425b      	negs	r3, r3
 8000f94:	2298      	movs	r2, #152	@ 0x98
 8000f96:	0052      	lsls	r2, r2, #1
 8000f98:	18ba      	adds	r2, r7, r2
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	e004      	b.n	8000fa8 <TEST_Chanlst+0x198>
                    } else { /* if (values_from[0] < values_to[0]) */
                        dir_row = +1; /* default, we increment from values_from */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	2298      	movs	r2, #152	@ 0x98
 8000fa2:	0052      	lsls	r2, r2, #1
 8000fa4:	18ba      	adds	r2, r7, r2
 8000fa6:	6013      	str	r3, [r2, #0]
                    }

                    /* iterating over rows, do it once -> set for_stop_row = false
                     * needed if there is channel list index isn't at end yet */
                    for_stop_row = FALSE;
 8000fa8:	2338      	movs	r3, #56	@ 0x38
 8000faa:	33ff      	adds	r3, #255	@ 0xff
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
                    for (n = values_from[0]; for_stop_row == FALSE; n += dir_row) {
 8000fb2:	23ac      	movs	r3, #172	@ 0xac
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	229e      	movs	r2, #158	@ 0x9e
 8000fba:	0052      	lsls	r2, r2, #1
 8000fbc:	18ba      	adds	r2, r7, r2
 8000fbe:	6013      	str	r3, [r2, #0]
 8000fc0:	e0b4      	b.n	800112c <TEST_Chanlst+0x31c>
                        /* usual case for ranges, 2 dimensions */
                        if (dimensions == 2) {
 8000fc2:	23a0      	movs	r3, #160	@ 0xa0
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d16f      	bne.n	80010ac <TEST_Chanlst+0x29c>
                            if (values_from[1] > values_to[1]) {
 8000fcc:	23ac      	movs	r3, #172	@ 0xac
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	23a4      	movs	r3, #164	@ 0xa4
 8000fd4:	18fb      	adds	r3, r7, r3
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dd06      	ble.n	8000fea <TEST_Chanlst+0x1da>
                                dir_col = -1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	425b      	negs	r3, r3
 8000fe0:	2296      	movs	r2, #150	@ 0x96
 8000fe2:	0052      	lsls	r2, r2, #1
 8000fe4:	18ba      	adds	r2, r7, r2
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	e00c      	b.n	8001004 <TEST_Chanlst+0x1f4>
                            } else if (values_from[1] < values_to[1]) {
 8000fea:	23ac      	movs	r3, #172	@ 0xac
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	23a4      	movs	r3, #164	@ 0xa4
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	da04      	bge.n	8001004 <TEST_Chanlst+0x1f4>
                                dir_col = +1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	2296      	movs	r2, #150	@ 0x96
 8000ffe:	0052      	lsls	r2, r2, #1
 8001000:	18ba      	adds	r2, r7, r2
 8001002:	6013      	str	r3, [r2, #0]
                            }
                            /* iterating over columns, do it at least once -> set for_stop_col = false
                             * needed if there is channel list index isn't at end yet */
                            for_stop_col = FALSE;
 8001004:	239b      	movs	r3, #155	@ 0x9b
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
                            for (m = values_from[1]; for_stop_col == FALSE; m += dir_col) {
 800100e:	23ac      	movs	r3, #172	@ 0xac
 8001010:	18fb      	adds	r3, r7, r3
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	229c      	movs	r2, #156	@ 0x9c
 8001016:	0052      	lsls	r2, r2, #1
 8001018:	18ba      	adds	r2, r7, r2
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	e03c      	b.n	8001098 <TEST_Chanlst+0x288>
                                /* here we have our values
                                 * row == n
                                 * col == m
                                 * call a function or something */
                                array[arr_idx].row = n;
 800101e:	239e      	movs	r3, #158	@ 0x9e
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	18fb      	adds	r3, r7, r3
 8001024:	6819      	ldr	r1, [r3, #0]
 8001026:	24b8      	movs	r4, #184	@ 0xb8
 8001028:	193b      	adds	r3, r7, r4
 800102a:	20a0      	movs	r0, #160	@ 0xa0
 800102c:	0040      	lsls	r0, r0, #1
 800102e:	183a      	adds	r2, r7, r0
 8001030:	6812      	ldr	r2, [r2, #0]
 8001032:	00d2      	lsls	r2, r2, #3
 8001034:	50d1      	str	r1, [r2, r3]
                                array[arr_idx].col = m;
 8001036:	239c      	movs	r3, #156	@ 0x9c
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	18fb      	adds	r3, r7, r3
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	1939      	adds	r1, r7, r4
 8001040:	183b      	adds	r3, r7, r0
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	18cb      	adds	r3, r1, r3
 8001048:	3304      	adds	r3, #4
 800104a:	601a      	str	r2, [r3, #0]
                                arr_idx++;
 800104c:	183b      	adds	r3, r7, r0
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	183a      	adds	r2, r7, r0
 8001054:	6013      	str	r3, [r2, #0]
                                if (arr_idx >= MAXROW * MAXCOL) {
 8001056:	183b      	adds	r3, r7, r0
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b0b      	cmp	r3, #11
 800105c:	d902      	bls.n	8001064 <TEST_Chanlst+0x254>
                                    return SCPI_RES_ERR;
 800105e:	2301      	movs	r3, #1
 8001060:	425b      	negs	r3, r3
 8001062:	e0ec      	b.n	800123e <TEST_Chanlst+0x42e>
                                }
                                if (m == (size_t)values_to[1]) {
 8001064:	23a4      	movs	r3, #164	@ 0xa4
 8001066:	18fb      	adds	r3, r7, r3
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	001a      	movs	r2, r3
 800106c:	239c      	movs	r3, #156	@ 0x9c
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	18fb      	adds	r3, r7, r3
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4293      	cmp	r3, r2
 8001076:	d104      	bne.n	8001082 <TEST_Chanlst+0x272>
                                    /* endpoint reached, stop column for-loop */
                                    for_stop_col = TRUE;
 8001078:	239b      	movs	r3, #155	@ 0x9b
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
                            for (m = values_from[1]; for_stop_col == FALSE; m += dir_col) {
 8001082:	2396      	movs	r3, #150	@ 0x96
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	18fb      	adds	r3, r7, r3
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	219c      	movs	r1, #156	@ 0x9c
 800108c:	0049      	lsls	r1, r1, #1
 800108e:	187a      	adds	r2, r7, r1
 8001090:	6812      	ldr	r2, [r2, #0]
 8001092:	18d3      	adds	r3, r2, r3
 8001094:	187a      	adds	r2, r7, r1
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	239b      	movs	r3, #155	@ 0x9b
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2201      	movs	r2, #1
 80010a2:	4053      	eors	r3, r2
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1b9      	bne.n	800101e <TEST_Chanlst+0x20e>
 80010aa:	e025      	b.n	80010f8 <TEST_Chanlst+0x2e8>
                                }
                            }
                            /* special case for range, example: (@2!1) */
                        } else if (dimensions == 1) {
 80010ac:	23a0      	movs	r3, #160	@ 0xa0
 80010ae:	18fb      	adds	r3, r7, r3
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d120      	bne.n	80010f8 <TEST_Chanlst+0x2e8>
                            /* here we have values
                             * row == n
                             * col == 0 (fixed number)
                             * call function or sth. */
                            array[arr_idx].row = n;
 80010b6:	239e      	movs	r3, #158	@ 0x9e
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	18fb      	adds	r3, r7, r3
 80010bc:	6819      	ldr	r1, [r3, #0]
 80010be:	24b8      	movs	r4, #184	@ 0xb8
 80010c0:	193b      	adds	r3, r7, r4
 80010c2:	20a0      	movs	r0, #160	@ 0xa0
 80010c4:	0040      	lsls	r0, r0, #1
 80010c6:	183a      	adds	r2, r7, r0
 80010c8:	6812      	ldr	r2, [r2, #0]
 80010ca:	00d2      	lsls	r2, r2, #3
 80010cc:	50d1      	str	r1, [r2, r3]
                            array[arr_idx].col = 0;
 80010ce:	193a      	adds	r2, r7, r4
 80010d0:	0001      	movs	r1, r0
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	18d3      	adds	r3, r2, r3
 80010da:	3304      	adds	r3, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
                            arr_idx++;
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	187a      	adds	r2, r7, r1
 80010e8:	6013      	str	r3, [r2, #0]
                            if (arr_idx >= MAXROW * MAXCOL) {
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b0b      	cmp	r3, #11
 80010f0:	d902      	bls.n	80010f8 <TEST_Chanlst+0x2e8>
                                return SCPI_RES_ERR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	425b      	negs	r3, r3
 80010f6:	e0a2      	b.n	800123e <TEST_Chanlst+0x42e>
                            }
                        }
                        if (n == (size_t)values_to[0]) {
 80010f8:	23a4      	movs	r3, #164	@ 0xa4
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	001a      	movs	r2, r3
 8001100:	239e      	movs	r3, #158	@ 0x9e
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4293      	cmp	r3, r2
 800110a:	d104      	bne.n	8001116 <TEST_Chanlst+0x306>
                            /* endpoint reached, stop row for-loop */
                            for_stop_row = TRUE;
 800110c:	2338      	movs	r3, #56	@ 0x38
 800110e:	33ff      	adds	r3, #255	@ 0xff
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
                    for (n = values_from[0]; for_stop_row == FALSE; n += dir_row) {
 8001116:	2398      	movs	r3, #152	@ 0x98
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	18fb      	adds	r3, r7, r3
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	219e      	movs	r1, #158	@ 0x9e
 8001120:	0049      	lsls	r1, r1, #1
 8001122:	187a      	adds	r2, r7, r1
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	18d3      	adds	r3, r2, r3
 8001128:	187a      	adds	r2, r7, r1
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	2338      	movs	r3, #56	@ 0x38
 800112e:	33ff      	adds	r3, #255	@ 0xff
 8001130:	18fb      	adds	r3, r7, r3
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2201      	movs	r2, #1
 8001136:	4053      	eors	r3, r2
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b00      	cmp	r3, #0
 800113c:	d000      	beq.n	8001140 <TEST_Chanlst+0x330>
 800113e:	e740      	b.n	8000fc2 <TEST_Chanlst+0x1b2>
 8001140:	e002      	b.n	8001148 <TEST_Chanlst+0x338>
                        }
                    }


                } else {
                    return SCPI_RES_ERR;
 8001142:	2301      	movs	r3, #1
 8001144:	425b      	negs	r3, r3
 8001146:	e07a      	b.n	800123e <TEST_Chanlst+0x42e>
                }
                /* increase index */
                chanlst_idx++;
 8001148:	22a2      	movs	r2, #162	@ 0xa2
 800114a:	0052      	lsls	r2, r2, #1
 800114c:	18bb      	adds	r3, r7, r2
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	18b9      	adds	r1, r7, r2
 8001154:	600b      	str	r3, [r1, #0]
            } while (SCPI_EXPR_OK == SCPI_ExprChannelListEntry(context, &channel_list_param, chanlst_idx, &is_range, values_from, values_to, 4, &dimensions));
 8001156:	18bb      	adds	r3, r7, r2
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	23b7      	movs	r3, #183	@ 0xb7
 800115c:	18fc      	adds	r4, r7, r3
 800115e:	238c      	movs	r3, #140	@ 0x8c
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	18f9      	adds	r1, r7, r3
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	23a0      	movs	r3, #160	@ 0xa0
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	9303      	str	r3, [sp, #12]
 800116c:	2304      	movs	r3, #4
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	23a4      	movs	r3, #164	@ 0xa4
 8001172:	18fb      	adds	r3, r7, r3
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	23ac      	movs	r3, #172	@ 0xac
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	0023      	movs	r3, r4
 800117e:	f000 fc25 	bl	80019cc <SCPI_ExprChannelListEntry>
 8001182:	1e03      	subs	r3, r0, #0
 8001184:	d100      	bne.n	8001188 <TEST_Chanlst+0x378>
 8001186:	e68c      	b.n	8000ea2 <TEST_Chanlst+0x92>
        /* array[arr_idx].col = 0; */
    }

    {
        size_t i;
        char _err[150] = {0};
 8001188:	4b2f      	ldr	r3, [pc, #188]	@ (8001248 <TEST_Chanlst+0x438>)
 800118a:	22a4      	movs	r2, #164	@ 0xa4
 800118c:	0052      	lsls	r2, r2, #1
 800118e:	189b      	adds	r3, r3, r2
 8001190:	19db      	adds	r3, r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	3304      	adds	r3, #4
 8001198:	2292      	movs	r2, #146	@ 0x92
 800119a:	2100      	movs	r1, #0
 800119c:	0018      	movs	r0, r3
 800119e:	f00c fb1c 	bl	800d7da <memset>
        sprintf(_err, "TEST_Chanlst: ");
 80011a2:	4a2a      	ldr	r2, [pc, #168]	@ (800124c <TEST_Chanlst+0x43c>)
 80011a4:	2408      	movs	r4, #8
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	0011      	movs	r1, r2
 80011aa:	0018      	movs	r0, r3
 80011ac:	f00c fae2 	bl	800d774 <siprintf>
        CDC_Transmit_FS(_err, 150);
 80011b0:	193b      	adds	r3, r7, r4
 80011b2:	2196      	movs	r1, #150	@ 0x96
 80011b4:	0018      	movs	r0, r3
 80011b6:	f00b fcd1 	bl	800cb5c <CDC_Transmit_FS>
        HAL_Delay(1);
 80011ba:	2001      	movs	r0, #1
 80011bc:	f004 fa04 	bl	80055c8 <HAL_Delay>
        for (i = 0; i< arr_idx; i++) {
 80011c0:	2300      	movs	r3, #0
 80011c2:	2294      	movs	r2, #148	@ 0x94
 80011c4:	0052      	lsls	r2, r2, #1
 80011c6:	18ba      	adds	r2, r7, r2
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e021      	b.n	8001210 <TEST_Chanlst+0x400>
            sprintf(_err, "%d!%d, ", array[i].row, array[i].col);
 80011cc:	21b8      	movs	r1, #184	@ 0xb8
 80011ce:	187b      	adds	r3, r7, r1
 80011d0:	2594      	movs	r5, #148	@ 0x94
 80011d2:	006d      	lsls	r5, r5, #1
 80011d4:	197a      	adds	r2, r7, r5
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	00d2      	lsls	r2, r2, #3
 80011da:	58d4      	ldr	r4, [r2, r3]
 80011dc:	187a      	adds	r2, r7, r1
 80011de:	197b      	adds	r3, r7, r5
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	18d3      	adds	r3, r2, r3
 80011e6:	3304      	adds	r3, #4
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4919      	ldr	r1, [pc, #100]	@ (8001250 <TEST_Chanlst+0x440>)
 80011ec:	2608      	movs	r6, #8
 80011ee:	19b8      	adds	r0, r7, r6
 80011f0:	0022      	movs	r2, r4
 80011f2:	f00c fabf 	bl	800d774 <siprintf>
            CDC_Transmit_FS(_err, 150);
 80011f6:	19bb      	adds	r3, r7, r6
 80011f8:	2196      	movs	r1, #150	@ 0x96
 80011fa:	0018      	movs	r0, r3
 80011fc:	f00b fcae 	bl	800cb5c <CDC_Transmit_FS>
            HAL_Delay(1);
 8001200:	2001      	movs	r0, #1
 8001202:	f004 f9e1 	bl	80055c8 <HAL_Delay>
        for (i = 0; i< arr_idx; i++) {
 8001206:	197b      	adds	r3, r7, r5
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	197a      	adds	r2, r7, r5
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	2394      	movs	r3, #148	@ 0x94
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	23a0      	movs	r3, #160	@ 0xa0
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d3d3      	bcc.n	80011cc <TEST_Chanlst+0x3bc>
        }
        sprintf(_err, "\r\n");
 8001224:	4a0b      	ldr	r2, [pc, #44]	@ (8001254 <TEST_Chanlst+0x444>)
 8001226:	2408      	movs	r4, #8
 8001228:	193b      	adds	r3, r7, r4
 800122a:	0011      	movs	r1, r2
 800122c:	0018      	movs	r0, r3
 800122e:	f00c faa1 	bl	800d774 <siprintf>
        CDC_Transmit_FS(_err, 150);
 8001232:	193b      	adds	r3, r7, r4
 8001234:	2196      	movs	r1, #150	@ 0x96
 8001236:	0018      	movs	r0, r3
 8001238:	f00b fc90 	bl	800cb5c <CDC_Transmit_FS>
    }
    return SCPI_RES_OK;
 800123c:	2301      	movs	r3, #1
}
 800123e:	0018      	movs	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	b053      	add	sp, #332	@ 0x14c
 8001244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	fffffec0 	.word	0xfffffec0
 800124c:	0800e234 	.word	0x0800e234
 8001250:	0800e244 	.word	0x0800e244
 8001254:	0800e24c 	.word	0x0800e24c

08001258 <My_CoreTstQ>:
 * Result should be 0 if everything is ok
 * Result should be 1 if something goes wrong
 *
 * Return SCPI_RES_OK
 */
static scpi_result_t My_CoreTstQ(scpi_t * context) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

    SCPI_ResultInt32(context, 0);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2100      	movs	r1, #0
 8001264:	0018      	movs	r0, r3
 8001266:	f002 fd37 	bl	8003cd8 <SCPI_ResultInt32>

    return SCPI_RES_OK;
 800126a:	2301      	movs	r3, #1
}
 800126c:	0018      	movs	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	b002      	add	sp, #8
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <HAL_MspInit+0x24>)
 800127a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_MspInit+0x24>)
 800127e:	2101      	movs	r1, #1
 8001280:	430a      	orrs	r2, r1
 8001282:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001284:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <HAL_MspInit+0x24>)
 8001286:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <HAL_MspInit+0x24>)
 800128a:	2180      	movs	r1, #128	@ 0x80
 800128c:	0549      	lsls	r1, r1, #21
 800128e:	430a      	orrs	r2, r1
 8001290:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40021000 	.word	0x40021000

0800129c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b089      	sub	sp, #36	@ 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	240c      	movs	r4, #12
 80012a6:	193b      	adds	r3, r7, r4
 80012a8:	0018      	movs	r0, r3
 80012aa:	2314      	movs	r3, #20
 80012ac:	001a      	movs	r2, r3
 80012ae:	2100      	movs	r1, #0
 80012b0:	f00c fa93 	bl	800d7da <memset>
  if(hspi->Instance==SPI1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a18      	ldr	r2, [pc, #96]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d129      	bne.n	8001312 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012be:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <HAL_SPI_MspInit+0x84>)
 80012c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012c2:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <HAL_SPI_MspInit+0x84>)
 80012c4:	2180      	movs	r1, #128	@ 0x80
 80012c6:	0149      	lsls	r1, r1, #5
 80012c8:	430a      	orrs	r2, r1
 80012ca:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <HAL_SPI_MspInit+0x84>)
 80012ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012d0:	4b13      	ldr	r3, [pc, #76]	@ (8001320 <HAL_SPI_MspInit+0x84>)
 80012d2:	2101      	movs	r1, #1
 80012d4:	430a      	orrs	r2, r1
 80012d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <HAL_SPI_MspInit+0x84>)
 80012da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012dc:	2201      	movs	r2, #1
 80012de:	4013      	ands	r3, r2
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012e4:	0021      	movs	r1, r4
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	22e0      	movs	r2, #224	@ 0xe0
 80012ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	2202      	movs	r2, #2
 80012f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	2203      	movs	r2, #3
 80012fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80012fe:	187b      	adds	r3, r7, r1
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	187a      	adds	r2, r7, r1
 8001306:	23a0      	movs	r3, #160	@ 0xa0
 8001308:	05db      	lsls	r3, r3, #23
 800130a:	0011      	movs	r1, r2
 800130c:	0018      	movs	r0, r3
 800130e:	f004 fa5d 	bl	80057cc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001312:	46c0      	nop			@ (mov r8, r8)
 8001314:	46bd      	mov	sp, r7
 8001316:	b009      	add	sp, #36	@ 0x24
 8001318:	bd90      	pop	{r4, r7, pc}
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	40013000 	.word	0x40013000
 8001320:	40021000 	.word	0x40021000

08001324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2380      	movs	r3, #128	@ 0x80
 8001332:	05db      	lsls	r3, r3, #23
 8001334:	429a      	cmp	r2, r3
 8001336:	d10d      	bne.n	8001354 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001338:	4b08      	ldr	r3, [pc, #32]	@ (800135c <HAL_TIM_Base_MspInit+0x38>)
 800133a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800133c:	4b07      	ldr	r3, [pc, #28]	@ (800135c <HAL_TIM_Base_MspInit+0x38>)
 800133e:	2101      	movs	r1, #1
 8001340:	430a      	orrs	r2, r1
 8001342:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	200f      	movs	r0, #15
 800134a:	f004 fa0d 	bl	8005768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800134e:	200f      	movs	r0, #15
 8001350:	f004 fa1f 	bl	8005792 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001354:	46c0      	nop			@ (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	b002      	add	sp, #8
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40021000 	.word	0x40021000

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001364:	46c0      	nop			@ (mov r8, r8)
 8001366:	e7fd      	b.n	8001364 <NMI_Handler+0x4>

08001368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136c:	46c0      	nop			@ (mov r8, r8)
 800136e:	e7fd      	b.n	800136c <HardFault_Handler+0x4>

08001370 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001374:	46c0      	nop			@ (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001388:	f004 f902 	bl	8005590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138c:	46c0      	nop			@ (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001398:	4b03      	ldr	r3, [pc, #12]	@ (80013a8 <TIM2_IRQHandler+0x14>)
 800139a:	0018      	movs	r0, r3
 800139c:	f007 f9f6 	bl	800878c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013a0:	46c0      	nop			@ (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	20000284 	.word	0x20000284

080013ac <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80013b0:	4b03      	ldr	r3, [pc, #12]	@ (80013c0 <USB_IRQHandler+0x14>)
 80013b2:	0018      	movs	r0, r3
 80013b4:	f004 fccc 	bl	8005d50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80013b8:	46c0      	nop			@ (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	2000115c 	.word	0x2000115c

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	@ (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	18d3      	adds	r3, r2, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f00c fa2a 	bl	800d84c <__errno>
 80013f8:	0003      	movs	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	2301      	movs	r3, #1
 8001400:	425b      	negs	r3, r3
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	18d2      	adds	r2, r2, r3
 8001412:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <_sbrk+0x64>)
 8001414:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b006      	add	sp, #24
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20005000 	.word	0x20005000
 8001424:	00000400 	.word	0x00000400
 8001428:	20000488 	.word	0x20000488
 800142c:	200017b8 	.word	0x200017b8

08001430 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001434:	46c0      	nop			@ (mov r8, r8)
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800143c:	480d      	ldr	r0, [pc, #52]	@ (8001474 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800143e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001440:	f7ff fff6 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001444:	480c      	ldr	r0, [pc, #48]	@ (8001478 <LoopForever+0x6>)
  ldr r1, =_edata
 8001446:	490d      	ldr	r1, [pc, #52]	@ (800147c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001448:	4a0d      	ldr	r2, [pc, #52]	@ (8001480 <LoopForever+0xe>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800145c:	4c0a      	ldr	r4, [pc, #40]	@ (8001488 <LoopForever+0x16>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146a:	f00c f9f5 	bl	800d858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146e:	f7ff f95d 	bl	800072c <main>

08001472 <LoopForever>:

LoopForever:
    b LoopForever
 8001472:	e7fe      	b.n	8001472 <LoopForever>
   ldr   r0, =_estack
 8001474:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001480:	0800ee5c 	.word	0x0800ee5c
  ldr r2, =_sbss
 8001484:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001488:	200017b8 	.word	0x200017b8

0800148c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC1_COMP_IRQHandler>

0800148e <SCPI_ErrorInit>:

/**
 * Initialize error queue
 * @param context - scpi context
 */
void SCPI_ErrorInit(scpi_t * context, scpi_error_t * data, int16_t size) {
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	1dbb      	adds	r3, r7, #6
 800149a:	801a      	strh	r2, [r3, #0]
    fifo_init(&context->error_queue, data, size);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	333c      	adds	r3, #60	@ 0x3c
 80014a0:	0018      	movs	r0, r3
 80014a2:	1dbb      	adds	r3, r7, #6
 80014a4:	2200      	movs	r2, #0
 80014a6:	5e9a      	ldrsh	r2, [r3, r2]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	0019      	movs	r1, r3
 80014ac:	f000 fb52 	bl	8001b54 <fifo_init>
}
 80014b0:	46c0      	nop			@ (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b004      	add	sp, #16
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <SCPI_ErrorEmitEmpty>:

/**
 * Emit no error
 * @param context scpi context
 */
static void SCPI_ErrorEmitEmpty(scpi_t * context) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
    if ((SCPI_ErrorCount(context) == 0) && (SCPI_RegGet(context, SCPI_REG_STB) & STB_QMA)) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	0018      	movs	r0, r3
 80014c4:	f000 f87a 	bl	80015bc <SCPI_ErrorCount>
 80014c8:	1e03      	subs	r3, r0, #0
 80014ca:	d11f      	bne.n	800150c <SCPI_ErrorEmitEmpty+0x54>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2100      	movs	r1, #0
 80014d0:	0018      	movs	r0, r3
 80014d2:	f000 fcc2 	bl	8001e5a <SCPI_RegGet>
 80014d6:	0003      	movs	r3, r0
 80014d8:	001a      	movs	r2, r3
 80014da:	2304      	movs	r3, #4
 80014dc:	4013      	ands	r3, r2
 80014de:	d015      	beq.n	800150c <SCPI_ErrorEmitEmpty+0x54>
        SCPI_RegClearBits(context, SCPI_REG_STB, STB_QMA);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2204      	movs	r2, #4
 80014e4:	2100      	movs	r1, #0
 80014e6:	0018      	movs	r0, r3
 80014e8:	f000 fde9 	bl	80020be <SCPI_RegClearBits>

        if (context->interface && context->interface->error) {
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00b      	beq.n	800150c <SCPI_ErrorEmitEmpty+0x54>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d006      	beq.n	800150c <SCPI_ErrorEmitEmpty+0x54>
            context->interface->error(context, 0);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	2100      	movs	r1, #0
 8001508:	0010      	movs	r0, r2
 800150a:	4798      	blx	r3
        }
    }
}
 800150c:	46c0      	nop			@ (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	b002      	add	sp, #8
 8001512:	bd80      	pop	{r7, pc}

08001514 <SCPI_ErrorEmit>:
/**
 * Emit error
 * @param context scpi context
 * @param err Error to emit
 */
static void SCPI_ErrorEmit(scpi_t * context, int16_t err) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	000a      	movs	r2, r1
 800151e:	1cbb      	adds	r3, r7, #2
 8001520:	801a      	strh	r2, [r3, #0]
    SCPI_RegSetBits(context, SCPI_REG_STB, STB_QMA);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2204      	movs	r2, #4
 8001526:	2100      	movs	r1, #0
 8001528:	0018      	movs	r0, r3
 800152a:	f000 fda5 	bl	8002078 <SCPI_RegSetBits>

    if (context->interface && context->interface->error) {
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00d      	beq.n	8001552 <SCPI_ErrorEmit+0x3e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d008      	beq.n	8001552 <SCPI_ErrorEmit+0x3e>
        context->interface->error(context, err);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	1cba      	adds	r2, r7, #2
 8001548:	2100      	movs	r1, #0
 800154a:	5e51      	ldrsh	r1, [r2, r1]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	0010      	movs	r0, r2
 8001550:	4798      	blx	r3
    }
}
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b002      	add	sp, #8
 8001558:	bd80      	pop	{r7, pc}

0800155a <SCPI_ErrorClear>:

/**
 * Clear error queue
 * @param context - scpi context
 */
void SCPI_ErrorClear(scpi_t * context) {
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
    scpi_error_t error;
    while (fifo_remove(&context->error_queue, &error)) {
        SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
    }
#endif
    fifo_clear(&context->error_queue);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	333c      	adds	r3, #60	@ 0x3c
 8001566:	0018      	movs	r0, r3
 8001568:	f000 fb0f 	bl	8001b8a <fifo_clear>

    SCPI_ErrorEmitEmpty(context);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	0018      	movs	r0, r3
 8001570:	f7ff ffa2 	bl	80014b8 <SCPI_ErrorEmitEmpty>
}
 8001574:	46c0      	nop			@ (mov r8, r8)
 8001576:	46bd      	mov	sp, r7
 8001578:	b002      	add	sp, #8
 800157a:	bd80      	pop	{r7, pc}

0800157c <SCPI_ErrorPop>:
 * Pop error from queue
 * @param context - scpi context
 * @param error
 * @return
 */
scpi_bool_t SCPI_ErrorPop(scpi_t * context, scpi_error_t * error) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
    if (!error || !context) return FALSE;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <SCPI_ErrorPop+0x16>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <SCPI_ErrorPop+0x1a>
 8001592:	2300      	movs	r3, #0
 8001594:	e00e      	b.n	80015b4 <SCPI_ErrorPop+0x38>
    SCPI_ERROR_SETVAL(error, 0, NULL);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2200      	movs	r2, #0
 800159a:	801a      	strh	r2, [r3, #0]
    fifo_remove(&context->error_queue, error);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	333c      	adds	r3, #60	@ 0x3c
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	0011      	movs	r1, r2
 80015a4:	0018      	movs	r0, r3
 80015a6:	f000 fb5a 	bl	8001c5e <fifo_remove>

    SCPI_ErrorEmitEmpty(context);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff ff83 	bl	80014b8 <SCPI_ErrorEmitEmpty>

    return TRUE;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b002      	add	sp, #8
 80015ba:	bd80      	pop	{r7, pc}

080015bc <SCPI_ErrorCount>:
/**
 * Return number of errors/events in the queue
 * @param context
 * @return
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
    int16_t result = 0;
 80015c4:	210e      	movs	r1, #14
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	2200      	movs	r2, #0
 80015ca:	801a      	strh	r2, [r3, #0]

    fifo_count(&context->error_queue, &result);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	333c      	adds	r3, #60	@ 0x3c
 80015d0:	000c      	movs	r4, r1
 80015d2:	187a      	adds	r2, r7, r1
 80015d4:	0011      	movs	r1, r2
 80015d6:	0018      	movs	r0, r3
 80015d8:	f000 fbb4 	bl	8001d44 <fifo_count>

    return result;
 80015dc:	193b      	adds	r3, r7, r4
 80015de:	2200      	movs	r2, #0
 80015e0:	5e9b      	ldrsh	r3, [r3, r2]
}
 80015e2:	0018      	movs	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b005      	add	sp, #20
 80015e8:	bd90      	pop	{r4, r7, pc}
	...

080015ec <SCPI_ErrorAddInternal>:

static scpi_bool_t SCPI_ErrorAddInternal(scpi_t * context, int16_t err, char * info, size_t info_len) {
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	607a      	str	r2, [r7, #4]
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	200a      	movs	r0, #10
 80015fa:	183b      	adds	r3, r7, r0
 80015fc:	1c0a      	adds	r2, r1, #0
 80015fe:	801a      	strh	r2, [r3, #0]
    scpi_error_t error_value;
    /* SCPIDEFINE_strndup is sometimes a dumy that does not reference it's arguments. 
       Since info_len is not referenced elsewhere caoing to void prevents unusd argument warnings */
    (void) info_len;
    char * info_ptr = info ? SCPIDEFINE_strndup(&context->error_info_heap, info, info_len) : NULL;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
    SCPI_ERROR_SETVAL(&error_value, err, info_ptr);
 8001604:	2410      	movs	r4, #16
 8001606:	193b      	adds	r3, r7, r4
 8001608:	183a      	adds	r2, r7, r0
 800160a:	8812      	ldrh	r2, [r2, #0]
 800160c:	801a      	strh	r2, [r3, #0]
    if (!fifo_add(&context->error_queue, &error_value)) {
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	333c      	adds	r3, #60	@ 0x3c
 8001612:	193a      	adds	r2, r7, r4
 8001614:	0011      	movs	r1, r2
 8001616:	0018      	movs	r0, r3
 8001618:	f000 fae8 	bl	8001bec <fifo_add>
 800161c:	0003      	movs	r3, r0
 800161e:	001a      	movs	r2, r3
 8001620:	2301      	movs	r3, #1
 8001622:	4053      	eors	r3, r2
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d012      	beq.n	8001650 <SCPI_ErrorAddInternal+0x64>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        fifo_remove_last(&context->error_queue, &error_value);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	333c      	adds	r3, #60	@ 0x3c
 800162e:	193a      	adds	r2, r7, r4
 8001630:	0011      	movs	r1, r2
 8001632:	0018      	movs	r0, r3
 8001634:	f000 fb4a 	bl	8001ccc <fifo_remove_last>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        SCPI_ERROR_SETVAL(&error_value, SCPI_ERROR_QUEUE_OVERFLOW, NULL);
 8001638:	193b      	adds	r3, r7, r4
 800163a:	4a08      	ldr	r2, [pc, #32]	@ (800165c <SCPI_ErrorAddInternal+0x70>)
 800163c:	801a      	strh	r2, [r3, #0]
        fifo_add(&context->error_queue, &error_value);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	333c      	adds	r3, #60	@ 0x3c
 8001642:	193a      	adds	r2, r7, r4
 8001644:	0011      	movs	r1, r2
 8001646:	0018      	movs	r0, r3
 8001648:	f000 fad0 	bl	8001bec <fifo_add>
        return FALSE;
 800164c:	2300      	movs	r3, #0
 800164e:	e000      	b.n	8001652 <SCPI_ErrorAddInternal+0x66>
    }
    return TRUE;
 8001650:	2301      	movs	r3, #1
}
 8001652:	0018      	movs	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	b007      	add	sp, #28
 8001658:	bd90      	pop	{r4, r7, pc}
 800165a:	46c0      	nop			@ (mov r8, r8)
 800165c:	fffffea2 	.word	0xfffffea2

08001660 <SCPI_ErrorPushEx>:
 * @param context
 * @param err - error number
 * @param info - additional text information or NULL for no text
 * @param info_len - length of text or 0 for automatic length
 */
void SCPI_ErrorPushEx(scpi_t * context, int16_t err, char * info, size_t info_len) {
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	230a      	movs	r3, #10
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	1c0a      	adds	r2, r1, #0
 8001672:	801a      	strh	r2, [r3, #0]
    int i;
    /* automatic calculation of length */
    if (info && info_len == 0) {
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <SCPI_ErrorPushEx+0x2e>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d106      	bne.n	800168e <SCPI_ErrorPushEx+0x2e>
        info_len = SCPIDEFINE_strnlen(info, SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	21ff      	movs	r1, #255	@ 0xff
 8001684:	0018      	movs	r0, r3
 8001686:	f00c f8d5 	bl	800d834 <strnlen>
 800168a:	0003      	movs	r3, r0
 800168c:	603b      	str	r3, [r7, #0]
    }
    scpi_bool_t queue_overflow = !SCPI_ErrorAddInternal(context, err, info, info_len);
 800168e:	683c      	ldr	r4, [r7, #0]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	230a      	movs	r3, #10
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	2100      	movs	r1, #0
 8001698:	5e59      	ldrsh	r1, [r3, r1]
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	0023      	movs	r3, r4
 800169e:	f7ff ffa5 	bl	80015ec <SCPI_ErrorAddInternal>
 80016a2:	0003      	movs	r3, r0
 80016a4:	1e5a      	subs	r2, r3, #1
 80016a6:	4193      	sbcs	r3, r2
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2201      	movs	r2, #1
 80016ac:	4053      	eors	r3, r2
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	001a      	movs	r2, r3
 80016b2:	2313      	movs	r3, #19
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	781a      	ldrb	r2, [r3, #0]
 80016ba:	2101      	movs	r1, #1
 80016bc:	400a      	ands	r2, r1
 80016be:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < ERROR_DEFS_N; i++) {
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	e02c      	b.n	8001720 <SCPI_ErrorPushEx+0xc0>
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
 80016c6:	4927      	ldr	r1, [pc, #156]	@ (8001764 <SCPI_ErrorPushEx+0x104>)
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	0013      	movs	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	189b      	adds	r3, r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	5e5b      	ldrsh	r3, [r3, r1]
 80016d4:	200a      	movs	r0, #10
 80016d6:	183a      	adds	r2, r7, r0
 80016d8:	2100      	movs	r1, #0
 80016da:	5e52      	ldrsh	r2, [r2, r1]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dc1c      	bgt.n	800171a <SCPI_ErrorPushEx+0xba>
 80016e0:	4920      	ldr	r1, [pc, #128]	@ (8001764 <SCPI_ErrorPushEx+0x104>)
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	0013      	movs	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	189b      	adds	r3, r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	18cb      	adds	r3, r1, r3
 80016ee:	3302      	adds	r3, #2
 80016f0:	2200      	movs	r2, #0
 80016f2:	5e9b      	ldrsh	r3, [r3, r2]
 80016f4:	183a      	adds	r2, r7, r0
 80016f6:	2100      	movs	r1, #0
 80016f8:	5e52      	ldrsh	r2, [r2, r1]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	db0d      	blt.n	800171a <SCPI_ErrorPushEx+0xba>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].esrBit);
 80016fe:	4919      	ldr	r1, [pc, #100]	@ (8001764 <SCPI_ErrorPushEx+0x104>)
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	0013      	movs	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	189b      	adds	r3, r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	18cb      	adds	r3, r1, r3
 800170c:	3304      	adds	r3, #4
 800170e:	881a      	ldrh	r2, [r3, #0]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2102      	movs	r1, #2
 8001714:	0018      	movs	r0, r3
 8001716:	f000 fcaf 	bl	8002078 <SCPI_RegSetBits>
    for (i = 0; i < ERROR_DEFS_N; i++) {
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3301      	adds	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2b08      	cmp	r3, #8
 8001724:	ddcf      	ble.n	80016c6 <SCPI_ErrorPushEx+0x66>
        }
    }

    SCPI_ErrorEmit(context, err);
 8001726:	230a      	movs	r3, #10
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	2200      	movs	r2, #0
 800172c:	5e9a      	ldrsh	r2, [r3, r2]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	0011      	movs	r1, r2
 8001732:	0018      	movs	r0, r3
 8001734:	f7ff feee 	bl	8001514 <SCPI_ErrorEmit>
    if (queue_overflow) {
 8001738:	2313      	movs	r3, #19
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d005      	beq.n	800174e <SCPI_ErrorPushEx+0xee>
        SCPI_ErrorEmit(context, SCPI_ERROR_QUEUE_OVERFLOW);
 8001742:	4a09      	ldr	r2, [pc, #36]	@ (8001768 <SCPI_ErrorPushEx+0x108>)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	0011      	movs	r1, r2
 8001748:	0018      	movs	r0, r3
 800174a:	f7ff fee3 	bl	8001514 <SCPI_ErrorEmit>
    }

    if (context) {
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <SCPI_ErrorPushEx+0xfc>
        context->cmd_error = TRUE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2238      	movs	r2, #56	@ 0x38
 8001758:	2101      	movs	r1, #1
 800175a:	5499      	strb	r1, [r3, r2]
    }
}
 800175c:	46c0      	nop			@ (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	b007      	add	sp, #28
 8001762:	bd90      	pop	{r4, r7, pc}
 8001764:	0800e8e4 	.word	0x0800e8e4
 8001768:	fffffea2 	.word	0xfffffea2

0800176c <SCPI_ErrorPush>:
/**
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	000a      	movs	r2, r1
 8001776:	1cbb      	adds	r3, r7, #2
 8001778:	801a      	strh	r2, [r3, #0]
    SCPI_ErrorPushEx(context, err, NULL, 0);
 800177a:	1cbb      	adds	r3, r7, #2
 800177c:	2100      	movs	r1, #0
 800177e:	5e59      	ldrsh	r1, [r3, r1]
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	2300      	movs	r3, #0
 8001784:	2200      	movs	r2, #0
 8001786:	f7ff ff6b 	bl	8001660 <SCPI_ErrorPushEx>
    return;
 800178a:	46c0      	nop			@ (mov r8, r8)
}
 800178c:	46bd      	mov	sp, r7
 800178e:	b002      	add	sp, #8
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <SCPI_ErrorTranslate>:
/**
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	0002      	movs	r2, r0
 800179c:	1dbb      	adds	r3, r7, #6
 800179e:	801a      	strh	r2, [r3, #0]
    switch (err) {
 80017a0:	1dbb      	adds	r3, r7, #6
 80017a2:	2200      	movs	r2, #0
 80017a4:	5e9b      	ldrsh	r3, [r3, r2]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d027      	beq.n	80017fa <SCPI_ErrorTranslate+0x66>
 80017aa:	dc46      	bgt.n	800183a <SCPI_ErrorTranslate+0xa6>
 80017ac:	001a      	movs	r2, r3
 80017ae:	3265      	adds	r2, #101	@ 0x65
 80017b0:	dc43      	bgt.n	800183a <SCPI_ErrorTranslate+0xa6>
 80017b2:	001a      	movs	r2, r3
 80017b4:	32aa      	adds	r2, #170	@ 0xaa
 80017b6:	da18      	bge.n	80017ea <SCPI_ErrorTranslate+0x56>
 80017b8:	001a      	movs	r2, r3
 80017ba:	32c8      	adds	r2, #200	@ 0xc8
 80017bc:	d033      	beq.n	8001826 <SCPI_ErrorTranslate+0x92>
 80017be:	001a      	movs	r2, r3
 80017c0:	32c8      	adds	r2, #200	@ 0xc8
 80017c2:	dc3a      	bgt.n	800183a <SCPI_ErrorTranslate+0xa6>
 80017c4:	001a      	movs	r2, r3
 80017c6:	32e0      	adds	r2, #224	@ 0xe0
 80017c8:	d02f      	beq.n	800182a <SCPI_ErrorTranslate+0x96>
 80017ca:	001a      	movs	r2, r3
 80017cc:	32e0      	adds	r2, #224	@ 0xe0
 80017ce:	dc34      	bgt.n	800183a <SCPI_ErrorTranslate+0xa6>
 80017d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001844 <SCPI_ErrorTranslate+0xb0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d02b      	beq.n	800182e <SCPI_ErrorTranslate+0x9a>
 80017d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001844 <SCPI_ErrorTranslate+0xb0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	dc2e      	bgt.n	800183a <SCPI_ErrorTranslate+0xa6>
 80017dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001848 <SCPI_ErrorTranslate+0xb4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d029      	beq.n	8001836 <SCPI_ErrorTranslate+0xa2>
 80017e2:	4a1a      	ldr	r2, [pc, #104]	@ (800184c <SCPI_ErrorTranslate+0xb8>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d024      	beq.n	8001832 <SCPI_ErrorTranslate+0x9e>
 80017e8:	e027      	b.n	800183a <SCPI_ErrorTranslate+0xa6>
 80017ea:	33aa      	adds	r3, #170	@ 0xaa
 80017ec:	2b45      	cmp	r3, #69	@ 0x45
 80017ee:	d824      	bhi.n	800183a <SCPI_ErrorTranslate+0xa6>
 80017f0:	009a      	lsls	r2, r3, #2
 80017f2:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <SCPI_ErrorTranslate+0xbc>)
 80017f4:	18d3      	adds	r3, r2, r3
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	469f      	mov	pc, r3
#if USE_FULL_ERROR_LIST
#define XE X
#else
#define XE(def, val, str)
#endif
        LIST_OF_ERRORS
 80017fa:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <SCPI_ErrorTranslate+0xc0>)
 80017fc:	e01e      	b.n	800183c <SCPI_ErrorTranslate+0xa8>
 80017fe:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <SCPI_ErrorTranslate+0xc4>)
 8001800:	e01c      	b.n	800183c <SCPI_ErrorTranslate+0xa8>
 8001802:	4b16      	ldr	r3, [pc, #88]	@ (800185c <SCPI_ErrorTranslate+0xc8>)
 8001804:	e01a      	b.n	800183c <SCPI_ErrorTranslate+0xa8>
 8001806:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <SCPI_ErrorTranslate+0xcc>)
 8001808:	e018      	b.n	800183c <SCPI_ErrorTranslate+0xa8>
 800180a:	4b16      	ldr	r3, [pc, #88]	@ (8001864 <SCPI_ErrorTranslate+0xd0>)
 800180c:	e016      	b.n	800183c <SCPI_ErrorTranslate+0xa8>
 800180e:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <SCPI_ErrorTranslate+0xd4>)
 8001810:	e014      	b.n	800183c <SCPI_ErrorTranslate+0xa8>
 8001812:	4b16      	ldr	r3, [pc, #88]	@ (800186c <SCPI_ErrorTranslate+0xd8>)
 8001814:	e012      	b.n	800183c <SCPI_ErrorTranslate+0xa8>
 8001816:	4b16      	ldr	r3, [pc, #88]	@ (8001870 <SCPI_ErrorTranslate+0xdc>)
 8001818:	e010      	b.n	800183c <SCPI_ErrorTranslate+0xa8>
 800181a:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <SCPI_ErrorTranslate+0xe0>)
 800181c:	e00e      	b.n	800183c <SCPI_ErrorTranslate+0xa8>
 800181e:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <SCPI_ErrorTranslate+0xe4>)
 8001820:	e00c      	b.n	800183c <SCPI_ErrorTranslate+0xa8>
 8001822:	4b16      	ldr	r3, [pc, #88]	@ (800187c <SCPI_ErrorTranslate+0xe8>)
 8001824:	e00a      	b.n	800183c <SCPI_ErrorTranslate+0xa8>
 8001826:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <SCPI_ErrorTranslate+0xec>)
 8001828:	e008      	b.n	800183c <SCPI_ErrorTranslate+0xa8>
 800182a:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <SCPI_ErrorTranslate+0xf0>)
 800182c:	e006      	b.n	800183c <SCPI_ErrorTranslate+0xa8>
 800182e:	4b16      	ldr	r3, [pc, #88]	@ (8001888 <SCPI_ErrorTranslate+0xf4>)
 8001830:	e004      	b.n	800183c <SCPI_ErrorTranslate+0xa8>
 8001832:	4b16      	ldr	r3, [pc, #88]	@ (800188c <SCPI_ErrorTranslate+0xf8>)
 8001834:	e002      	b.n	800183c <SCPI_ErrorTranslate+0xa8>
 8001836:	4b16      	ldr	r3, [pc, #88]	@ (8001890 <SCPI_ErrorTranslate+0xfc>)
 8001838:	e000      	b.n	800183c <SCPI_ErrorTranslate+0xa8>
#if USE_USER_ERROR_LIST
        LIST_OF_USER_ERRORS
#endif
#undef X
#undef XE
        default: return "Unknown error";
 800183a:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <SCPI_ErrorTranslate+0x100>)
    }
}
 800183c:	0018      	movs	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	b002      	add	sp, #8
 8001842:	bd80      	pop	{r7, pc}
 8001844:	fffffeca 	.word	0xfffffeca
 8001848:	fffffe95 	.word	0xfffffe95
 800184c:	fffffea2 	.word	0xfffffea2
 8001850:	0800e91c 	.word	0x0800e91c
 8001854:	0800e464 	.word	0x0800e464
 8001858:	0800e470 	.word	0x0800e470
 800185c:	0800e484 	.word	0x0800e484
 8001860:	0800e498 	.word	0x0800e498
 8001864:	0800e4a8 	.word	0x0800e4a8
 8001868:	0800e4c0 	.word	0x0800e4c0
 800186c:	0800e4d4 	.word	0x0800e4d4
 8001870:	0800e4e8 	.word	0x0800e4e8
 8001874:	0800e4f8 	.word	0x0800e4f8
 8001878:	0800e50c 	.word	0x0800e50c
 800187c:	0800e520 	.word	0x0800e520
 8001880:	0800e534 	.word	0x0800e534
 8001884:	0800e544 	.word	0x0800e544
 8001888:	0800e55c 	.word	0x0800e55c
 800188c:	0800e56c 	.word	0x0800e56c
 8001890:	0800e57c 	.word	0x0800e57c
 8001894:	0800e594 	.word	0x0800e594

08001898 <channelSpec>:
 * @param state lexer state
 * @param values range values
 * @param length length of values array
 * @param dimensions real number of dimensions
 */
static scpi_expr_result_t channelSpec(scpi_t * context, lex_state_t * state, int32_t * values, size_t length, size_t * dimensions) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	603b      	str	r3, [r7, #0]
    scpi_parameter_t param;
    size_t i = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
    while (scpiLex_DecimalNumericProgramData(state, &param)) {
 80018aa:	e020      	b.n	80018ee <channelSpec+0x56>
        if (i < length) {
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d209      	bcs.n	80018c8 <channelSpec+0x30>
            SCPI_ParamToInt32(context, &param, &values[i]);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	18d2      	adds	r2, r2, r3
 80018bc:	2310      	movs	r3, #16
 80018be:	18f9      	adds	r1, r7, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	0018      	movs	r0, r3
 80018c4:	f002 fd0c 	bl	80042e0 <SCPI_ParamToInt32>
        }

        if (scpiLex_SpecificCharacter(state, &param, '!')) {
 80018c8:	2310      	movs	r3, #16
 80018ca:	18f9      	adds	r1, r7, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2221      	movs	r2, #33	@ 0x21
 80018d0:	0018      	movs	r0, r3
 80018d2:	f001 fdab 	bl	800342c <scpiLex_SpecificCharacter>
 80018d6:	1e03      	subs	r3, r0, #0
 80018d8:	d003      	beq.n	80018e2 <channelSpec+0x4a>
            i++;
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3301      	adds	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	e005      	b.n	80018ee <channelSpec+0x56>
        } else {
            *dimensions = i + 1;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e8:	601a      	str	r2, [r3, #0]
            return SCPI_EXPR_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e00e      	b.n	800190c <channelSpec+0x74>
    while (scpiLex_DecimalNumericProgramData(state, &param)) {
 80018ee:	2310      	movs	r3, #16
 80018f0:	18fa      	adds	r2, r7, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	0011      	movs	r1, r2
 80018f6:	0018      	movs	r0, r3
 80018f8:	f001 f938 	bl	8002b6c <scpiLex_DecimalNumericProgramData>
 80018fc:	1e03      	subs	r3, r0, #0
 80018fe:	d1d5      	bne.n	80018ac <channelSpec+0x14>
        }
    }

    if (i == 0) {
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <channelSpec+0x72>
        return SCPI_EXPR_NO_MORE;
 8001906:	2302      	movs	r3, #2
 8001908:	e000      	b.n	800190c <channelSpec+0x74>
    } else {
        /* there was at least one number followed by !, but after ! was not another number */
        return SCPI_EXPR_ERROR;
 800190a:	2301      	movs	r3, #1
    }
}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b008      	add	sp, #32
 8001912:	bd80      	pop	{r7, pc}

08001914 <channelRange>:
 * @param valuesFrom return array of values from
 * @param valuesTo return array of values to
 * @param length length of values arrays
 * @param dimensions real number of dimensions
 */
static scpi_expr_result_t channelRange(scpi_t * context, lex_state_t * state, scpi_bool_t * isRange, int32_t * valuesFrom, int32_t * valuesTo, size_t length, size_t * dimensions) {
 8001914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001916:	b08d      	sub	sp, #52	@ 0x34
 8001918:	af02      	add	r7, sp, #8
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	603b      	str	r3, [r7, #0]
    scpi_token_t token;
    scpi_expr_result_t err;
    size_t fromDimensions;
    size_t toDimensions;

    err = channelSpec(context, state, valuesFrom, length, &fromDimensions);
 8001922:	2627      	movs	r6, #39	@ 0x27
 8001924:	19bc      	adds	r4, r7, r6
 8001926:	6c7d      	ldr	r5, [r7, #68]	@ 0x44
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	2314      	movs	r3, #20
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	002b      	movs	r3, r5
 8001936:	f7ff ffaf 	bl	8001898 <channelSpec>
 800193a:	0003      	movs	r3, r0
 800193c:	7023      	strb	r3, [r4, #0]
    if (err == SCPI_EXPR_OK) {
 800193e:	0034      	movs	r4, r6
 8001940:	193b      	adds	r3, r7, r4
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d131      	bne.n	80019ac <channelRange+0x98>
        if (scpiLex_Colon(state, &token)) {
 8001948:	2318      	movs	r3, #24
 800194a:	18fa      	adds	r2, r7, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	0011      	movs	r1, r2
 8001950:	0018      	movs	r0, r3
 8001952:	f001 fd48 	bl	80033e6 <scpiLex_Colon>
 8001956:	1e03      	subs	r3, r0, #0
 8001958:	d020      	beq.n	800199c <channelRange+0x88>
            *isRange = TRUE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
            err = channelSpec(context, state, valuesTo, length, &toDimensions);
 8001960:	0026      	movs	r6, r4
 8001962:	193c      	adds	r4, r7, r4
 8001964:	6c7d      	ldr	r5, [r7, #68]	@ 0x44
 8001966:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	2310      	movs	r3, #16
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	002b      	movs	r3, r5
 8001974:	f7ff ff90 	bl	8001898 <channelSpec>
 8001978:	0003      	movs	r3, r0
 800197a:	7023      	strb	r3, [r4, #0]
            if (err != SCPI_EXPR_OK) {
 800197c:	19bb      	adds	r3, r7, r6
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <channelRange+0x74>
                return SCPI_EXPR_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e01c      	b.n	80019c2 <channelRange+0xae>
            }
            if (fromDimensions != toDimensions) {
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <channelRange+0x80>
                return SCPI_EXPR_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e016      	b.n	80019c2 <channelRange+0xae>
            }
            *dimensions = fromDimensions;
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e00f      	b.n	80019bc <channelRange+0xa8>
        } else {
            *isRange = FALSE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
            *dimensions = fromDimensions;
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019a6:	601a      	str	r2, [r3, #0]
            return SCPI_EXPR_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	e00a      	b.n	80019c2 <channelRange+0xae>
        }
    } else if (err == SCPI_EXPR_NO_MORE) {
 80019ac:	2227      	movs	r2, #39	@ 0x27
 80019ae:	18bb      	adds	r3, r7, r2
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d102      	bne.n	80019bc <channelRange+0xa8>
        err = SCPI_EXPR_ERROR;
 80019b6:	18bb      	adds	r3, r7, r2
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
    }

    return err;
 80019bc:	2327      	movs	r3, #39	@ 0x27
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	781b      	ldrb	r3, [r3, #0]
}
 80019c2:	0018      	movs	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b00b      	add	sp, #44	@ 0x2c
 80019c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080019cc <SCPI_ExprChannelListEntry>:
 * @param valuesFrom return array of values from
 * @param valuesTo return array of values to
 * @param length length of values arrays
 * @param dimensions real number of dimensions
 */
scpi_expr_result_t SCPI_ExprChannelListEntry(scpi_t * context, scpi_parameter_t * param, int index, scpi_bool_t * isRange, int32_t * valuesFrom, int32_t * valuesTo, size_t length, size_t * dimensions) {
 80019cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ce:	b091      	sub	sp, #68	@ 0x44
 80019d0:	af04      	add	r7, sp, #16
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	603b      	str	r3, [r7, #0]
    lex_state_t lex;
    int i;
    scpi_expr_result_t res = SCPI_EXPR_OK;
 80019da:	232b      	movs	r3, #43	@ 0x2b
 80019dc:	18fb      	adds	r3, r7, r3
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
    scpi_token_t token;

    if (!isRange || !param || !dimensions || (length && (!valuesFrom || !valuesTo))) {
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00e      	beq.n	8001a06 <SCPI_ExprChannelListEntry+0x3a>
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00b      	beq.n	8001a06 <SCPI_ExprChannelListEntry+0x3a>
 80019ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d008      	beq.n	8001a06 <SCPI_ExprChannelListEntry+0x3a>
 80019f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00d      	beq.n	8001a16 <SCPI_ExprChannelListEntry+0x4a>
 80019fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <SCPI_ExprChannelListEntry+0x3a>
 8001a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d107      	bne.n	8001a16 <SCPI_ExprChannelListEntry+0x4a>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8001a06:	4a52      	ldr	r2, [pc, #328]	@ (8001b50 <SCPI_ExprChannelListEntry+0x184>)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	0011      	movs	r1, r2
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7ff fead 	bl	800176c <SCPI_ErrorPush>
        return SCPI_EXPR_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e098      	b.n	8001b48 <SCPI_ExprChannelListEntry+0x17c>
    }

    if (param->type != SCPI_TOKEN_PROGRAM_EXPRESSION) {
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b10      	cmp	r3, #16
 8001a1c:	d008      	beq.n	8001a30 <SCPI_ExprChannelListEntry+0x64>
        SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 8001a1e:	2368      	movs	r3, #104	@ 0x68
 8001a20:	425a      	negs	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	0011      	movs	r1, r2
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7ff fea0 	bl	800176c <SCPI_ErrorPush>
        return SCPI_EXPR_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e08b      	b.n	8001b48 <SCPI_ExprChannelListEntry+0x17c>
    }

    lex.buffer = param->ptr + 1;
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	211c      	movs	r1, #28
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	601a      	str	r2, [r3, #0]
    lex.pos = lex.buffer;
 8001a3c:	187b      	adds	r3, r7, r1
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	605a      	str	r2, [r3, #4]
    lex.len = param->len - 2;
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	1e9a      	subs	r2, r3, #2
 8001a4a:	0008      	movs	r0, r1
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	609a      	str	r2, [r3, #8]

    /* detect channel list expression */
    if (!scpiLex_SpecificCharacter(&lex, &token, '@')) {
 8001a50:	2310      	movs	r3, #16
 8001a52:	18f9      	adds	r1, r7, r3
 8001a54:	183b      	adds	r3, r7, r0
 8001a56:	2240      	movs	r2, #64	@ 0x40
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f001 fce7 	bl	800342c <scpiLex_SpecificCharacter>
 8001a5e:	1e03      	subs	r3, r0, #0
 8001a60:	d108      	bne.n	8001a74 <SCPI_ExprChannelListEntry+0xa8>
        SCPI_ErrorPush(context, SCPI_ERROR_EXPRESSION_PARSING_ERROR);
 8001a62:	23aa      	movs	r3, #170	@ 0xaa
 8001a64:	425a      	negs	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	0011      	movs	r1, r2
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f7ff fe7e 	bl	800176c <SCPI_ErrorPush>
        return SCPI_EXPR_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e069      	b.n	8001b48 <SCPI_ExprChannelListEntry+0x17c>
    }

    for (i = 0; i <= index; i++) {
 8001a74:	2300      	movs	r3, #0
 8001a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a78:	e03b      	b.n	8001af2 <SCPI_ExprChannelListEntry+0x126>
        res = channelRange(context, &lex, isRange, valuesFrom, valuesTo, (i == index) ? length : 0, dimensions);
 8001a7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d101      	bne.n	8001a86 <SCPI_ExprChannelListEntry+0xba>
 8001a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a84:	e000      	b.n	8001a88 <SCPI_ExprChannelListEntry+0xbc>
 8001a86:	2300      	movs	r3, #0
 8001a88:	222b      	movs	r2, #43	@ 0x2b
 8001a8a:	18bc      	adds	r4, r7, r2
 8001a8c:	6cbe      	ldr	r6, [r7, #72]	@ 0x48
 8001a8e:	683d      	ldr	r5, [r7, #0]
 8001a90:	221c      	movs	r2, #28
 8001a92:	18b9      	adds	r1, r7, r2
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001a98:	9202      	str	r2, [sp, #8]
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	0033      	movs	r3, r6
 8001aa2:	002a      	movs	r2, r5
 8001aa4:	f7ff ff36 	bl	8001914 <channelRange>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	7023      	strb	r3, [r4, #0]
        if (res != SCPI_EXPR_OK) {
 8001aac:	232b      	movs	r3, #43	@ 0x2b
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d122      	bne.n	8001afc <SCPI_ExprChannelListEntry+0x130>
            break;
        }
        if (i != index) {
 8001ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d016      	beq.n	8001aec <SCPI_ExprChannelListEntry+0x120>
            if (!scpiLex_Comma(&lex, &token)) {
 8001abe:	2310      	movs	r3, #16
 8001ac0:	18fa      	adds	r2, r7, r3
 8001ac2:	241c      	movs	r4, #28
 8001ac4:	193b      	adds	r3, r7, r4
 8001ac6:	0011      	movs	r1, r2
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f001 fc46 	bl	800335a <scpiLex_Comma>
 8001ace:	1e03      	subs	r3, r0, #0
 8001ad0:	d10c      	bne.n	8001aec <SCPI_ExprChannelListEntry+0x120>
                res = scpiLex_IsEos(&lex) ? SCPI_EXPR_NO_MORE : SCPI_EXPR_ERROR;
 8001ad2:	193b      	adds	r3, r7, r4
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f000 fcaf 	bl	8002438 <scpiLex_IsEos>
 8001ada:	1e03      	subs	r3, r0, #0
 8001adc:	d001      	beq.n	8001ae2 <SCPI_ExprChannelListEntry+0x116>
 8001ade:	2202      	movs	r2, #2
 8001ae0:	e000      	b.n	8001ae4 <SCPI_ExprChannelListEntry+0x118>
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	232b      	movs	r3, #43	@ 0x2b
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	701a      	strb	r2, [r3, #0]
                break;
 8001aea:	e008      	b.n	8001afe <SCPI_ExprChannelListEntry+0x132>
    for (i = 0; i <= index; i++) {
 8001aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aee:	3301      	adds	r3, #1
 8001af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	ddbf      	ble.n	8001a7a <SCPI_ExprChannelListEntry+0xae>
 8001afa:	e000      	b.n	8001afe <SCPI_ExprChannelListEntry+0x132>
            break;
 8001afc:	46c0      	nop			@ (mov r8, r8)
            }
        }
    }

    if (res == SCPI_EXPR_ERROR) {
 8001afe:	232b      	movs	r3, #43	@ 0x2b
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d106      	bne.n	8001b16 <SCPI_ExprChannelListEntry+0x14a>
        SCPI_ErrorPush(context, SCPI_ERROR_EXPRESSION_PARSING_ERROR);
 8001b08:	23aa      	movs	r3, #170	@ 0xaa
 8001b0a:	425a      	negs	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	0011      	movs	r1, r2
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7ff fe2b 	bl	800176c <SCPI_ErrorPush>
    }
    if (res == SCPI_EXPR_NO_MORE) {
 8001b16:	242b      	movs	r4, #43	@ 0x2b
 8001b18:	193b      	adds	r3, r7, r4
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d110      	bne.n	8001b42 <SCPI_ExprChannelListEntry+0x176>
        if (!scpiLex_IsEos(&lex)) {
 8001b20:	231c      	movs	r3, #28
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	0018      	movs	r0, r3
 8001b26:	f000 fc87 	bl	8002438 <scpiLex_IsEos>
 8001b2a:	1e03      	subs	r3, r0, #0
 8001b2c:	d109      	bne.n	8001b42 <SCPI_ExprChannelListEntry+0x176>
            res = SCPI_EXPR_ERROR;
 8001b2e:	193b      	adds	r3, r7, r4
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
            SCPI_ErrorPush(context, SCPI_ERROR_EXPRESSION_PARSING_ERROR);
 8001b34:	23aa      	movs	r3, #170	@ 0xaa
 8001b36:	425a      	negs	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f7ff fe15 	bl	800176c <SCPI_ErrorPush>
        }
    }
    return res;
 8001b42:	232b      	movs	r3, #43	@ 0x2b
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	781b      	ldrb	r3, [r3, #0]
}
 8001b48:	0018      	movs	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b00d      	add	sp, #52	@ 0x34
 8001b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b50:	fffffeca 	.word	0xfffffeca

08001b54 <fifo_init>:

/**
 * Initialize fifo
 * @param fifo
 */
void fifo_init(scpi_fifo_t * fifo, scpi_error_t * data, int16_t size) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	1dbb      	adds	r3, r7, #6
 8001b60:	801a      	strh	r2, [r3, #0]
    fifo->wr = 0;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	801a      	strh	r2, [r3, #0]
    fifo->rd = 0;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	805a      	strh	r2, [r3, #2]
    fifo->count = 0;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	809a      	strh	r2, [r3, #4]
    fifo->data = data;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	609a      	str	r2, [r3, #8]
    fifo->size = size;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1dba      	adds	r2, r7, #6
 8001b7e:	8812      	ldrh	r2, [r2, #0]
 8001b80:	80da      	strh	r2, [r3, #6]
}
 8001b82:	46c0      	nop			@ (mov r8, r8)
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b004      	add	sp, #16
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <fifo_clear>:

/**
 * Empty fifo
 * @param fifo
 */
void fifo_clear(scpi_fifo_t * fifo) {
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
    fifo->wr = 0;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	801a      	strh	r2, [r3, #0]
    fifo->rd = 0;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	805a      	strh	r2, [r3, #2]
    fifo->count = 0;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	809a      	strh	r2, [r3, #4]
}
 8001ba4:	46c0      	nop			@ (mov r8, r8)
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b002      	add	sp, #8
 8001baa:	bd80      	pop	{r7, pc}

08001bac <fifo_is_empty>:
/**
 * Test if fifo is empty
 * @param fifo
 * @return
 */
scpi_bool_t fifo_is_empty(scpi_fifo_t * fifo) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
    return fifo->count == 0;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2204      	movs	r2, #4
 8001bb8:	5e9b      	ldrsh	r3, [r3, r2]
 8001bba:	425a      	negs	r2, r3
 8001bbc:	4153      	adcs	r3, r2
 8001bbe:	b2db      	uxtb	r3, r3
}
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b002      	add	sp, #8
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <fifo_is_full>:
/**
 * Test if fifo is full
 * @param fifo
 * @return
 */
scpi_bool_t fifo_is_full(scpi_fifo_t * fifo) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
    return fifo->count == fifo->size;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	5e9a      	ldrsh	r2, [r3, r2]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2106      	movs	r1, #6
 8001bda:	5e5b      	ldrsh	r3, [r3, r1]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	425a      	negs	r2, r3
 8001be0:	4153      	adcs	r3, r2
 8001be2:	b2db      	uxtb	r3, r3
}
 8001be4:	0018      	movs	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b002      	add	sp, #8
 8001bea:	bd80      	pop	{r7, pc}

08001bec <fifo_add>:
 * @param fifo
 * @param err
 * @param info
 * @return
 */
scpi_bool_t fifo_add(scpi_fifo_t * fifo, const scpi_error_t * value) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
    /* FIFO full? */
    if (fifo_is_full(fifo)) {
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7ff ffe5 	bl	8001bc8 <fifo_is_full>
 8001bfe:	1e03      	subs	r3, r0, #0
 8001c00:	d001      	beq.n	8001c06 <fifo_add+0x1a>
        return FALSE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e027      	b.n	8001c56 <fifo_add+0x6a>
    }
    if (!value) {
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <fifo_add+0x24>
        return FALSE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e022      	b.n	8001c56 <fifo_add+0x6a>
    }

    fifo->data[fifo->wr] = *value;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2100      	movs	r1, #0
 8001c18:	5e5b      	ldrsh	r3, [r3, r1]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	18d3      	adds	r3, r2, r3
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	8812      	ldrh	r2, [r2, #0]
 8001c22:	801a      	strh	r2, [r3, #0]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	5e9b      	ldrsh	r3, [r3, r2]
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2106      	movs	r1, #6
 8001c30:	5e5b      	ldrsh	r3, [r3, r1]
 8001c32:	0019      	movs	r1, r3
 8001c34:	0010      	movs	r0, r2
 8001c36:	f7fe fbe9 	bl	800040c <__aeabi_idivmod>
 8001c3a:	000b      	movs	r3, r1
 8001c3c:	b21a      	sxth	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	801a      	strh	r2, [r3, #0]
    fifo->count += 1;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2204      	movs	r2, #4
 8001c46:	5e9b      	ldrsh	r3, [r3, r2]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	809a      	strh	r2, [r3, #4]
    return TRUE;
 8001c54:	2301      	movs	r3, #1
}
 8001c56:	0018      	movs	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b002      	add	sp, #8
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <fifo_remove>:
 * Remove element form fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove(scpi_fifo_t * fifo, scpi_error_t * value) {
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f7ff ff9e 	bl	8001bac <fifo_is_empty>
 8001c70:	1e03      	subs	r3, r0, #0
 8001c72:	d001      	beq.n	8001c78 <fifo_remove+0x1a>
        return FALSE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e025      	b.n	8001cc4 <fifo_remove+0x66>
    }

    if (value) {
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d009      	beq.n	8001c92 <fifo_remove+0x34>
        *value = fifo->data[fifo->rd];
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2102      	movs	r1, #2
 8001c86:	5e5b      	ldrsh	r3, [r3, r1]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	18d2      	adds	r2, r2, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	8812      	ldrh	r2, [r2, #0]
 8001c90:	801a      	strh	r2, [r3, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2202      	movs	r2, #2
 8001c96:	5e9b      	ldrsh	r3, [r3, r2]
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2106      	movs	r1, #6
 8001c9e:	5e5b      	ldrsh	r3, [r3, r1]
 8001ca0:	0019      	movs	r1, r3
 8001ca2:	0010      	movs	r0, r2
 8001ca4:	f7fe fbb2 	bl	800040c <__aeabi_idivmod>
 8001ca8:	000b      	movs	r3, r1
 8001caa:	b21a      	sxth	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	805a      	strh	r2, [r3, #2]
    fifo->count -= 1;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	5e9b      	ldrsh	r3, [r3, r2]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	b21a      	sxth	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	809a      	strh	r2, [r3, #4]

    return TRUE;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b002      	add	sp, #8
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <fifo_remove_last>:
 * Remove last element from fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove_last(scpi_fifo_t * fifo, scpi_error_t * value) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f7ff ff67 	bl	8001bac <fifo_is_empty>
 8001cde:	1e03      	subs	r3, r0, #0
 8001ce0:	d001      	beq.n	8001ce6 <fifo_remove_last+0x1a>
        return FALSE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e02a      	b.n	8001d3c <fifo_remove_last+0x70>
    }

    fifo->wr = (fifo->wr + fifo->size - 1) % (fifo->size);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	5e9b      	ldrsh	r3, [r3, r2]
 8001cec:	001a      	movs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2106      	movs	r1, #6
 8001cf2:	5e5b      	ldrsh	r3, [r3, r1]
 8001cf4:	18d3      	adds	r3, r2, r3
 8001cf6:	1e5a      	subs	r2, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2106      	movs	r1, #6
 8001cfc:	5e5b      	ldrsh	r3, [r3, r1]
 8001cfe:	0019      	movs	r1, r3
 8001d00:	0010      	movs	r0, r2
 8001d02:	f7fe fb83 	bl	800040c <__aeabi_idivmod>
 8001d06:	000b      	movs	r3, r1
 8001d08:	b21a      	sxth	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	801a      	strh	r2, [r3, #0]

    if (value) {
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d009      	beq.n	8001d28 <fifo_remove_last+0x5c>
        *value = fifo->data[fifo->wr];
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	5e5b      	ldrsh	r3, [r3, r1]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	18d2      	adds	r2, r2, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	8812      	ldrh	r2, [r2, #0]
 8001d26:	801a      	strh	r2, [r3, #0]
    }
    fifo->count -= 1;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	5e9b      	ldrsh	r3, [r3, r2]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	b21a      	sxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	809a      	strh	r2, [r3, #4]

    return TRUE;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b002      	add	sp, #8
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <fifo_count>:
 * Retrive number of elements in fifo
 * @param fifo
 * @param value
 * @return
 */
scpi_bool_t fifo_count(scpi_fifo_t * fifo, int16_t * value) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
    *value = fifo->count;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2204      	movs	r2, #4
 8001d52:	5e9a      	ldrsh	r2, [r3, r2]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	801a      	strh	r2, [r3, #0]
    return TRUE;
 8001d58:	2301      	movs	r3, #1
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b002      	add	sp, #8
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <regUpdate>:
/**
 * Update register value
 * @param context
 * @param name - register name
 */
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	000a      	movs	r2, r1
 8001d6c:	1cfb      	adds	r3, r7, #3
 8001d6e:	701a      	strb	r2, [r3, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
 8001d70:	1cfb      	adds	r3, r7, #3
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	0011      	movs	r1, r2
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f000 f86e 	bl	8001e5a <SCPI_RegGet>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	001a      	movs	r2, r3
 8001d82:	1cfb      	adds	r3, r7, #3
 8001d84:	7819      	ldrb	r1, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 f8a9 	bl	8001ee0 <SCPI_RegSet>
}
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b002      	add	sp, #8
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <regUpdateEvent>:
 * in the condition register
 * @param context
 * @param condReg - condition register name
 * @param eventReg - event register name
 */
static void regUpdateEvent(scpi_t * context, scpi_reg_val_t oldCondVal, scpi_reg_val_t newCondVal, scpi_reg_name_t eventReg) {
 8001d96:	b5b0      	push	{r4, r5, r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	000c      	movs	r4, r1
 8001da0:	0010      	movs	r0, r2
 8001da2:	0019      	movs	r1, r3
 8001da4:	250a      	movs	r5, #10
 8001da6:	197b      	adds	r3, r7, r5
 8001da8:	1c22      	adds	r2, r4, #0
 8001daa:	801a      	strh	r2, [r3, #0]
 8001dac:	2408      	movs	r4, #8
 8001dae:	193b      	adds	r3, r7, r4
 8001db0:	1c02      	adds	r2, r0, #0
 8001db2:	801a      	strh	r2, [r3, #0]
 8001db4:	1dfb      	adds	r3, r7, #7
 8001db6:	1c0a      	adds	r2, r1, #0
 8001db8:	701a      	strb	r2, [r3, #0]
    SCPI_RegSet(context, eventReg, ((oldCondVal ^ newCondVal) & newCondVal) | SCPI_RegGet(context, eventReg));
 8001dba:	197b      	adds	r3, r7, r5
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	193a      	adds	r2, r7, r4
 8001dc4:	8812      	ldrh	r2, [r2, #0]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	b29c      	uxth	r4, r3
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	0011      	movs	r1, r2
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 f841 	bl	8001e5a <SCPI_RegGet>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	4323      	orrs	r3, r4
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	1dfb      	adds	r3, r7, #7
 8001de0:	7819      	ldrb	r1, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f000 f87b 	bl	8001ee0 <SCPI_RegSet>
}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b004      	add	sp, #16
 8001df0:	bdb0      	pop	{r4, r5, r7, pc}

08001df2 <regUpdateSTB>:
 * @param context
 * @param val value of register
 * @param mask name of mask register (enable register)
 * @param stbBits bits to clear or set in STB
 */
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
 8001df2:	b5b0      	push	{r4, r5, r7, lr}
 8001df4:	b084      	sub	sp, #16
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	0010      	movs	r0, r2
 8001dfe:	0019      	movs	r1, r3
 8001e00:	250a      	movs	r5, #10
 8001e02:	197b      	adds	r3, r7, r5
 8001e04:	1c22      	adds	r2, r4, #0
 8001e06:	801a      	strh	r2, [r3, #0]
 8001e08:	2409      	movs	r4, #9
 8001e0a:	193b      	adds	r3, r7, r4
 8001e0c:	1c02      	adds	r2, r0, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	1dbb      	adds	r3, r7, #6
 8001e12:	1c0a      	adds	r2, r1, #0
 8001e14:	801a      	strh	r2, [r3, #0]
    if (val & SCPI_RegGet(context, mask)) {
 8001e16:	193b      	adds	r3, r7, r4
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	0011      	movs	r1, r2
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f000 f81b 	bl	8001e5a <SCPI_RegGet>
 8001e24:	0003      	movs	r3, r0
 8001e26:	001a      	movs	r2, r3
 8001e28:	197b      	adds	r3, r7, r5
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <regUpdateSTB+0x52>
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 8001e34:	1dbb      	adds	r3, r7, #6
 8001e36:	881a      	ldrh	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f000 f91b 	bl	8002078 <SCPI_RegSetBits>
    } else {
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
    }
}
 8001e42:	e006      	b.n	8001e52 <regUpdateSTB+0x60>
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
 8001e44:	1dbb      	adds	r3, r7, #6
 8001e46:	881a      	ldrh	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f000 f936 	bl	80020be <SCPI_RegClearBits>
}
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b004      	add	sp, #16
 8001e58:	bdb0      	pop	{r4, r5, r7, pc}

08001e5a <SCPI_RegGet>:
/**
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	000a      	movs	r2, r1
 8001e64:	1cfb      	adds	r3, r7, #3
 8001e66:	701a      	strb	r2, [r3, #0]
    if ((name < SCPI_REG_COUNT) && context) {
 8001e68:	1cfb      	adds	r3, r7, #3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b09      	cmp	r3, #9
 8001e6e:	d809      	bhi.n	8001e84 <SCPI_RegGet+0x2a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d006      	beq.n	8001e84 <SCPI_RegGet+0x2a>
        return context->registers[name];
 8001e76:	1cfb      	adds	r3, r7, #3
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3224      	adds	r2, #36	@ 0x24
 8001e7e:	0052      	lsls	r2, r2, #1
 8001e80:	5ad3      	ldrh	r3, [r2, r3]
 8001e82:	e000      	b.n	8001e86 <SCPI_RegGet+0x2c>
    } else {
        return 0;
 8001e84:	2300      	movs	r3, #0
    }
}
 8001e86:	0018      	movs	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b002      	add	sp, #8
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <writeControl>:
 * Wrapper function to control interface from context
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
 8001e8e:	b590      	push	{r4, r7, lr}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	0008      	movs	r0, r1
 8001e98:	0011      	movs	r1, r2
 8001e9a:	1cfb      	adds	r3, r7, #3
 8001e9c:	1c02      	adds	r2, r0, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
 8001ea0:	003b      	movs	r3, r7
 8001ea2:	1c0a      	adds	r2, r1, #0
 8001ea4:	801a      	strh	r2, [r3, #0]
    if (context && context->interface && context->interface->control) {
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d014      	beq.n	8001ed6 <writeControl+0x48>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d010      	beq.n	8001ed6 <writeControl+0x48>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00b      	beq.n	8001ed6 <writeControl+0x48>
        return context->interface->control(context, ctrl, val);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	003a      	movs	r2, r7
 8001ec6:	8814      	ldrh	r4, [r2, #0]
 8001ec8:	1cfa      	adds	r2, r7, #3
 8001eca:	7811      	ldrb	r1, [r2, #0]
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	0022      	movs	r2, r4
 8001ed0:	4798      	blx	r3
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	e000      	b.n	8001ed8 <writeControl+0x4a>
    } else {
        return 0;
 8001ed6:	2300      	movs	r3, #0
    }
}
 8001ed8:	0018      	movs	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b003      	add	sp, #12
 8001ede:	bd90      	pop	{r4, r7, pc}

08001ee0 <SCPI_RegSet>:
/**
 * Set register value
 * @param name - register name
 * @param val - new value
 */
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	0008      	movs	r0, r1
 8001eea:	0011      	movs	r1, r2
 8001eec:	1cfb      	adds	r3, r7, #3
 8001eee:	1c02      	adds	r2, r0, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
 8001ef2:	003b      	movs	r3, r7
 8001ef4:	1c0a      	adds	r2, r1, #0
 8001ef6:	801a      	strh	r2, [r3, #0]
    scpi_bool_t srq = FALSE;
 8001ef8:	230f      	movs	r3, #15
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
    scpi_reg_val_t mask;
    scpi_reg_val_t old_val;

    if ((name >= SCPI_REG_COUNT) || (context == NULL)) {
 8001f00:	1cfb      	adds	r3, r7, #3
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b09      	cmp	r3, #9
 8001f06:	d900      	bls.n	8001f0a <SCPI_RegSet+0x2a>
 8001f08:	e0b0      	b.n	800206c <SCPI_RegSet+0x18c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d100      	bne.n	8001f12 <SCPI_RegSet+0x32>
 8001f10:	e0ac      	b.n	800206c <SCPI_RegSet+0x18c>
        return;
    }

    /* store old register value */
    old_val = context->registers[name];
 8001f12:	1cfb      	adds	r3, r7, #3
 8001f14:	7819      	ldrb	r1, [r3, #0]
 8001f16:	230c      	movs	r3, #12
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	3124      	adds	r1, #36	@ 0x24
 8001f1e:	0049      	lsls	r1, r1, #1
 8001f20:	5a8a      	ldrh	r2, [r1, r2]
 8001f22:	801a      	strh	r2, [r3, #0]

    /* set register value */
    context->registers[name] = val;
 8001f24:	1cfb      	adds	r3, r7, #3
 8001f26:	781a      	ldrb	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3224      	adds	r2, #36	@ 0x24
 8001f2c:	0052      	lsls	r2, r2, #1
 8001f2e:	0039      	movs	r1, r7
 8001f30:	8809      	ldrh	r1, [r1, #0]
 8001f32:	52d1      	strh	r1, [r2, r3]

    /** @TODO: remove recutsion */
    switch (name) {
 8001f34:	1cfb      	adds	r3, r7, #3
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b0a      	cmp	r3, #10
 8001f3a:	d900      	bls.n	8001f3e <SCPI_RegSet+0x5e>
 8001f3c:	e07c      	b.n	8002038 <SCPI_RegSet+0x158>
 8001f3e:	009a      	lsls	r2, r3, #2
 8001f40:	4b4c      	ldr	r3, [pc, #304]	@ (8002074 <SCPI_RegSet+0x194>)
 8001f42:	18d3      	adds	r3, r2, r3
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	469f      	mov	pc, r3
        case SCPI_REG_STB:
            mask = SCPI_RegGet(context, SCPI_REG_SRE);
 8001f48:	250a      	movs	r5, #10
 8001f4a:	197c      	adds	r4, r7, r5
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2101      	movs	r1, #1
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7ff ff82 	bl	8001e5a <SCPI_RegGet>
 8001f56:	0003      	movs	r3, r0
 8001f58:	8023      	strh	r3, [r4, #0]
            mask &= ~STB_SRQ;
 8001f5a:	0028      	movs	r0, r5
 8001f5c:	183b      	adds	r3, r7, r0
 8001f5e:	183a      	adds	r2, r7, r0
 8001f60:	8812      	ldrh	r2, [r2, #0]
 8001f62:	2140      	movs	r1, #64	@ 0x40
 8001f64:	438a      	bics	r2, r1
 8001f66:	801a      	strh	r2, [r3, #0]
            if (val & mask) {
 8001f68:	003b      	movs	r3, r7
 8001f6a:	183a      	adds	r2, r7, r0
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	8812      	ldrh	r2, [r2, #0]
 8001f70:	4013      	ands	r3, r2
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d011      	beq.n	8001f9c <SCPI_RegSet+0xbc>
                val |= STB_SRQ;
 8001f78:	003b      	movs	r3, r7
 8001f7a:	003a      	movs	r2, r7
 8001f7c:	8812      	ldrh	r2, [r2, #0]
 8001f7e:	2140      	movs	r1, #64	@ 0x40
 8001f80:	430a      	orrs	r2, r1
 8001f82:	801a      	strh	r2, [r3, #0]
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
 8001f84:	230c      	movs	r3, #12
 8001f86:	18fa      	adds	r2, r7, r3
 8001f88:	003b      	movs	r3, r7
 8001f8a:	8812      	ldrh	r2, [r2, #0]
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d051      	beq.n	8002036 <SCPI_RegSet+0x156>
                    srq = TRUE;
 8001f92:	230f      	movs	r3, #15
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
                }
            } else {
                val &= ~STB_SRQ;
            }
            break;
 8001f9a:	e04c      	b.n	8002036 <SCPI_RegSet+0x156>
                val &= ~STB_SRQ;
 8001f9c:	003b      	movs	r3, r7
 8001f9e:	003a      	movs	r2, r7
 8001fa0:	8812      	ldrh	r2, [r2, #0]
 8001fa2:	2140      	movs	r1, #64	@ 0x40
 8001fa4:	438a      	bics	r2, r1
 8001fa6:	801a      	strh	r2, [r3, #0]
            break;
 8001fa8:	e045      	b.n	8002036 <SCPI_RegSet+0x156>
        case SCPI_REG_SRE:
            regUpdate(context, SCPI_REG_STB);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2100      	movs	r1, #0
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7ff fed7 	bl	8001d62 <regUpdate>
            break;
 8001fb4:	e040      	b.n	8002038 <SCPI_RegSet+0x158>
        case SCPI_REG_ESR:
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
 8001fb6:	003b      	movs	r3, r7
 8001fb8:	8819      	ldrh	r1, [r3, #0]
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	2320      	movs	r3, #32
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	f7ff ff17 	bl	8001df2 <regUpdateSTB>
            break;
 8001fc4:	e038      	b.n	8002038 <SCPI_RegSet+0x158>
        case SCPI_REG_ESE:
            regUpdate(context, SCPI_REG_ESR);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2102      	movs	r1, #2
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7ff fec9 	bl	8001d62 <regUpdate>
            break;
 8001fd0:	e032      	b.n	8002038 <SCPI_RegSet+0x158>
        case SCPI_REG_QUES:
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
 8001fd2:	003b      	movs	r3, r7
 8001fd4:	8819      	ldrh	r1, [r3, #0]
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	2308      	movs	r3, #8
 8001fda:	2208      	movs	r2, #8
 8001fdc:	f7ff ff09 	bl	8001df2 <regUpdateSTB>
            break;
 8001fe0:	e02a      	b.n	8002038 <SCPI_RegSet+0x158>
        case SCPI_REG_QUESE:
            regUpdate(context, SCPI_REG_QUES);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2107      	movs	r1, #7
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f7ff febb 	bl	8001d62 <regUpdate>
            break;
 8001fec:	e024      	b.n	8002038 <SCPI_RegSet+0x158>
        case SCPI_REG_QUESC:
            regUpdateEvent(context, old_val, val, SCPI_REG_QUES);
 8001fee:	003b      	movs	r3, r7
 8001ff0:	881a      	ldrh	r2, [r3, #0]
 8001ff2:	230c      	movs	r3, #12
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	8819      	ldrh	r1, [r3, #0]
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	2307      	movs	r3, #7
 8001ffc:	f7ff fecb 	bl	8001d96 <regUpdateEvent>
            break;
 8002000:	e01a      	b.n	8002038 <SCPI_RegSet+0x158>
        case SCPI_REG_OPER:
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
 8002002:	003b      	movs	r3, r7
 8002004:	8819      	ldrh	r1, [r3, #0]
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	2205      	movs	r2, #5
 800200c:	f7ff fef1 	bl	8001df2 <regUpdateSTB>
            break;
 8002010:	e012      	b.n	8002038 <SCPI_RegSet+0x158>
        case SCPI_REG_OPERE:
            regUpdate(context, SCPI_REG_OPER);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2104      	movs	r1, #4
 8002016:	0018      	movs	r0, r3
 8002018:	f7ff fea3 	bl	8001d62 <regUpdate>
            break;
 800201c:	e00c      	b.n	8002038 <SCPI_RegSet+0x158>
        case SCPI_REG_OPERC:
            regUpdateEvent(context, old_val, val, SCPI_REG_OPER);
 800201e:	003b      	movs	r3, r7
 8002020:	881a      	ldrh	r2, [r3, #0]
 8002022:	230c      	movs	r3, #12
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	8819      	ldrh	r1, [r3, #0]
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	2304      	movs	r3, #4
 800202c:	f7ff feb3 	bl	8001d96 <regUpdateEvent>
            break;
 8002030:	e002      	b.n	8002038 <SCPI_RegSet+0x158>


        case SCPI_REG_COUNT:
            /* nothing to do */
            break;
 8002032:	46c0      	nop			@ (mov r8, r8)
 8002034:	e000      	b.n	8002038 <SCPI_RegSet+0x158>
            break;
 8002036:	46c0      	nop			@ (mov r8, r8)
    }

    /* set updated register value */
    context->registers[name] = val;
 8002038:	1cfb      	adds	r3, r7, #3
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3224      	adds	r2, #36	@ 0x24
 8002040:	0052      	lsls	r2, r2, #1
 8002042:	0039      	movs	r1, r7
 8002044:	8809      	ldrh	r1, [r1, #0]
 8002046:	52d1      	strh	r1, [r2, r3]

    if (srq) {
 8002048:	230f      	movs	r3, #15
 800204a:	18fb      	adds	r3, r7, r3
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00d      	beq.n	800206e <SCPI_RegSet+0x18e>
        writeControl(context, SCPI_CTRL_SRQ, SCPI_RegGet(context, SCPI_REG_STB));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2100      	movs	r1, #0
 8002056:	0018      	movs	r0, r3
 8002058:	f7ff feff 	bl	8001e5a <SCPI_RegGet>
 800205c:	0003      	movs	r3, r0
 800205e:	001a      	movs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2101      	movs	r1, #1
 8002064:	0018      	movs	r0, r3
 8002066:	f7ff ff12 	bl	8001e8e <writeControl>
 800206a:	e000      	b.n	800206e <SCPI_RegSet+0x18e>
        return;
 800206c:	46c0      	nop			@ (mov r8, r8)
    }
}
 800206e:	46bd      	mov	sp, r7
 8002070:	b004      	add	sp, #16
 8002072:	bdb0      	pop	{r4, r5, r7, pc}
 8002074:	0800ea34 	.word	0x0800ea34

08002078 <SCPI_RegSetBits>:
/**
 * Set register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	0008      	movs	r0, r1
 8002082:	0011      	movs	r1, r2
 8002084:	1cfb      	adds	r3, r7, #3
 8002086:	1c02      	adds	r2, r0, #0
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	003b      	movs	r3, r7
 800208c:	1c0a      	adds	r2, r1, #0
 800208e:	801a      	strh	r2, [r3, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
 8002090:	1cfb      	adds	r3, r7, #3
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	0011      	movs	r1, r2
 8002098:	0018      	movs	r0, r3
 800209a:	f7ff fede 	bl	8001e5a <SCPI_RegGet>
 800209e:	0003      	movs	r3, r0
 80020a0:	001a      	movs	r2, r3
 80020a2:	003b      	movs	r3, r7
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	1cfb      	adds	r3, r7, #3
 80020ac:	7819      	ldrb	r1, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff ff15 	bl	8001ee0 <SCPI_RegSet>
}
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b002      	add	sp, #8
 80020bc:	bd80      	pop	{r7, pc}

080020be <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	0008      	movs	r0, r1
 80020c8:	0011      	movs	r1, r2
 80020ca:	1cfb      	adds	r3, r7, #3
 80020cc:	1c02      	adds	r2, r0, #0
 80020ce:	701a      	strb	r2, [r3, #0]
 80020d0:	003b      	movs	r3, r7
 80020d2:	1c0a      	adds	r2, r1, #0
 80020d4:	801a      	strh	r2, [r3, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
 80020d6:	1cfb      	adds	r3, r7, #3
 80020d8:	781a      	ldrb	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	0011      	movs	r1, r2
 80020de:	0018      	movs	r0, r3
 80020e0:	f7ff febb 	bl	8001e5a <SCPI_RegGet>
 80020e4:	0003      	movs	r3, r0
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	003a      	movs	r2, r7
 80020ea:	2100      	movs	r1, #0
 80020ec:	5e52      	ldrsh	r2, [r2, r1]
 80020ee:	43d2      	mvns	r2, r2
 80020f0:	b212      	sxth	r2, r2
 80020f2:	4013      	ands	r3, r2
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	1cfb      	adds	r3, r7, #3
 80020fa:	7819      	ldrb	r1, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	0018      	movs	r0, r3
 8002100:	f7ff feee 	bl	8001ee0 <SCPI_RegSet>
}
 8002104:	46c0      	nop			@ (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	b002      	add	sp, #8
 800210a:	bd80      	pop	{r7, pc}

0800210c <SCPI_EventClear>:

/**
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	2102      	movs	r1, #2
 800211a:	0018      	movs	r0, r3
 800211c:	f7ff fee0 	bl	8001ee0 <SCPI_RegSet>
}
 8002120:	46c0      	nop			@ (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b002      	add	sp, #8
 8002126:	bd80      	pop	{r7, pc}

08002128 <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
    SCPI_EventClear(context);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	0018      	movs	r0, r3
 8002134:	f7ff ffea 	bl	800210c <SCPI_EventClear>
    SCPI_ErrorClear(context);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	0018      	movs	r0, r3
 800213c:	f7ff fa0d 	bl	800155a <SCPI_ErrorClear>
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	2104      	movs	r1, #4
 8002146:	0018      	movs	r0, r3
 8002148:	f7ff feca 	bl	8001ee0 <SCPI_RegSet>
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	2107      	movs	r1, #7
 8002152:	0018      	movs	r0, r3
 8002154:	f7ff fec4 	bl	8001ee0 <SCPI_RegSet>
    return SCPI_RES_OK;
 8002158:	2301      	movs	r3, #1
}
 800215a:	0018      	movs	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	b002      	add	sp, #8
 8002160:	bd80      	pop	{r7, pc}

08002162 <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
    int32_t new_ESE;
    if (SCPI_ParamInt32(context, &new_ESE, TRUE)) {
 800216a:	230c      	movs	r3, #12
 800216c:	18f9      	adds	r1, r7, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	0018      	movs	r0, r3
 8002174:	f002 f928 	bl	80043c8 <SCPI_ParamInt32>
 8002178:	1e03      	subs	r3, r0, #0
 800217a:	d008      	beq.n	800218e <SCPI_CoreEse+0x2c>
        SCPI_RegSet(context, SCPI_REG_ESE, (scpi_reg_val_t) new_ESE);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	b29a      	uxth	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2103      	movs	r1, #3
 8002184:	0018      	movs	r0, r3
 8002186:	f7ff feab 	bl	8001ee0 <SCPI_RegSet>
        return SCPI_RES_OK;
 800218a:	2301      	movs	r3, #1
 800218c:	e001      	b.n	8002192 <SCPI_CoreEse+0x30>
    }
    return SCPI_RES_ERR;
 800218e:	2301      	movs	r3, #1
 8002190:	425b      	negs	r3, r3
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	b004      	add	sp, #16
 8002198:	bd80      	pop	{r7, pc}

0800219a <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESE));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2103      	movs	r1, #3
 80021a6:	0018      	movs	r0, r3
 80021a8:	f7ff fe57 	bl	8001e5a <SCPI_RegGet>
 80021ac:	0003      	movs	r3, r0
 80021ae:	001a      	movs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	0011      	movs	r1, r2
 80021b4:	0018      	movs	r0, r3
 80021b6:	f001 fd8f 	bl	8003cd8 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	0018      	movs	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	b002      	add	sp, #8
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESR));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2102      	movs	r1, #2
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7ff fe42 	bl	8001e5a <SCPI_RegGet>
 80021d6:	0003      	movs	r3, r0
 80021d8:	001a      	movs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	0011      	movs	r1, r2
 80021de:	0018      	movs	r0, r3
 80021e0:	f001 fd7a 	bl	8003cd8 <SCPI_ResultInt32>
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	2102      	movs	r1, #2
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7ff fe78 	bl	8001ee0 <SCPI_RegSet>
    return SCPI_RES_OK;
 80021f0:	2301      	movs	r3, #1
}
 80021f2:	0018      	movs	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	b002      	add	sp, #8
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <SCPI_CoreIdnQ>:
 * 
 * example: MANUFACTURE,MODEL,0,01-02-01
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreIdnQ(scpi_t * context) {
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < 4; i++) {
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	e029      	b.n	800225e <SCPI_CoreIdnQ+0x62>
        if (context->idn[i]) {
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3320      	adds	r3, #32
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	18d3      	adds	r3, r2, r3
 8002214:	3304      	adds	r3, #4
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d017      	beq.n	800224c <SCPI_CoreIdnQ+0x50>
            SCPI_ResultMnemonic(context, context->idn[i]);
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3320      	adds	r3, #32
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	18d3      	adds	r3, r2, r3
 8002226:	3304      	adds	r3, #4
 8002228:	681c      	ldr	r4, [r3, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	3320      	adds	r3, #32
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	18d3      	adds	r3, r2, r3
 8002234:	3304      	adds	r3, #4
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0018      	movs	r0, r3
 800223a:	f7fd ff65 	bl	8000108 <strlen>
 800223e:	0002      	movs	r2, r0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	0021      	movs	r1, r4
 8002244:	0018      	movs	r0, r3
 8002246:	f001 fcb3 	bl	8003bb0 <SCPI_ResultCharacters>
 800224a:	e005      	b.n	8002258 <SCPI_CoreIdnQ+0x5c>
        } else {
            SCPI_ResultMnemonic(context, "0");
 800224c:	4908      	ldr	r1, [pc, #32]	@ (8002270 <SCPI_CoreIdnQ+0x74>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	0018      	movs	r0, r3
 8002254:	f001 fcac 	bl	8003bb0 <SCPI_ResultCharacters>
    for (i = 0; i < 4; i++) {
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3301      	adds	r3, #1
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b03      	cmp	r3, #3
 8002262:	ddd2      	ble.n	800220a <SCPI_CoreIdnQ+0xe>
        }
    }
    return SCPI_RES_OK;
 8002264:	2301      	movs	r3, #1
}
 8002266:	0018      	movs	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	b005      	add	sp, #20
 800226c:	bd90      	pop	{r4, r7, pc}
 800226e:	46c0      	nop			@ (mov r8, r8)
 8002270:	0800e5a4 	.word	0x0800e5a4

08002274 <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	2102      	movs	r1, #2
 8002282:	0018      	movs	r0, r3
 8002284:	f7ff fef8 	bl	8002078 <SCPI_RegSetBits>
    return SCPI_RES_OK;
 8002288:	2301      	movs	r3, #1
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b002      	add	sp, #8
 8002290:	bd80      	pop	{r7, pc}

08002292 <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
    /* Operation is always completed */
    SCPI_ResultInt32(context, 1);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2101      	movs	r1, #1
 800229e:	0018      	movs	r0, r3
 80022a0:	f001 fd1a 	bl	8003cd8 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 80022a4:	2301      	movs	r3, #1
}
 80022a6:	0018      	movs	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b002      	add	sp, #8
 80022ac:	bd80      	pop	{r7, pc}

080022ae <SCPI_CoreRst>:
/**
 * *RST
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreRst(scpi_t * context) {
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
    if (context && context->interface && context->interface->reset) {
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d010      	beq.n	80022de <SCPI_CoreRst+0x30>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00c      	beq.n	80022de <SCPI_CoreRst+0x30>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d007      	beq.n	80022de <SCPI_CoreRst+0x30>
        return context->interface->reset(context);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	0010      	movs	r0, r2
 80022d8:	4798      	blx	r3
 80022da:	0003      	movs	r3, r0
 80022dc:	e000      	b.n	80022e0 <SCPI_CoreRst+0x32>
    }
    return SCPI_RES_OK;
 80022de:	2301      	movs	r3, #1
}
 80022e0:	0018      	movs	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b002      	add	sp, #8
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
    int32_t new_SRE;
    if (SCPI_ParamInt32(context, &new_SRE, TRUE)) {
 80022f0:	230c      	movs	r3, #12
 80022f2:	18f9      	adds	r1, r7, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	0018      	movs	r0, r3
 80022fa:	f002 f865 	bl	80043c8 <SCPI_ParamInt32>
 80022fe:	1e03      	subs	r3, r0, #0
 8002300:	d008      	beq.n	8002314 <SCPI_CoreSre+0x2c>
        SCPI_RegSet(context, SCPI_REG_SRE, (scpi_reg_val_t) new_SRE);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	b29a      	uxth	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2101      	movs	r1, #1
 800230a:	0018      	movs	r0, r3
 800230c:	f7ff fde8 	bl	8001ee0 <SCPI_RegSet>
        return SCPI_RES_OK;
 8002310:	2301      	movs	r3, #1
 8002312:	e001      	b.n	8002318 <SCPI_CoreSre+0x30>
    }
    return SCPI_RES_ERR;
 8002314:	2301      	movs	r3, #1
 8002316:	425b      	negs	r3, r3
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	b004      	add	sp, #16
 800231e:	bd80      	pop	{r7, pc}

08002320 <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_SRE));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2101      	movs	r1, #1
 800232c:	0018      	movs	r0, r3
 800232e:	f7ff fd94 	bl	8001e5a <SCPI_RegGet>
 8002332:	0003      	movs	r3, r0
 8002334:	001a      	movs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0011      	movs	r1, r2
 800233a:	0018      	movs	r0, r3
 800233c:	f001 fccc 	bl	8003cd8 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 8002340:	2301      	movs	r3, #1
}
 8002342:	0018      	movs	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	b002      	add	sp, #8
 8002348:	bd80      	pop	{r7, pc}

0800234a <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_STB));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2100      	movs	r1, #0
 8002356:	0018      	movs	r0, r3
 8002358:	f7ff fd7f 	bl	8001e5a <SCPI_RegGet>
 800235c:	0003      	movs	r3, r0
 800235e:	001a      	movs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	0011      	movs	r1, r2
 8002364:	0018      	movs	r0, r3
 8002366:	f001 fcb7 	bl	8003cd8 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 800236a:	2301      	movs	r3, #1
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b002      	add	sp, #8
 8002372:	bd80      	pop	{r7, pc}

08002374 <SCPI_CoreWai>:
/**
 * *WAI
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
 800237c:	2301      	movs	r3, #1
}
 800237e:	0018      	movs	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	b002      	add	sp, #8
 8002384:	bd80      	pop	{r7, pc}

08002386 <isws>:
/**
 * Is white space
 * @param c
 * @return 
 */
static int isws(int c) {
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
    if ((c == ' ') || (c == '\t')) {
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b20      	cmp	r3, #32
 8002392:	d002      	beq.n	800239a <isws+0x14>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b09      	cmp	r3, #9
 8002398:	d101      	bne.n	800239e <isws+0x18>
        return 1;
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <isws+0x1a>
    }
    return 0;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <isbdigit>:
/**
 * Is binary digit
 * @param c
 * @return 
 */
static int isbdigit(int c) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
    if ((c == '0') || (c == '1')) {
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b30      	cmp	r3, #48	@ 0x30
 80023b4:	d002      	beq.n	80023bc <isbdigit+0x14>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b31      	cmp	r3, #49	@ 0x31
 80023ba:	d101      	bne.n	80023c0 <isbdigit+0x18>
        return 1;
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <isbdigit+0x1a>
    }
    return 0;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	0018      	movs	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b002      	add	sp, #8
 80023c8:	bd80      	pop	{r7, pc}

080023ca <isqdigit>:
/**
 * Is hexadecimal digit
 * @param c
 * @return 
 */
static int isqdigit(int c) {
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
    if ((c == '0') || (c == '1') || (c == '2') || (c == '3') || (c == '4') || (c == '5') || (c == '6') || (c == '7')) {
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b30      	cmp	r3, #48	@ 0x30
 80023d6:	d014      	beq.n	8002402 <isqdigit+0x38>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b31      	cmp	r3, #49	@ 0x31
 80023dc:	d011      	beq.n	8002402 <isqdigit+0x38>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b32      	cmp	r3, #50	@ 0x32
 80023e2:	d00e      	beq.n	8002402 <isqdigit+0x38>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b33      	cmp	r3, #51	@ 0x33
 80023e8:	d00b      	beq.n	8002402 <isqdigit+0x38>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b34      	cmp	r3, #52	@ 0x34
 80023ee:	d008      	beq.n	8002402 <isqdigit+0x38>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b35      	cmp	r3, #53	@ 0x35
 80023f4:	d005      	beq.n	8002402 <isqdigit+0x38>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b36      	cmp	r3, #54	@ 0x36
 80023fa:	d002      	beq.n	8002402 <isqdigit+0x38>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b37      	cmp	r3, #55	@ 0x37
 8002400:	d101      	bne.n	8002406 <isqdigit+0x3c>
        return 1;
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <isqdigit+0x3e>
    }
    return 0;
 8002406:	2300      	movs	r3, #0
}
 8002408:	0018      	movs	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	b002      	add	sp, #8
 800240e:	bd80      	pop	{r7, pc}

08002410 <iseos>:
/**
 * Is end of string
 * @param state
 * @return 
 */
static int iseos(lex_state_t * state) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
    if ((state->buffer + state->len) <= (state->pos)) {
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	18d2      	adds	r2, r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	429a      	cmp	r2, r3
 8002428:	d801      	bhi.n	800242e <iseos+0x1e>
        return 1;
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <iseos+0x20>
    } else {
        return 0;
 800242e:	2300      	movs	r3, #0
    }
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b002      	add	sp, #8
 8002436:	bd80      	pop	{r7, pc}

08002438 <scpiLex_IsEos>:
/**
 * Private export of iseos
 * @param state
 * @return 
 */
int scpiLex_IsEos(lex_state_t * state) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    return iseos(state);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	0018      	movs	r0, r3
 8002444:	f7ff ffe4 	bl	8002410 <iseos>
 8002448:	0003      	movs	r3, r0
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b002      	add	sp, #8
 8002450:	bd80      	pop	{r7, pc}

08002452 <ischr>:
 * Test current character
 * @param state
 * @param chr
 * @return 
 */
static int ischr(lex_state_t * state, char chr) {
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	000a      	movs	r2, r1
 800245c:	1cfb      	adds	r3, r7, #3
 800245e:	701a      	strb	r2, [r3, #0]
    return (state->pos[0] == chr);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	1cfa      	adds	r2, r7, #3
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	425a      	negs	r2, r3
 800246e:	4153      	adcs	r3, r2
 8002470:	b2db      	uxtb	r3, r3
}
 8002472:	0018      	movs	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	b002      	add	sp, #8
 8002478:	bd80      	pop	{r7, pc}

0800247a <isplusmn>:
/**
 * Is plus or minus
 * @param c
 * @return 
 */
static int isplusmn(int c) {
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
    return c == '+' || c == '-';
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b2b      	cmp	r3, #43	@ 0x2b
 8002486:	d002      	beq.n	800248e <isplusmn+0x14>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b2d      	cmp	r3, #45	@ 0x2d
 800248c:	d101      	bne.n	8002492 <isplusmn+0x18>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <isplusmn+0x1a>
 8002492:	2300      	movs	r3, #0
}
 8002494:	0018      	movs	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	b002      	add	sp, #8
 800249a:	bd80      	pop	{r7, pc}

0800249c <isH>:
/**
 * Is letter H
 * @param c
 * @return 
 */
static int isH(int c) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
    return c == 'h' || c == 'H';
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b68      	cmp	r3, #104	@ 0x68
 80024a8:	d002      	beq.n	80024b0 <isH+0x14>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b48      	cmp	r3, #72	@ 0x48
 80024ae:	d101      	bne.n	80024b4 <isH+0x18>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <isH+0x1a>
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	0018      	movs	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b002      	add	sp, #8
 80024bc:	bd80      	pop	{r7, pc}

080024be <isB>:
/**
 * Is letter B
 * @param c
 * @return 
 */
static int isB(int c) {
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
    return c == 'b' || c == 'B';
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b62      	cmp	r3, #98	@ 0x62
 80024ca:	d002      	beq.n	80024d2 <isB+0x14>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b42      	cmp	r3, #66	@ 0x42
 80024d0:	d101      	bne.n	80024d6 <isB+0x18>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <isB+0x1a>
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b002      	add	sp, #8
 80024de:	bd80      	pop	{r7, pc}

080024e0 <isQ>:
/**
 * Is letter Q
 * @param c
 * @return 
 */
static int isQ(int c) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
    return c == 'q' || c == 'Q';
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b71      	cmp	r3, #113	@ 0x71
 80024ec:	d002      	beq.n	80024f4 <isQ+0x14>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b51      	cmp	r3, #81	@ 0x51
 80024f2:	d101      	bne.n	80024f8 <isQ+0x18>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <isQ+0x1a>
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	0018      	movs	r0, r3
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b002      	add	sp, #8
 8002500:	bd80      	pop	{r7, pc}

08002502 <isE>:
/**
 * Is letter E
 * @param c
 * @return 
 */
static int isE(int c) {
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
    return c == 'e' || c == 'E';
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b65      	cmp	r3, #101	@ 0x65
 800250e:	d002      	beq.n	8002516 <isE+0x14>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b45      	cmp	r3, #69	@ 0x45
 8002514:	d101      	bne.n	800251a <isE+0x18>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <isE+0x1a>
 800251a:	2300      	movs	r3, #0
}
 800251c:	0018      	movs	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	b002      	add	sp, #8
 8002522:	bd80      	pop	{r7, pc}

08002524 <skipWs>:
/**
 * Skip all whitespaces
 * @param state
 * @return 
 */
static int skipWs(lex_state_t * state) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
    int someSpace = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isws(state->pos[0])) {
 8002530:	e007      	b.n	8002542 <skipWs+0x1e>
        state->pos++;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	605a      	str	r2, [r3, #4]
        someSpace++;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3301      	adds	r3, #1
 8002540:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isws(state->pos[0])) {
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	0018      	movs	r0, r3
 8002546:	f7ff ff63 	bl	8002410 <iseos>
 800254a:	1e03      	subs	r3, r0, #0
 800254c:	d107      	bne.n	800255e <skipWs+0x3a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	0018      	movs	r0, r3
 8002556:	f7ff ff16 	bl	8002386 <isws>
 800255a:	1e03      	subs	r3, r0, #0
 800255c:	d1e9      	bne.n	8002532 <skipWs+0xe>
    }

    return someSpace;
 800255e:	68fb      	ldr	r3, [r7, #12]
}
 8002560:	0018      	movs	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	b004      	add	sp, #16
 8002566:	bd80      	pop	{r7, pc}

08002568 <skipDigit>:
/**
 * Skip decimal digit
 * @param state
 * @return 
 */
static int skipDigit(lex_state_t * state) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	0018      	movs	r0, r3
 8002574:	f7ff ff4c 	bl	8002410 <iseos>
 8002578:	1e03      	subs	r3, r0, #0
 800257a:	d111      	bne.n	80025a0 <skipDigit+0x38>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <skipDigit+0x44>)
 8002586:	18d3      	adds	r3, r2, r3
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	001a      	movs	r2, r3
 800258c:	2304      	movs	r3, #4
 800258e:	4013      	ands	r3, r2
 8002590:	d006      	beq.n	80025a0 <skipDigit+0x38>
        state->pos++;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <skipDigit+0x3a>
    } else {
        return SKIP_NONE;
 80025a0:	2300      	movs	r3, #0
    }
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b002      	add	sp, #8
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	0800ed18 	.word	0x0800ed18

080025b0 <skipNumbers>:
/**
 * Skip multiple decimal digits
 * @param state
 * @return 
 */
static int skipNumbers(lex_state_t * state) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 80025bc:	e007      	b.n	80025ce <skipNumbers+0x1e>
        state->pos++;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	605a      	str	r2, [r3, #4]
        someNumbers++;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	3301      	adds	r3, #1
 80025cc:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7ff ff1d 	bl	8002410 <iseos>
 80025d6:	1e03      	subs	r3, r0, #0
 80025d8:	d10a      	bne.n	80025f0 <skipNumbers+0x40>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <skipNumbers+0x4c>)
 80025e4:	18d3      	adds	r3, r2, r3
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	001a      	movs	r2, r3
 80025ea:	2304      	movs	r3, #4
 80025ec:	4013      	ands	r3, r2
 80025ee:	d1e6      	bne.n	80025be <skipNumbers+0xe>
    }
    return someNumbers;
 80025f0:	68fb      	ldr	r3, [r7, #12]
}
 80025f2:	0018      	movs	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b004      	add	sp, #16
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	0800ed18 	.word	0x0800ed18

08002600 <skipPlusmn>:
/**
 * Skip plus or minus
 * @param state
 * @return 
 */
static int skipPlusmn(lex_state_t * state) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && isplusmn(state->pos[0])) {
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	0018      	movs	r0, r3
 800260c:	f7ff ff00 	bl	8002410 <iseos>
 8002610:	1e03      	subs	r3, r0, #0
 8002612:	d10e      	bne.n	8002632 <skipPlusmn+0x32>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	0018      	movs	r0, r3
 800261c:	f7ff ff2d 	bl	800247a <isplusmn>
 8002620:	1e03      	subs	r3, r0, #0
 8002622:	d006      	beq.n	8002632 <skipPlusmn+0x32>
        state->pos++;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <skipPlusmn+0x34>
    } else {
        return SKIP_NONE;
 8002632:	2300      	movs	r3, #0
    }
}
 8002634:	0018      	movs	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}

0800263c <skipAlpha>:
/**
 * Skip any character from 'a'-'Z'
 * @param state
 * @return 
 */
static int skipAlpha(lex_state_t * state) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
    int someLetters = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8002648:	e007      	b.n	800265a <skipAlpha+0x1e>
        state->pos++;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	605a      	str	r2, [r3, #4]
        someLetters++;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3301      	adds	r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0018      	movs	r0, r3
 800265e:	f7ff fed7 	bl	8002410 <iseos>
 8002662:	1e03      	subs	r3, r0, #0
 8002664:	d10a      	bne.n	800267c <skipAlpha+0x40>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <skipAlpha+0x4c>)
 8002670:	18d3      	adds	r3, r2, r3
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	001a      	movs	r2, r3
 8002676:	2303      	movs	r3, #3
 8002678:	4013      	ands	r3, r2
 800267a:	d1e6      	bne.n	800264a <skipAlpha+0xe>
    }
    return someLetters;
 800267c:	68fb      	ldr	r3, [r7, #12]
}
 800267e:	0018      	movs	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	b004      	add	sp, #16
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			@ (mov r8, r8)
 8002688:	0800ed18 	.word	0x0800ed18

0800268c <skipChr>:
 * Skip exact character chr or nothing
 * @param state
 * @param chr
 * @return 
 */
static int skipChr(lex_state_t * state, char chr) {
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	000a      	movs	r2, r1
 8002696:	1cfb      	adds	r3, r7, #3
 8002698:	701a      	strb	r2, [r3, #0]
    if (!iseos(state) && ischr(state, chr)) {
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	0018      	movs	r0, r3
 800269e:	f7ff feb7 	bl	8002410 <iseos>
 80026a2:	1e03      	subs	r3, r0, #0
 80026a4:	d10f      	bne.n	80026c6 <skipChr+0x3a>
 80026a6:	1cfb      	adds	r3, r7, #3
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0011      	movs	r1, r2
 80026ae:	0018      	movs	r0, r3
 80026b0:	f7ff fecf 	bl	8002452 <ischr>
 80026b4:	1e03      	subs	r3, r0, #0
 80026b6:	d006      	beq.n	80026c6 <skipChr+0x3a>
        state->pos++;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <skipChr+0x3c>
    } else {
        return SKIP_NONE;
 80026c6:	2300      	movs	r3, #0
    }
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b002      	add	sp, #8
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <skipSlashDot>:
/**
 * Skip slash or dot
 * @param state
 * @return 
 */
static int skipSlashDot(lex_state_t * state) {
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && (ischr(state, '/') | ischr(state, '.'))) {
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	0018      	movs	r0, r3
 80026dc:	f7ff fe98 	bl	8002410 <iseos>
 80026e0:	1e03      	subs	r3, r0, #0
 80026e2:	d114      	bne.n	800270e <skipSlashDot+0x3e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	212f      	movs	r1, #47	@ 0x2f
 80026e8:	0018      	movs	r0, r3
 80026ea:	f7ff feb2 	bl	8002452 <ischr>
 80026ee:	0004      	movs	r4, r0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	212e      	movs	r1, #46	@ 0x2e
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7ff feac 	bl	8002452 <ischr>
 80026fa:	0003      	movs	r3, r0
 80026fc:	4323      	orrs	r3, r4
 80026fe:	d006      	beq.n	800270e <skipSlashDot+0x3e>
        state->pos++;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <skipSlashDot+0x40>
    } else {
        return SKIP_NONE;
 800270e:	2300      	movs	r3, #0
    }
}
 8002710:	0018      	movs	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	b003      	add	sp, #12
 8002716:	bd90      	pop	{r4, r7, pc}

08002718 <skipStar>:
/**
 * Skip star
 * @param state
 * @return 
 */
static int skipStar(lex_state_t * state) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && ischr(state, '*')) {
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	0018      	movs	r0, r3
 8002724:	f7ff fe74 	bl	8002410 <iseos>
 8002728:	1e03      	subs	r3, r0, #0
 800272a:	d10d      	bne.n	8002748 <skipStar+0x30>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	212a      	movs	r1, #42	@ 0x2a
 8002730:	0018      	movs	r0, r3
 8002732:	f7ff fe8e 	bl	8002452 <ischr>
 8002736:	1e03      	subs	r3, r0, #0
 8002738:	d006      	beq.n	8002748 <skipStar+0x30>
        state->pos++;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <skipStar+0x32>
    } else {
        return SKIP_NONE;
 8002748:	2300      	movs	r3, #0
    }
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b002      	add	sp, #8
 8002750:	bd80      	pop	{r7, pc}

08002752 <skipColon>:
/**
 * Skip colon
 * @param state
 * @return 
 */
static int skipColon(lex_state_t * state) {
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && ischr(state, ':')) {
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	0018      	movs	r0, r3
 800275e:	f7ff fe57 	bl	8002410 <iseos>
 8002762:	1e03      	subs	r3, r0, #0
 8002764:	d10d      	bne.n	8002782 <skipColon+0x30>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	213a      	movs	r1, #58	@ 0x3a
 800276a:	0018      	movs	r0, r3
 800276c:	f7ff fe71 	bl	8002452 <ischr>
 8002770:	1e03      	subs	r3, r0, #0
 8002772:	d006      	beq.n	8002782 <skipColon+0x30>
        state->pos++;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <skipColon+0x32>
    } else {
        return SKIP_NONE;
 8002782:	2300      	movs	r3, #0
    }
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b002      	add	sp, #8
 800278a:	bd80      	pop	{r7, pc}

0800278c <skipProgramMnemonic>:
/**
 * Skip program mnemonic [a-z][a-z0-9_]*
 * @param state
 * @return 
 */
static int skipProgramMnemonic(lex_state_t * state) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
    const char * startPos = state->pos;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	60fb      	str	r3, [r7, #12]
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	0018      	movs	r0, r3
 800279e:	f7ff fe37 	bl	8002410 <iseos>
 80027a2:	1e03      	subs	r3, r0, #0
 80027a4:	d12d      	bne.n	8002802 <skipProgramMnemonic+0x76>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002828 <skipProgramMnemonic+0x9c>)
 80027b0:	18d3      	adds	r3, r2, r3
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	001a      	movs	r2, r3
 80027b6:	2303      	movs	r3, #3
 80027b8:	4013      	ands	r3, r2
 80027ba:	d022      	beq.n	8002802 <skipProgramMnemonic+0x76>
        state->pos++;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 80027c6:	e004      	b.n	80027d2 <skipProgramMnemonic+0x46>
            state->pos++;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7ff fe1b 	bl	8002410 <iseos>
 80027da:	1e03      	subs	r3, r0, #0
 80027dc:	d111      	bne.n	8002802 <skipProgramMnemonic+0x76>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <skipProgramMnemonic+0x9c>)
 80027e8:	18d3      	adds	r3, r2, r3
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	001a      	movs	r2, r3
 80027ee:	2307      	movs	r3, #7
 80027f0:	4013      	ands	r3, r2
 80027f2:	d1e9      	bne.n	80027c8 <skipProgramMnemonic+0x3c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	215f      	movs	r1, #95	@ 0x5f
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7ff fe2a 	bl	8002452 <ischr>
 80027fe:	1e03      	subs	r3, r0, #0
 8002800:	d1e2      	bne.n	80027c8 <skipProgramMnemonic+0x3c>
        }
    }

    if (iseos(state)) {
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	0018      	movs	r0, r3
 8002806:	f7ff fe03 	bl	8002410 <iseos>
 800280a:	1e03      	subs	r3, r0, #0
 800280c:	d004      	beq.n	8002818 <skipProgramMnemonic+0x8c>
        return (state->pos - startPos) * SKIP_INCOMPLETE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	e003      	b.n	8002820 <skipProgramMnemonic+0x94>
    } else {
        return (state->pos - startPos) * SKIP_OK;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1ad3      	subs	r3, r2, r3
    }
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b004      	add	sp, #16
 8002826:	bd80      	pop	{r7, pc}
 8002828:	0800ed18 	.word	0x0800ed18

0800282c <scpiLex_WhiteSpace>:
 * Detect token white space
 * @param state
 * @param token
 * @return 
 */
int scpiLex_WhiteSpace(lex_state_t * state, scpi_token_t * token) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	605a      	str	r2, [r3, #4]

    skipWs(state);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	0018      	movs	r0, r3
 8002842:	f7ff fe6f 	bl	8002524 <skipWs>

    token->len = state->pos - token->ptr;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	1ad2      	subs	r2, r2, r3
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	609a      	str	r2, [r3, #8]

    if (token->len > 0) {
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	dd03      	ble.n	8002864 <scpiLex_WhiteSpace+0x38>
        token->type = SCPI_TOKEN_WS;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2217      	movs	r2, #23
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	e002      	b.n	800286a <scpiLex_WhiteSpace+0x3e>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	221a      	movs	r2, #26
 8002868:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
}
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b002      	add	sp, #8
 8002874:	bd80      	pop	{r7, pc}

08002876 <skipCommonProgramHeader>:
/**
 * Skip command program header \*<PROGRAM MNEMONIC>
 * @param state
 * @return 
 */
static int skipCommonProgramHeader(lex_state_t * state) {
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
    int res;
    if (skipStar(state)) {
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	0018      	movs	r0, r3
 8002882:	f7ff ff49 	bl	8002718 <skipStar>
 8002886:	1e03      	subs	r3, r0, #0
 8002888:	d01e      	beq.n	80028c8 <skipCommonProgramHeader+0x52>
        res = skipProgramMnemonic(state);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	0018      	movs	r0, r3
 800288e:	f7ff ff7d 	bl	800278c <skipProgramMnemonic>
 8002892:	0003      	movs	r3, r0
 8002894:	60fb      	str	r3, [r7, #12]
        if (res == SKIP_NONE && iseos(state)) {
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d108      	bne.n	80028ae <skipCommonProgramHeader+0x38>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0018      	movs	r0, r3
 80028a0:	f7ff fdb6 	bl	8002410 <iseos>
 80028a4:	1e03      	subs	r3, r0, #0
 80028a6:	d002      	beq.n	80028ae <skipCommonProgramHeader+0x38>
            return SKIP_INCOMPLETE;
 80028a8:	2301      	movs	r3, #1
 80028aa:	425b      	negs	r3, r3
 80028ac:	e00d      	b.n	80028ca <skipCommonProgramHeader+0x54>
        } else if (res <= SKIP_INCOMPLETE) {
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	da01      	bge.n	80028b8 <skipCommonProgramHeader+0x42>
            return SKIP_OK;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e008      	b.n	80028ca <skipCommonProgramHeader+0x54>
        } else if (res >= SKIP_OK) {
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	dd01      	ble.n	80028c2 <skipCommonProgramHeader+0x4c>
            return SKIP_OK;
 80028be:	2301      	movs	r3, #1
 80028c0:	e003      	b.n	80028ca <skipCommonProgramHeader+0x54>
        } else {
            return SKIP_INCOMPLETE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	425b      	negs	r3, r3
 80028c6:	e000      	b.n	80028ca <skipCommonProgramHeader+0x54>
        }
    }
    return SKIP_NONE;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b004      	add	sp, #16
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <skipCompoundProgramHeader>:
/**
 * Skip compound program header :<PROGRAM MNEMONIC>:<PROGRAM MNEMONIC>...
 * @param state
 * @return 
 */
static int skipCompoundProgramHeader(lex_state_t * state) {
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
    int res;
    int firstColon = skipColon(state);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f7ff ff38 	bl	8002752 <skipColon>
 80028e2:	0003      	movs	r3, r0
 80028e4:	60fb      	str	r3, [r7, #12]

    res = skipProgramMnemonic(state);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	0018      	movs	r0, r3
 80028ea:	f7ff ff4f 	bl	800278c <skipProgramMnemonic>
 80028ee:	0003      	movs	r3, r0
 80028f0:	60bb      	str	r3, [r7, #8]
    if (res >= SKIP_OK) {
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	dd19      	ble.n	800292c <skipCompoundProgramHeader+0x5a>
        while (skipColon(state)) {
 80028f8:	e010      	b.n	800291c <skipCompoundProgramHeader+0x4a>
            res = skipProgramMnemonic(state);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	0018      	movs	r0, r3
 80028fe:	f7ff ff45 	bl	800278c <skipProgramMnemonic>
 8002902:	0003      	movs	r3, r0
 8002904:	60bb      	str	r3, [r7, #8]
            if (res <= SKIP_INCOMPLETE) {
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	da01      	bge.n	8002910 <skipCompoundProgramHeader+0x3e>
                return SKIP_OK;
 800290c:	2301      	movs	r3, #1
 800290e:	e019      	b.n	8002944 <skipCompoundProgramHeader+0x72>
            } else if (res == SKIP_NONE) {
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d102      	bne.n	800291c <skipCompoundProgramHeader+0x4a>
                return SKIP_INCOMPLETE;
 8002916:	2301      	movs	r3, #1
 8002918:	425b      	negs	r3, r3
 800291a:	e013      	b.n	8002944 <skipCompoundProgramHeader+0x72>
        while (skipColon(state)) {
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	0018      	movs	r0, r3
 8002920:	f7ff ff17 	bl	8002752 <skipColon>
 8002924:	1e03      	subs	r3, r0, #0
 8002926:	d1e8      	bne.n	80028fa <skipCompoundProgramHeader+0x28>
            }
        }
        return SKIP_OK;
 8002928:	2301      	movs	r3, #1
 800292a:	e00b      	b.n	8002944 <skipCompoundProgramHeader+0x72>
    } else if (res <= SKIP_INCOMPLETE) {
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	da01      	bge.n	8002936 <skipCompoundProgramHeader+0x64>
        return SKIP_OK;
 8002932:	2301      	movs	r3, #1
 8002934:	e006      	b.n	8002944 <skipCompoundProgramHeader+0x72>
    } else if (firstColon) {
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <skipCompoundProgramHeader+0x70>
        return SKIP_INCOMPLETE;
 800293c:	2301      	movs	r3, #1
 800293e:	425b      	negs	r3, r3
 8002940:	e000      	b.n	8002944 <skipCompoundProgramHeader+0x72>
    } else {
        return SKIP_NONE;
 8002942:	2300      	movs	r3, #0
    }
}
 8002944:	0018      	movs	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	b004      	add	sp, #16
 800294a:	bd80      	pop	{r7, pc}

0800294c <scpiLex_ProgramHeader>:
 * Detect token command or compound program header
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramHeader(lex_state_t * state, scpi_token_t * token) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
    int res;
    token->ptr = state->pos;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	605a      	str	r2, [r3, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	221a      	movs	r2, #26
 8002962:	701a      	strb	r2, [r3, #0]

    res = skipCommonProgramHeader(state);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	0018      	movs	r0, r3
 8002968:	f7ff ff85 	bl	8002876 <skipCommonProgramHeader>
 800296c:	0003      	movs	r3, r0
 800296e:	60fb      	str	r3, [r7, #12]
    if (res >= SKIP_OK) {
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	dd0e      	ble.n	8002994 <scpiLex_ProgramHeader+0x48>
        if (skipChr(state, '?') >= SKIP_OK) {
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	213f      	movs	r1, #63	@ 0x3f
 800297a:	0018      	movs	r0, r3
 800297c:	f7ff fe86 	bl	800268c <skipChr>
 8002980:	1e03      	subs	r3, r0, #0
 8002982:	dd03      	ble.n	800298c <scpiLex_ProgramHeader+0x40>
            token->type = SCPI_TOKEN_COMMON_QUERY_PROGRAM_HEADER;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2216      	movs	r2, #22
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	e02b      	b.n	80029e4 <scpiLex_ProgramHeader+0x98>
        } else {
            token->type = SCPI_TOKEN_COMMON_PROGRAM_HEADER;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2213      	movs	r2, #19
 8002990:	701a      	strb	r2, [r3, #0]
 8002992:	e027      	b.n	80029e4 <scpiLex_ProgramHeader+0x98>
        }
    } else if (res <= SKIP_INCOMPLETE) {
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	da03      	bge.n	80029a2 <scpiLex_ProgramHeader+0x56>
        token->type = SCPI_TOKEN_INCOMPLETE_COMMON_PROGRAM_HEADER;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2214      	movs	r2, #20
 800299e:	701a      	strb	r2, [r3, #0]
 80029a0:	e020      	b.n	80029e4 <scpiLex_ProgramHeader+0x98>
    } else if (res == SKIP_NONE) {
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d11d      	bne.n	80029e4 <scpiLex_ProgramHeader+0x98>
        res = skipCompoundProgramHeader(state);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f7ff ff91 	bl	80028d2 <skipCompoundProgramHeader>
 80029b0:	0003      	movs	r3, r0
 80029b2:	60fb      	str	r3, [r7, #12]

        if (res >= SKIP_OK) {
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	dd0e      	ble.n	80029d8 <scpiLex_ProgramHeader+0x8c>
            if (skipChr(state, '?') >= SKIP_OK) {
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	213f      	movs	r1, #63	@ 0x3f
 80029be:	0018      	movs	r0, r3
 80029c0:	f7ff fe64 	bl	800268c <skipChr>
 80029c4:	1e03      	subs	r3, r0, #0
 80029c6:	dd03      	ble.n	80029d0 <scpiLex_ProgramHeader+0x84>
                token->type = SCPI_TOKEN_COMPOUND_QUERY_PROGRAM_HEADER;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2215      	movs	r2, #21
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	e009      	b.n	80029e4 <scpiLex_ProgramHeader+0x98>
            } else {
                token->type = SCPI_TOKEN_COMPOUND_PROGRAM_HEADER;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2211      	movs	r2, #17
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e005      	b.n	80029e4 <scpiLex_ProgramHeader+0x98>
            }
        } else if (res <= SKIP_INCOMPLETE) {
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	da02      	bge.n	80029e4 <scpiLex_ProgramHeader+0x98>
            token->type = SCPI_TOKEN_INCOMPLETE_COMPOUND_PROGRAM_HEADER;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2212      	movs	r2, #18
 80029e2:	701a      	strb	r2, [r3, #0]
        }
    }

    if (token->type != SCPI_TOKEN_UNKNOWN) {
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b1a      	cmp	r3, #26
 80029ea:	d007      	beq.n	80029fc <scpiLex_ProgramHeader+0xb0>
        token->len = state->pos - token->ptr;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	1ad2      	subs	r2, r2, r3
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	e006      	b.n	8002a0a <scpiLex_ProgramHeader+0xbe>
    } else {
        token->len = 0;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
        state->pos = token->ptr;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	605a      	str	r2, [r3, #4]
    }

    return token->len;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
}
 8002a0e:	0018      	movs	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b004      	add	sp, #16
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <scpiLex_CharacterProgramData>:
 * Detect token "Character program data"
 * @param state
 * @param token
 * @return 
 */
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	605a      	str	r2, [r3, #4]

    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7ff fcef 	bl	8002410 <iseos>
 8002a32:	1e03      	subs	r3, r0, #0
 8002a34:	d12d      	bne.n	8002a92 <scpiLex_CharacterProgramData+0x7a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	4b21      	ldr	r3, [pc, #132]	@ (8002ac4 <scpiLex_CharacterProgramData+0xac>)
 8002a40:	18d3      	adds	r3, r2, r3
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	001a      	movs	r2, r3
 8002a46:	2303      	movs	r3, #3
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d022      	beq.n	8002a92 <scpiLex_CharacterProgramData+0x7a>
        state->pos++;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 8002a56:	e004      	b.n	8002a62 <scpiLex_CharacterProgramData+0x4a>
            state->pos++;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f7ff fcd3 	bl	8002410 <iseos>
 8002a6a:	1e03      	subs	r3, r0, #0
 8002a6c:	d111      	bne.n	8002a92 <scpiLex_CharacterProgramData+0x7a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	4b13      	ldr	r3, [pc, #76]	@ (8002ac4 <scpiLex_CharacterProgramData+0xac>)
 8002a78:	18d3      	adds	r3, r2, r3
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	001a      	movs	r2, r3
 8002a7e:	2307      	movs	r3, #7
 8002a80:	4013      	ands	r3, r2
 8002a82:	d1e9      	bne.n	8002a58 <scpiLex_CharacterProgramData+0x40>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	215f      	movs	r1, #95	@ 0x5f
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f7ff fce2 	bl	8002452 <ischr>
 8002a8e:	1e03      	subs	r3, r0, #0
 8002a90:	d1e2      	bne.n	8002a58 <scpiLex_CharacterProgramData+0x40>
        }
    }

    token->len = state->pos - token->ptr;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	1ad2      	subs	r2, r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	609a      	str	r2, [r3, #8]
    if (token->len > 0) {
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	dd03      	ble.n	8002ab0 <scpiLex_CharacterProgramData+0x98>
        token->type = SCPI_TOKEN_PROGRAM_MNEMONIC;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2209      	movs	r2, #9
 8002aac:	701a      	strb	r2, [r3, #0]
 8002aae:	e002      	b.n	8002ab6 <scpiLex_CharacterProgramData+0x9e>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	221a      	movs	r2, #26
 8002ab4:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
}
 8002aba:	0018      	movs	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b002      	add	sp, #8
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	46c0      	nop			@ (mov r8, r8)
 8002ac4:	0800ed18 	.word	0x0800ed18

08002ac8 <skipMantisa>:

/* 7.7.2 <DECIMAL NUMERIC PROGRAM DATA> */
static int skipMantisa(lex_state_t * state) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]

    skipPlusmn(state);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f7ff fd92 	bl	8002600 <skipPlusmn>

    someNumbers += skipNumbers(state);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f7ff fd66 	bl	80025b0 <skipNumbers>
 8002ae4:	0002      	movs	r2, r0
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	189b      	adds	r3, r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]

    if (skipChr(state, '.')) {
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	212e      	movs	r1, #46	@ 0x2e
 8002af0:	0018      	movs	r0, r3
 8002af2:	f7ff fdcb 	bl	800268c <skipChr>
 8002af6:	1e03      	subs	r3, r0, #0
 8002af8:	d007      	beq.n	8002b0a <skipMantisa+0x42>
        someNumbers += skipNumbers(state);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7ff fd57 	bl	80025b0 <skipNumbers>
 8002b02:	0002      	movs	r2, r0
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	189b      	adds	r3, r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
    }

    return someNumbers;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b004      	add	sp, #16
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <skipExponent>:

static int skipExponent(lex_state_t * state) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]

    if (!iseos(state) && isE(state->pos[0])) {
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	0018      	movs	r0, r3
 8002b24:	f7ff fc74 	bl	8002410 <iseos>
 8002b28:	1e03      	subs	r3, r0, #0
 8002b2a:	d11a      	bne.n	8002b62 <skipExponent+0x4e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	0018      	movs	r0, r3
 8002b34:	f7ff fce5 	bl	8002502 <isE>
 8002b38:	1e03      	subs	r3, r0, #0
 8002b3a:	d012      	beq.n	8002b62 <skipExponent+0x4e>
        state->pos++;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	605a      	str	r2, [r3, #4]

        skipWs(state);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f7ff fceb 	bl	8002524 <skipWs>

        skipPlusmn(state);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f7ff fd55 	bl	8002600 <skipPlusmn>

        someNumbers = skipNumbers(state);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f7ff fd29 	bl	80025b0 <skipNumbers>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	60fb      	str	r3, [r7, #12]
    }

    return someNumbers;
 8002b62:	68fb      	ldr	r3, [r7, #12]
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b004      	add	sp, #16
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <scpiLex_DecimalNumericProgramData>:
 * Detect token Decimal number
 * @param state
 * @param token
 * @return 
 */
int scpiLex_DecimalNumericProgramData(lex_state_t * state, scpi_token_t * token) {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
    char * rollback;
    token->ptr = state->pos;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	605a      	str	r2, [r3, #4]

    if (skipMantisa(state)) {
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7ff ffa1 	bl	8002ac8 <skipMantisa>
 8002b86:	1e03      	subs	r3, r0, #0
 8002b88:	d010      	beq.n	8002bac <scpiLex_DecimalNumericProgramData+0x40>
        rollback = state->pos;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	60fb      	str	r3, [r7, #12]
        skipWs(state);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	0018      	movs	r0, r3
 8002b94:	f7ff fcc6 	bl	8002524 <skipWs>
        if (!skipExponent(state)) {
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f7ff ffba 	bl	8002b14 <skipExponent>
 8002ba0:	1e03      	subs	r3, r0, #0
 8002ba2:	d107      	bne.n	8002bb4 <scpiLex_DecimalNumericProgramData+0x48>
            state->pos = rollback;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	e003      	b.n	8002bb4 <scpiLex_DecimalNumericProgramData+0x48>
        }
    } else {
        state->pos = token->ptr;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	605a      	str	r2, [r3, #4]
    }

    token->len = state->pos - token->ptr;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	1ad2      	subs	r2, r2, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	609a      	str	r2, [r3, #8]
    if (token->len > 0) {
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	dd03      	ble.n	8002bd2 <scpiLex_DecimalNumericProgramData+0x66>
        token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	220a      	movs	r2, #10
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	e002      	b.n	8002bd8 <scpiLex_DecimalNumericProgramData+0x6c>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	221a      	movs	r2, #26
 8002bd6:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b004      	add	sp, #16
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <scpiLex_SuffixProgramData>:

/* 7.7.3 <SUFFIX PROGRAM DATA> */
int scpiLex_SuffixProgramData(lex_state_t * state, scpi_token_t * token) {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	605a      	str	r2, [r3, #4]

    skipChr(state, '/');
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	212f      	movs	r1, #47	@ 0x2f
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7ff fd46 	bl	800268c <skipChr>

    /* TODO: strict parsing  : SLASH? (ALPHA+ (MINUS? DIGIT)?) ((SLASH | DOT) (ALPHA+ (MINUS? DIGIT)?))* */
    if (skipAlpha(state)) {
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	0018      	movs	r0, r3
 8002c04:	f7ff fd1a 	bl	800263c <skipAlpha>
 8002c08:	1e03      	subs	r3, r0, #0
 8002c0a:	d01c      	beq.n	8002c46 <scpiLex_SuffixProgramData+0x62>
        skipChr(state, '-');
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	212d      	movs	r1, #45	@ 0x2d
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7ff fd3b 	bl	800268c <skipChr>
        skipDigit(state);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f7ff fca5 	bl	8002568 <skipDigit>

        while (skipSlashDot(state)) {
 8002c1e:	e00c      	b.n	8002c3a <scpiLex_SuffixProgramData+0x56>
            skipAlpha(state);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	0018      	movs	r0, r3
 8002c24:	f7ff fd0a 	bl	800263c <skipAlpha>
            skipChr(state, '-');
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	212d      	movs	r1, #45	@ 0x2d
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f7ff fd2d 	bl	800268c <skipChr>
            skipDigit(state);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	0018      	movs	r0, r3
 8002c36:	f7ff fc97 	bl	8002568 <skipDigit>
        while (skipSlashDot(state)) {
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f7ff fd47 	bl	80026d0 <skipSlashDot>
 8002c42:	1e03      	subs	r3, r0, #0
 8002c44:	d1ec      	bne.n	8002c20 <scpiLex_SuffixProgramData+0x3c>
        }
    }

    token->len = state->pos - token->ptr;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	1ad2      	subs	r2, r2, r3
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	609a      	str	r2, [r3, #8]
    if ((token->len > 0)) {
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	dd03      	ble.n	8002c64 <scpiLex_SuffixProgramData+0x80>
        token->type = SCPI_TOKEN_SUFFIX_PROGRAM_DATA;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	220c      	movs	r2, #12
 8002c60:	701a      	strb	r2, [r3, #0]
 8002c62:	e009      	b.n	8002c78 <scpiLex_SuffixProgramData+0x94>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	221a      	movs	r2, #26
 8002c68:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
}
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b002      	add	sp, #8
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <skipHexNum>:

/* 7.7.4 <NONDECIMAL NUMERIC PROGRAM DATA> */
static int skipHexNum(lex_state_t * state) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 8002c90:	e007      	b.n	8002ca2 <skipHexNum+0x1e>
        state->pos++;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	605a      	str	r2, [r3, #4]
        someNumbers++;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f7ff fbb3 	bl	8002410 <iseos>
 8002caa:	1e03      	subs	r3, r0, #0
 8002cac:	d10a      	bne.n	8002cc4 <skipHexNum+0x40>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <skipHexNum+0x4c>)
 8002cb8:	18d3      	adds	r3, r2, r3
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	001a      	movs	r2, r3
 8002cbe:	2344      	movs	r3, #68	@ 0x44
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d1e6      	bne.n	8002c92 <skipHexNum+0xe>
    }
    return someNumbers;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
}
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b004      	add	sp, #16
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	46c0      	nop			@ (mov r8, r8)
 8002cd0:	0800ed18 	.word	0x0800ed18

08002cd4 <skipOctNum>:

static int skipOctNum(lex_state_t * state) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 8002ce0:	e007      	b.n	8002cf2 <skipOctNum+0x1e>
        state->pos++;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	605a      	str	r2, [r3, #4]
        someNumbers++;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7ff fb8b 	bl	8002410 <iseos>
 8002cfa:	1e03      	subs	r3, r0, #0
 8002cfc:	d107      	bne.n	8002d0e <skipOctNum+0x3a>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7ff fb60 	bl	80023ca <isqdigit>
 8002d0a:	1e03      	subs	r3, r0, #0
 8002d0c:	d1e9      	bne.n	8002ce2 <skipOctNum+0xe>
    }
    return someNumbers;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
}
 8002d10:	0018      	movs	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b004      	add	sp, #16
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <skipBinNum>:

static int skipBinNum(lex_state_t * state) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 8002d24:	e007      	b.n	8002d36 <skipBinNum+0x1e>
        state->pos++;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	605a      	str	r2, [r3, #4]
        someNumbers++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	3301      	adds	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f7ff fb69 	bl	8002410 <iseos>
 8002d3e:	1e03      	subs	r3, r0, #0
 8002d40:	d107      	bne.n	8002d52 <skipBinNum+0x3a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7ff fb2d 	bl	80023a8 <isbdigit>
 8002d4e:	1e03      	subs	r3, r0, #0
 8002d50:	d1e9      	bne.n	8002d26 <skipBinNum+0xe>
    }
    return someNumbers;
 8002d52:	68fb      	ldr	r3, [r7, #12]
}
 8002d54:	0018      	movs	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b004      	add	sp, #16
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <scpiLex_NondecimalNumericData>:
 * Detect token nondecimal number
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NondecimalNumericData(lex_state_t * state, scpi_token_t * token) {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
    int someNumbers = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
    token->ptr = state->pos;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	605a      	str	r2, [r3, #4]
    if (skipChr(state, '#')) {
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2123      	movs	r1, #35	@ 0x23
 8002d76:	0018      	movs	r0, r3
 8002d78:	f7ff fc88 	bl	800268c <skipChr>
 8002d7c:	1e03      	subs	r3, r0, #0
 8002d7e:	d049      	beq.n	8002e14 <scpiLex_NondecimalNumericData+0xb8>
        if (!iseos(state)) {
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	0018      	movs	r0, r3
 8002d84:	f7ff fb44 	bl	8002410 <iseos>
 8002d88:	1e03      	subs	r3, r0, #0
 8002d8a:	d143      	bne.n	8002e14 <scpiLex_NondecimalNumericData+0xb8>
            if (isH(state->pos[0])) {
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	0018      	movs	r0, r3
 8002d94:	f7ff fb82 	bl	800249c <isH>
 8002d98:	1e03      	subs	r3, r0, #0
 8002d9a:	d00e      	beq.n	8002dba <scpiLex_NondecimalNumericData+0x5e>
                state->pos++;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	605a      	str	r2, [r3, #4]
                someNumbers = skipHexNum(state);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7ff ff6b 	bl	8002c84 <skipHexNum>
 8002dae:	0003      	movs	r3, r0
 8002db0:	60fb      	str	r3, [r7, #12]
                token->type = SCPI_TOKEN_HEXNUM;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2206      	movs	r2, #6
 8002db6:	701a      	strb	r2, [r3, #0]
 8002db8:	e02c      	b.n	8002e14 <scpiLex_NondecimalNumericData+0xb8>
            } else if (isQ(state->pos[0])) {
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f7ff fb8d 	bl	80024e0 <isQ>
 8002dc6:	1e03      	subs	r3, r0, #0
 8002dc8:	d00e      	beq.n	8002de8 <scpiLex_NondecimalNumericData+0x8c>
                state->pos++;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	605a      	str	r2, [r3, #4]
                someNumbers = skipOctNum(state);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f7ff ff7c 	bl	8002cd4 <skipOctNum>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	60fb      	str	r3, [r7, #12]
                token->type = SCPI_TOKEN_OCTNUM;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	2207      	movs	r2, #7
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	e015      	b.n	8002e14 <scpiLex_NondecimalNumericData+0xb8>
            } else if (isB(state->pos[0])) {
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f7ff fb65 	bl	80024be <isB>
 8002df4:	1e03      	subs	r3, r0, #0
 8002df6:	d00d      	beq.n	8002e14 <scpiLex_NondecimalNumericData+0xb8>
                state->pos++;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	605a      	str	r2, [r3, #4]
                someNumbers = skipBinNum(state);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f7ff ff87 	bl	8002d18 <skipBinNum>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	60fb      	str	r3, [r7, #12]
                token->type = SCPI_TOKEN_BINNUM;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2208      	movs	r2, #8
 8002e12:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (someNumbers) {
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00c      	beq.n	8002e34 <scpiLex_NondecimalNumericData+0xd8>
        token->ptr += 2; /* ignore number prefix */
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	1c9a      	adds	r2, r3, #2
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	605a      	str	r2, [r3, #4]
        token->len = state->pos - token->ptr;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	1ad2      	subs	r2, r2, r3
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	e009      	b.n	8002e48 <scpiLex_NondecimalNumericData+0xec>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	221a      	movs	r2, #26
 8002e38:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
    }
    return token->len > 0 ? token->len + 2 : 0;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	dd03      	ble.n	8002e58 <scpiLex_NondecimalNumericData+0xfc>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	3302      	adds	r3, #2
 8002e56:	e000      	b.n	8002e5a <scpiLex_NondecimalNumericData+0xfe>
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b004      	add	sp, #16
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <isascii7bit>:

/* 7.7.5 <STRING PROGRAM DATA> */
static int isascii7bit(int c) {
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
    return (c >= 0) && (c <= 0x7f);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	db04      	blt.n	8002e7a <isascii7bit+0x18>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e74:	dc01      	bgt.n	8002e7a <isascii7bit+0x18>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <isascii7bit+0x1a>
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <skipQuoteProgramData>:

static void skipQuoteProgramData(lex_state_t * state, char quote) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	000a      	movs	r2, r1
 8002e8e:	1cfb      	adds	r3, r7, #3
 8002e90:	701a      	strb	r2, [r3, #0]
    while (!iseos(state)) {
 8002e92:	e03f      	b.n	8002f14 <skipQuoteProgramData+0x90>
        if (isascii7bit(state->pos[0]) && !ischr(state, quote)) {
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f7ff ffe1 	bl	8002e62 <isascii7bit>
 8002ea0:	1e03      	subs	r3, r0, #0
 8002ea2:	d00e      	beq.n	8002ec2 <skipQuoteProgramData+0x3e>
 8002ea4:	1cfb      	adds	r3, r7, #3
 8002ea6:	781a      	ldrb	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	0011      	movs	r1, r2
 8002eac:	0018      	movs	r0, r3
 8002eae:	f7ff fad0 	bl	8002452 <ischr>
 8002eb2:	1e03      	subs	r3, r0, #0
 8002eb4:	d105      	bne.n	8002ec2 <skipQuoteProgramData+0x3e>
            state->pos++;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	e028      	b.n	8002f14 <skipQuoteProgramData+0x90>
        } else if (ischr(state, quote)) {
 8002ec2:	1cfb      	adds	r3, r7, #3
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0011      	movs	r1, r2
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f7ff fac1 	bl	8002452 <ischr>
 8002ed0:	1e03      	subs	r3, r0, #0
 8002ed2:	d026      	beq.n	8002f22 <skipQuoteProgramData+0x9e>
            state->pos++;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	605a      	str	r2, [r3, #4]
            if (!iseos(state) && ischr(state, quote)) {
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f7ff fa95 	bl	8002410 <iseos>
 8002ee6:	1e03      	subs	r3, r0, #0
 8002ee8:	d10e      	bne.n	8002f08 <skipQuoteProgramData+0x84>
 8002eea:	1cfb      	adds	r3, r7, #3
 8002eec:	781a      	ldrb	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	0011      	movs	r1, r2
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f7ff faad 	bl	8002452 <ischr>
 8002ef8:	1e03      	subs	r3, r0, #0
 8002efa:	d005      	beq.n	8002f08 <skipQuoteProgramData+0x84>
                state->pos++;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	e005      	b.n	8002f14 <skipQuoteProgramData+0x90>
            } else {
                state->pos--;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	1e5a      	subs	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	605a      	str	r2, [r3, #4]
                break;
 8002f12:	e007      	b.n	8002f24 <skipQuoteProgramData+0xa0>
    while (!iseos(state)) {
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	0018      	movs	r0, r3
 8002f18:	f7ff fa7a 	bl	8002410 <iseos>
 8002f1c:	1e03      	subs	r3, r0, #0
 8002f1e:	d0b9      	beq.n	8002e94 <skipQuoteProgramData+0x10>
            }
        } else {
            break;
        }
    }
}
 8002f20:	e000      	b.n	8002f24 <skipQuoteProgramData+0xa0>
            break;
 8002f22:	46c0      	nop			@ (mov r8, r8)
}
 8002f24:	46c0      	nop			@ (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <skipDoubleQuoteProgramData>:

static void skipDoubleQuoteProgramData(lex_state_t * state) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
    skipQuoteProgramData(state, '"');
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2122      	movs	r1, #34	@ 0x22
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f7ff ffa3 	bl	8002e84 <skipQuoteProgramData>
}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b002      	add	sp, #8
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <skipSingleQuoteProgramData>:

static void skipSingleQuoteProgramData(lex_state_t * state) {
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
    skipQuoteProgramData(state, '\'');
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2127      	movs	r1, #39	@ 0x27
 8002f52:	0018      	movs	r0, r3
 8002f54:	f7ff ff96 	bl	8002e84 <skipQuoteProgramData>
}
 8002f58:	46c0      	nop			@ (mov r8, r8)
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b002      	add	sp, #8
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <scpiLex_StringProgramData>:
 * Detect token String data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	605a      	str	r2, [r3, #4]

    if (!iseos(state)) {
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	0018      	movs	r0, r3
 8002f76:	f7ff fa4b 	bl	8002410 <iseos>
 8002f7a:	1e03      	subs	r3, r0, #0
 8002f7c:	d162      	bne.n	8003044 <scpiLex_StringProgramData+0xe4>
        if (ischr(state, '"')) {
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2122      	movs	r1, #34	@ 0x22
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7ff fa65 	bl	8002452 <ischr>
 8002f88:	1e03      	subs	r3, r0, #0
 8002f8a:	d02a      	beq.n	8002fe2 <scpiLex_StringProgramData+0x82>
            state->pos++;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	605a      	str	r2, [r3, #4]
            token->type = SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	220f      	movs	r2, #15
 8002f9a:	701a      	strb	r2, [r3, #0]
            skipDoubleQuoteProgramData(state);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f7ff ffc4 	bl	8002f2c <skipDoubleQuoteProgramData>
            if (!iseos(state) && ischr(state, '"')) {
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f7ff fa32 	bl	8002410 <iseos>
 8002fac:	1e03      	subs	r3, r0, #0
 8002fae:	d113      	bne.n	8002fd8 <scpiLex_StringProgramData+0x78>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2122      	movs	r1, #34	@ 0x22
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f7ff fa4c 	bl	8002452 <ischr>
 8002fba:	1e03      	subs	r3, r0, #0
 8002fbc:	d00c      	beq.n	8002fd8 <scpiLex_StringProgramData+0x78>
                state->pos++;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	605a      	str	r2, [r3, #4]
                token->len = state->pos - token->ptr;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	1ad2      	subs	r2, r2, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	609a      	str	r2, [r3, #8]
 8002fd6:	e035      	b.n	8003044 <scpiLex_StringProgramData+0xe4>
            } else {
                state->pos = token->ptr;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	e030      	b.n	8003044 <scpiLex_StringProgramData+0xe4>
            }
        } else if (ischr(state, '\'')) {
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2127      	movs	r1, #39	@ 0x27
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f7ff fa33 	bl	8002452 <ischr>
 8002fec:	1e03      	subs	r3, r0, #0
 8002fee:	d029      	beq.n	8003044 <scpiLex_StringProgramData+0xe4>
            state->pos++;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	605a      	str	r2, [r3, #4]
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	220e      	movs	r2, #14
 8002ffe:	701a      	strb	r2, [r3, #0]
            skipSingleQuoteProgramData(state);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	0018      	movs	r0, r3
 8003004:	f7ff ff9f 	bl	8002f46 <skipSingleQuoteProgramData>
            if (!iseos(state) && ischr(state, '\'')) {
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	0018      	movs	r0, r3
 800300c:	f7ff fa00 	bl	8002410 <iseos>
 8003010:	1e03      	subs	r3, r0, #0
 8003012:	d113      	bne.n	800303c <scpiLex_StringProgramData+0xdc>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2127      	movs	r1, #39	@ 0x27
 8003018:	0018      	movs	r0, r3
 800301a:	f7ff fa1a 	bl	8002452 <ischr>
 800301e:	1e03      	subs	r3, r0, #0
 8003020:	d00c      	beq.n	800303c <scpiLex_StringProgramData+0xdc>
                state->pos++;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	605a      	str	r2, [r3, #4]
                token->len = state->pos - token->ptr;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	1ad2      	subs	r2, r2, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	609a      	str	r2, [r3, #8]
 800303a:	e003      	b.n	8003044 <scpiLex_StringProgramData+0xe4>
            } else {
                state->pos = token->ptr;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	605a      	str	r2, [r3, #4]
            }
        }
    }

    token->len = state->pos - token->ptr;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	1ad2      	subs	r2, r2, r3
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	609a      	str	r2, [r3, #8]

    if ((token->len > 0)) {
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	dc09      	bgt.n	800306e <scpiLex_StringProgramData+0x10e>
        /* token->ptr++;
         * token->len -= 2; */
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	221a      	movs	r2, #26
 800305e:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
    }

    return token->len > 0 ? token->len : 0;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	da00      	bge.n	8003078 <scpiLex_StringProgramData+0x118>
 8003076:	2300      	movs	r3, #0
}
 8003078:	0018      	movs	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	b002      	add	sp, #8
 800307e:	bd80      	pop	{r7, pc}

08003080 <isNonzeroDigit>:

/* 7.7.6 <ARBITRARY BLOCK PROGRAM DATA> */
static int isNonzeroDigit(int c) {
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
    return isdigit(c) && (c != '0');
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	4b08      	ldr	r3, [pc, #32]	@ (80030b0 <isNonzeroDigit+0x30>)
 800308e:	18d3      	adds	r3, r2, r3
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	001a      	movs	r2, r3
 8003094:	2304      	movs	r3, #4
 8003096:	4013      	ands	r3, r2
 8003098:	d004      	beq.n	80030a4 <isNonzeroDigit+0x24>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b30      	cmp	r3, #48	@ 0x30
 800309e:	d001      	beq.n	80030a4 <isNonzeroDigit+0x24>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <isNonzeroDigit+0x26>
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	0018      	movs	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b002      	add	sp, #8
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	0800ed18 	.word	0x0800ed18

080030b4 <scpiLex_ArbitraryBlockProgramData>:
 * Detect token Block Data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
    int i;
    int arbitraryBlockLength = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
    const char * ptr = state->pos;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	60bb      	str	r3, [r7, #8]
    int validData = -1;
 80030c8:	2301      	movs	r3, #1
 80030ca:	425b      	negs	r3, r3
 80030cc:	60fb      	str	r3, [r7, #12]
    token->ptr = state->pos;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	605a      	str	r2, [r3, #4]

    if (skipChr(state, '#')) {
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2123      	movs	r1, #35	@ 0x23
 80030da:	0018      	movs	r0, r3
 80030dc:	f7ff fad6 	bl	800268c <skipChr>
 80030e0:	1e03      	subs	r3, r0, #0
 80030e2:	d100      	bne.n	80030e6 <scpiLex_ArbitraryBlockProgramData+0x32>
 80030e4:	e076      	b.n	80031d4 <scpiLex_ArbitraryBlockProgramData+0x120>
        if (!iseos(state) && isNonzeroDigit(state->pos[0])) {
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f7ff f991 	bl	8002410 <iseos>
 80030ee:	1e03      	subs	r3, r0, #0
 80030f0:	d166      	bne.n	80031c0 <scpiLex_ArbitraryBlockProgramData+0x10c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7ff ffc1 	bl	8003080 <isNonzeroDigit>
 80030fe:	1e03      	subs	r3, r0, #0
 8003100:	d05e      	beq.n	80031c0 <scpiLex_ArbitraryBlockProgramData+0x10c>
            /* Get number of digits */
            i = state->pos[0] - '0';
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	3b30      	subs	r3, #48	@ 0x30
 800310a:	617b      	str	r3, [r7, #20]
            state->pos++;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	605a      	str	r2, [r3, #4]

            for (; i > 0; i--) {
 8003116:	e025      	b.n	8003164 <scpiLex_ArbitraryBlockProgramData+0xb0>
                if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	0018      	movs	r0, r3
 800311c:	f7ff f978 	bl	8002410 <iseos>
 8003120:	1e03      	subs	r3, r0, #0
 8003122:	d122      	bne.n	800316a <scpiLex_ArbitraryBlockProgramData+0xb6>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	4b40      	ldr	r3, [pc, #256]	@ (8003230 <scpiLex_ArbitraryBlockProgramData+0x17c>)
 800312e:	18d3      	adds	r3, r2, r3
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	001a      	movs	r2, r3
 8003134:	2304      	movs	r3, #4
 8003136:	4013      	ands	r3, r2
 8003138:	d017      	beq.n	800316a <scpiLex_ArbitraryBlockProgramData+0xb6>
                    arbitraryBlockLength *= 10;
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	0013      	movs	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	189b      	adds	r3, r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	613b      	str	r3, [r7, #16]
                    arbitraryBlockLength += (state->pos[0] - '0');
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	3b30      	subs	r3, #48	@ 0x30
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	18d3      	adds	r3, r2, r3
 8003152:	613b      	str	r3, [r7, #16]
                    state->pos++;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	605a      	str	r2, [r3, #4]
            for (; i > 0; i--) {
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	3b01      	subs	r3, #1
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	dcd6      	bgt.n	8003118 <scpiLex_ArbitraryBlockProgramData+0x64>
                } else {
                    break;
                }
            }

            if (i == 0) {
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d11e      	bne.n	80031ae <scpiLex_ArbitraryBlockProgramData+0xfa>
                state->pos += arbitraryBlockLength;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	18d2      	adds	r2, r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	605a      	str	r2, [r3, #4]
                if ((state->buffer + state->len) >= (state->pos)) {
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	18d2      	adds	r2, r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	429a      	cmp	r2, r3
 800318c:	d30c      	bcc.n	80031a8 <scpiLex_ArbitraryBlockProgramData+0xf4>
                    token->ptr = state->pos - arbitraryBlockLength;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	425b      	negs	r3, r3
 8003196:	18d2      	adds	r2, r2, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	605a      	str	r2, [r3, #4]
                    token->len = arbitraryBlockLength;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	609a      	str	r2, [r3, #8]
                    validData = 1;
 80031a2:	2301      	movs	r3, #1
 80031a4:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 80031a6:	e014      	b.n	80031d2 <scpiLex_ArbitraryBlockProgramData+0x11e>
                } else {
                    validData = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 80031ac:	e011      	b.n	80031d2 <scpiLex_ArbitraryBlockProgramData+0x11e>
                }
            } else if (iseos(state)) {
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7ff f92d 	bl	8002410 <iseos>
 80031b6:	1e03      	subs	r3, r0, #0
 80031b8:	d00b      	beq.n	80031d2 <scpiLex_ArbitraryBlockProgramData+0x11e>
                validData = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 80031be:	e008      	b.n	80031d2 <scpiLex_ArbitraryBlockProgramData+0x11e>
            }
        } else if (iseos(state)) {
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f7ff f924 	bl	8002410 <iseos>
 80031c8:	1e03      	subs	r3, r0, #0
 80031ca:	d003      	beq.n	80031d4 <scpiLex_ArbitraryBlockProgramData+0x120>
            validData = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	e000      	b.n	80031d4 <scpiLex_ArbitraryBlockProgramData+0x120>
            if (i == 0) {
 80031d2:	46c0      	nop			@ (mov r8, r8)
        }
    }

    if (validData == 1) {
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d103      	bne.n	80031e2 <scpiLex_ArbitraryBlockProgramData+0x12e>
        /* valid */
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	220d      	movs	r2, #13
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	e01a      	b.n	8003218 <scpiLex_ArbitraryBlockProgramData+0x164>
    } else if (validData == 0) {
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10d      	bne.n	8003204 <scpiLex_ArbitraryBlockProgramData+0x150>
        /* incomplete */
        token->type = SCPI_TOKEN_UNKNOWN;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	221a      	movs	r2, #26
 80031ec:	701a      	strb	r2, [r3, #0]
        token->len = 0;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
        state->pos = state->buffer + state->len;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	18d2      	adds	r2, r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	e009      	b.n	8003218 <scpiLex_ArbitraryBlockProgramData+0x164>
    } else {
        /* invalid */
        token->type = SCPI_TOKEN_UNKNOWN;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	221a      	movs	r2, #26
 8003208:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
    }

    return token->len + (token->ptr - ptr);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	1acb      	subs	r3, r1, r3
 8003224:	18d3      	adds	r3, r2, r3
}
 8003226:	0018      	movs	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	b006      	add	sp, #24
 800322c:	bd80      	pop	{r7, pc}
 800322e:	46c0      	nop			@ (mov r8, r8)
 8003230:	0800ed18 	.word	0x0800ed18

08003234 <isProgramExpression>:

/* 7.7.7 <EXPRESSION PROGRAM DATA> */
static int isProgramExpression(int c) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
    if ((c >= 0x20) && (c <= 0x7e)) {
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b1f      	cmp	r3, #31
 8003240:	dd16      	ble.n	8003270 <isProgramExpression+0x3c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b7e      	cmp	r3, #126	@ 0x7e
 8003246:	dc13      	bgt.n	8003270 <isProgramExpression+0x3c>
        if ((c != '"')
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b22      	cmp	r3, #34	@ 0x22
 800324c:	d010      	beq.n	8003270 <isProgramExpression+0x3c>
                && (c != '#')
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b23      	cmp	r3, #35	@ 0x23
 8003252:	d00d      	beq.n	8003270 <isProgramExpression+0x3c>
                && (c != '\'')
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b27      	cmp	r3, #39	@ 0x27
 8003258:	d00a      	beq.n	8003270 <isProgramExpression+0x3c>
                && (c != '(')
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b28      	cmp	r3, #40	@ 0x28
 800325e:	d007      	beq.n	8003270 <isProgramExpression+0x3c>
                && (c != ')')
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b29      	cmp	r3, #41	@ 0x29
 8003264:	d004      	beq.n	8003270 <isProgramExpression+0x3c>
                && (c != ';')) {
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b3b      	cmp	r3, #59	@ 0x3b
 800326a:	d001      	beq.n	8003270 <isProgramExpression+0x3c>
            return 1;
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <isProgramExpression+0x3e>
        }
    }

    return 0;
 8003270:	2300      	movs	r3, #0
}
 8003272:	0018      	movs	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	b002      	add	sp, #8
 8003278:	bd80      	pop	{r7, pc}

0800327a <skipProgramExpression>:

static void skipProgramExpression(lex_state_t * state) {
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 8003282:	e004      	b.n	800328e <skipProgramExpression+0x14>
        state->pos++;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	605a      	str	r2, [r3, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	0018      	movs	r0, r3
 8003292:	f7ff f8bd 	bl	8002410 <iseos>
 8003296:	1e03      	subs	r3, r0, #0
 8003298:	d107      	bne.n	80032aa <skipProgramExpression+0x30>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f7ff ffc7 	bl	8003234 <isProgramExpression>
 80032a6:	1e03      	subs	r3, r0, #0
 80032a8:	d1ec      	bne.n	8003284 <skipProgramExpression+0xa>
    }
}
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b002      	add	sp, #8
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <scpiLex_ProgramExpression>:
 * Detect token Expression
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramExpression(lex_state_t * state, scpi_token_t * token) {
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	605a      	str	r2, [r3, #4]

    if (!iseos(state) && ischr(state, '(')) {
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7ff f8a2 	bl	8002410 <iseos>
 80032cc:	1e03      	subs	r3, r0, #0
 80032ce:	d12c      	bne.n	800332a <scpiLex_ProgramExpression+0x78>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2128      	movs	r1, #40	@ 0x28
 80032d4:	0018      	movs	r0, r3
 80032d6:	f7ff f8bc 	bl	8002452 <ischr>
 80032da:	1e03      	subs	r3, r0, #0
 80032dc:	d025      	beq.n	800332a <scpiLex_ProgramExpression+0x78>
        state->pos++;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	605a      	str	r2, [r3, #4]
        skipProgramExpression(state);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	0018      	movs	r0, r3
 80032ec:	f7ff ffc5 	bl	800327a <skipProgramExpression>

        if (!iseos(state) && ischr(state, ')')) {
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7ff f88c 	bl	8002410 <iseos>
 80032f8:	1e03      	subs	r3, r0, #0
 80032fa:	d113      	bne.n	8003324 <scpiLex_ProgramExpression+0x72>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2129      	movs	r1, #41	@ 0x29
 8003300:	0018      	movs	r0, r3
 8003302:	f7ff f8a6 	bl	8002452 <ischr>
 8003306:	1e03      	subs	r3, r0, #0
 8003308:	d00c      	beq.n	8003324 <scpiLex_ProgramExpression+0x72>
            state->pos++;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	605a      	str	r2, [r3, #4]
            token->len = state->pos - token->ptr;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	1ad2      	subs	r2, r2, r3
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	e002      	b.n	800332a <scpiLex_ProgramExpression+0x78>
        } else {
            token->len = 0;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
        }
    }

    if ((token->len > 0)) {
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	dd03      	ble.n	800333a <scpiLex_ProgramExpression+0x88>
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2210      	movs	r2, #16
 8003336:	701a      	strb	r2, [r3, #0]
 8003338:	e009      	b.n	800334e <scpiLex_ProgramExpression+0x9c>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	221a      	movs	r2, #26
 800333e:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
}
 8003352:	0018      	movs	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	b002      	add	sp, #8
 8003358:	bd80      	pop	{r7, pc}

0800335a <scpiLex_Comma>:
 * Detect token comma
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Comma(lex_state_t * state, scpi_token_t * token) {
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ',')) {
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	212c      	movs	r1, #44	@ 0x2c
 8003370:	0018      	movs	r0, r3
 8003372:	f7ff f98b 	bl	800268c <skipChr>
 8003376:	1e03      	subs	r3, r0, #0
 8003378:	d006      	beq.n	8003388 <scpiLex_Comma+0x2e>
        token->len = 1;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2201      	movs	r2, #1
 800337e:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_COMMA;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	e005      	b.n	8003394 <scpiLex_Comma+0x3a>
    } else {
        token->len = 0;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	221a      	movs	r2, #26
 8003392:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
}
 8003398:	0018      	movs	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	b002      	add	sp, #8
 800339e:	bd80      	pop	{r7, pc}

080033a0 <scpiLex_Semicolon>:
 * Detect token semicolon
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Semicolon(lex_state_t * state, scpi_token_t * token) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ';')) {
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	213b      	movs	r1, #59	@ 0x3b
 80033b6:	0018      	movs	r0, r3
 80033b8:	f7ff f968 	bl	800268c <skipChr>
 80033bc:	1e03      	subs	r3, r0, #0
 80033be:	d006      	beq.n	80033ce <scpiLex_Semicolon+0x2e>
        token->len = 1;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2201      	movs	r2, #1
 80033c4:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_SEMICOLON;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2201      	movs	r2, #1
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	e005      	b.n	80033da <scpiLex_Semicolon+0x3a>
    } else {
        token->len = 0;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2200      	movs	r2, #0
 80033d2:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	221a      	movs	r2, #26
 80033d8:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
}
 80033de:	0018      	movs	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b002      	add	sp, #8
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <scpiLex_Colon>:
 * Detect token colon
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Colon(lex_state_t * state, scpi_token_t * token) {
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ':')) {
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	213a      	movs	r1, #58	@ 0x3a
 80033fc:	0018      	movs	r0, r3
 80033fe:	f7ff f945 	bl	800268c <skipChr>
 8003402:	1e03      	subs	r3, r0, #0
 8003404:	d006      	beq.n	8003414 <scpiLex_Colon+0x2e>
        token->len = 1;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2201      	movs	r2, #1
 800340a:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_COLON;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2202      	movs	r2, #2
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	e005      	b.n	8003420 <scpiLex_Colon+0x3a>
    } else {
        token->len = 0;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2200      	movs	r2, #0
 8003418:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	221a      	movs	r2, #26
 800341e:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
}
 8003424:	0018      	movs	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	b002      	add	sp, #8
 800342a:	bd80      	pop	{r7, pc}

0800342c <scpiLex_SpecificCharacter>:
 * Detect specified character
 * @param state
 * @param token
 * @return 
 */
int scpiLex_SpecificCharacter(lex_state_t * state, scpi_token_t * token, char chr) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	1dfb      	adds	r3, r7, #7
 8003438:	701a      	strb	r2, [r3, #0]
    token->ptr = state->pos;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	605a      	str	r2, [r3, #4]

    if (skipChr(state, chr)) {
 8003442:	1dfb      	adds	r3, r7, #7
 8003444:	781a      	ldrb	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	0011      	movs	r1, r2
 800344a:	0018      	movs	r0, r3
 800344c:	f7ff f91e 	bl	800268c <skipChr>
 8003450:	1e03      	subs	r3, r0, #0
 8003452:	d006      	beq.n	8003462 <scpiLex_SpecificCharacter+0x36>
        token->len = 1;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2201      	movs	r2, #1
 8003458:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_SPECIFIC_CHARACTER;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2203      	movs	r2, #3
 800345e:	701a      	strb	r2, [r3, #0]
 8003460:	e005      	b.n	800346e <scpiLex_SpecificCharacter+0x42>
    } else {
        token->len = 0;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2200      	movs	r2, #0
 8003466:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	221a      	movs	r2, #26
 800346c:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	689b      	ldr	r3, [r3, #8]
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b004      	add	sp, #16
 8003478:	bd80      	pop	{r7, pc}

0800347a <scpiLex_NewLine>:
 * Detect token New line
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NewLine(lex_state_t * state, scpi_token_t * token) {
 800347a:	b580      	push	{r7, lr}
 800347c:	b082      	sub	sp, #8
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	605a      	str	r2, [r3, #4]

    skipChr(state, '\r');
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	210d      	movs	r1, #13
 8003490:	0018      	movs	r0, r3
 8003492:	f7ff f8fb 	bl	800268c <skipChr>
    skipChr(state, '\n');
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	210a      	movs	r1, #10
 800349a:	0018      	movs	r0, r3
 800349c:	f7ff f8f6 	bl	800268c <skipChr>

    token->len = state->pos - token->ptr;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	1ad2      	subs	r2, r2, r3
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	609a      	str	r2, [r3, #8]

    if ((token->len > 0)) {
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	dd03      	ble.n	80034be <scpiLex_NewLine+0x44>
        token->type = SCPI_TOKEN_NL;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2205      	movs	r2, #5
 80034ba:	701a      	strb	r2, [r3, #0]
 80034bc:	e009      	b.n	80034d2 <scpiLex_NewLine+0x58>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	221a      	movs	r2, #26
 80034c2:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	605a      	str	r2, [r3, #4]
        token->len = 0;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	2200      	movs	r2, #0
 80034d0:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
}
 80034d6:	0018      	movs	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	b002      	add	sp, #8
 80034dc:	bd80      	pop	{r7, pc}

080034de <SCPI_StubQ>:
/**
 * Query command stub function
 * @param context
 * @return
 */
scpi_result_t SCPI_StubQ(scpi_t * context) {
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, 0);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2100      	movs	r1, #0
 80034ea:	0018      	movs	r0, r3
 80034ec:	f000 fbf4 	bl	8003cd8 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 80034f0:	2301      	movs	r3, #1
}
 80034f2:	0018      	movs	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b002      	add	sp, #8
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
    SCPI_ResultMnemonic(context, SCPI_STD_VERSION_REVISION);
 8003504:	4905      	ldr	r1, [pc, #20]	@ (800351c <SCPI_SystemVersionQ+0x20>)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2206      	movs	r2, #6
 800350a:	0018      	movs	r0, r3
 800350c:	f000 fb50 	bl	8003bb0 <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 8003510:	2301      	movs	r3, #1
}
 8003512:	0018      	movs	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	b002      	add	sp, #8
 8003518:	bd80      	pop	{r7, pc}
 800351a:	46c0      	nop			@ (mov r8, r8)
 800351c:	0800e5a8 	.word	0x0800e5a8

08003520 <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
    scpi_error_t error;
    SCPI_ErrorPop(context, &error);
 8003528:	240c      	movs	r4, #12
 800352a:	193a      	adds	r2, r7, r4
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	0011      	movs	r1, r2
 8003530:	0018      	movs	r0, r3
 8003532:	f7fe f823 	bl	800157c <SCPI_ErrorPop>
    SCPI_ResultError(context, &error);
 8003536:	193a      	adds	r2, r7, r4
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	0011      	movs	r1, r2
 800353c:	0018      	movs	r0, r3
 800353e:	f000 fc1d 	bl	8003d7c <SCPI_ResultError>
#if USE_DEVICE_DEPENDENT_ERROR_INFORMATION
    SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
#endif
    return SCPI_RES_OK;
 8003542:	2301      	movs	r3, #1
}
 8003544:	0018      	movs	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	b005      	add	sp, #20
 800354a:	bd90      	pop	{r4, r7, pc}

0800354c <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_ErrorCount(context));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	0018      	movs	r0, r3
 8003558:	f7fe f830 	bl	80015bc <SCPI_ErrorCount>
 800355c:	0002      	movs	r2, r0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	0011      	movs	r1, r2
 8003562:	0018      	movs	r0, r3
 8003564:	f000 fbb8 	bl	8003cd8 <SCPI_ResultInt32>

    return SCPI_RES_OK;
 8003568:	2301      	movs	r3, #1
}
 800356a:	0018      	movs	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	b002      	add	sp, #8
 8003570:	bd80      	pop	{r7, pc}

08003572 <SCPI_StatusQuestionableEventQ>:
/**
 * STATus:QUEStionable[:EVENt]?
 * @param context
 * @return
 */
scpi_result_t SCPI_StatusQuestionableEventQ(scpi_t * context) {
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
    /* return value */
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_QUES));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2107      	movs	r1, #7
 800357e:	0018      	movs	r0, r3
 8003580:	f7fe fc6b 	bl	8001e5a <SCPI_RegGet>
 8003584:	0003      	movs	r3, r0
 8003586:	001a      	movs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0011      	movs	r1, r2
 800358c:	0018      	movs	r0, r3
 800358e:	f000 fba3 	bl	8003cd8 <SCPI_ResultInt32>

    /* clear register */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	2107      	movs	r1, #7
 8003598:	0018      	movs	r0, r3
 800359a:	f7fe fca1 	bl	8001ee0 <SCPI_RegSet>

    return SCPI_RES_OK;
 800359e:	2301      	movs	r3, #1
}
 80035a0:	0018      	movs	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b002      	add	sp, #8
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <SCPI_StatusQuestionableEnableQ>:
/**
 * STATus:QUEStionable:ENABle?
 * @param context
 * @return
 */
scpi_result_t SCPI_StatusQuestionableEnableQ(scpi_t * context) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
    /* return value */
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_QUESE));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2108      	movs	r1, #8
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7fe fc50 	bl	8001e5a <SCPI_RegGet>
 80035ba:	0003      	movs	r3, r0
 80035bc:	001a      	movs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	0011      	movs	r1, r2
 80035c2:	0018      	movs	r0, r3
 80035c4:	f000 fb88 	bl	8003cd8 <SCPI_ResultInt32>

    return SCPI_RES_OK;
 80035c8:	2301      	movs	r3, #1
}
 80035ca:	0018      	movs	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b002      	add	sp, #8
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <SCPI_StatusQuestionableEnable>:
/**
 * STATus:QUEStionable:ENABle
 * @param context
 * @return
 */
scpi_result_t SCPI_StatusQuestionableEnable(scpi_t * context) {
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
    int32_t new_QUESE;
    if (SCPI_ParamInt32(context, &new_QUESE, TRUE)) {
 80035da:	230c      	movs	r3, #12
 80035dc:	18f9      	adds	r1, r7, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	0018      	movs	r0, r3
 80035e4:	f000 fef0 	bl	80043c8 <SCPI_ParamInt32>
 80035e8:	1e03      	subs	r3, r0, #0
 80035ea:	d006      	beq.n	80035fa <SCPI_StatusQuestionableEnable+0x28>
        SCPI_RegSet(context, SCPI_REG_QUESE, (scpi_reg_val_t) new_QUESE);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2108      	movs	r1, #8
 80035f4:	0018      	movs	r0, r3
 80035f6:	f7fe fc73 	bl	8001ee0 <SCPI_RegSet>
    }
    return SCPI_RES_OK;
 80035fa:	2301      	movs	r3, #1
}
 80035fc:	0018      	movs	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	b004      	add	sp, #16
 8003602:	bd80      	pop	{r7, pc}

08003604 <SCPI_StatusPreset>:
/**
 * STATus:PRESet
 * @param context
 * @return
 */
scpi_result_t SCPI_StatusPreset(scpi_t * context) {
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
    /* clear STATUS:... */
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	2107      	movs	r1, #7
 8003612:	0018      	movs	r0, r3
 8003614:	f7fe fc64 	bl	8001ee0 <SCPI_RegSet>
    return SCPI_RES_OK;
 8003618:	2301      	movs	r3, #1
}
 800361a:	0018      	movs	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	b002      	add	sp, #8
 8003620:	bd80      	pop	{r7, pc}

08003622 <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
    if (len > 0) {
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <writeData+0x24>
        return context->interface->write(context, data, len);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	4798      	blx	r3
 8003642:	0003      	movs	r3, r0
 8003644:	e000      	b.n	8003648 <writeData+0x26>
    } else {
        return 0;
 8003646:	2300      	movs	r3, #0
    }
}
 8003648:	0018      	movs	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	b004      	add	sp, #16
 800364e:	bd80      	pop	{r7, pc}

08003650 <flushData>:
/**
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
    if (context && context->interface && context->interface->flush) {
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d010      	beq.n	8003680 <flushData+0x30>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00c      	beq.n	8003680 <flushData+0x30>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d007      	beq.n	8003680 <flushData+0x30>
        return context->interface->flush(context);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	0010      	movs	r0, r2
 800367a:	4798      	blx	r3
 800367c:	0003      	movs	r3, r0
 800367e:	e000      	b.n	8003682 <flushData+0x32>
    } else {
        return SCPI_RES_OK;
 8003680:	2301      	movs	r3, #1
    }
}
 8003682:	0018      	movs	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	b002      	add	sp, #8
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <writeDelimiter>:
/**
 * Write result delimiter to output
 * @param context
 * @return number of bytes written
 */
static size_t writeDelimiter(scpi_t * context) {
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003698:	2b00      	cmp	r3, #0
 800369a:	dd07      	ble.n	80036ac <writeDelimiter+0x20>
        return writeData(context, ",", 1);
 800369c:	4906      	ldr	r1, [pc, #24]	@ (80036b8 <writeDelimiter+0x2c>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	0018      	movs	r0, r3
 80036a4:	f7ff ffbd 	bl	8003622 <writeData>
 80036a8:	0003      	movs	r3, r0
 80036aa:	e000      	b.n	80036ae <writeDelimiter+0x22>
    } else {
        return 0;
 80036ac:	2300      	movs	r3, #0
    }
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b002      	add	sp, #8
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	0800e5b0 	.word	0x0800e5b0

080036bc <writeNewLine>:
/**
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	dd0d      	ble.n	80036e8 <writeNewLine+0x2c>
        size_t len;
#ifndef SCPI_LINE_ENDING
#error no termination character defined
#endif
        len = writeData(context, SCPI_LINE_ENDING, strlen(SCPI_LINE_ENDING));
 80036cc:	4909      	ldr	r1, [pc, #36]	@ (80036f4 <writeNewLine+0x38>)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2202      	movs	r2, #2
 80036d2:	0018      	movs	r0, r3
 80036d4:	f7ff ffa5 	bl	8003622 <writeData>
 80036d8:	0003      	movs	r3, r0
 80036da:	60fb      	str	r3, [r7, #12]
        flushData(context);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	0018      	movs	r0, r3
 80036e0:	f7ff ffb6 	bl	8003650 <flushData>
        return len;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	e000      	b.n	80036ea <writeNewLine+0x2e>
    } else {
        return 0;
 80036e8:	2300      	movs	r3, #0
    }
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b004      	add	sp, #16
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			@ (mov r8, r8)
 80036f4:	0800e5b4 	.word	0x0800e5b4

080036f8 <writeSemicolon>:
/**
 * Conditionaly write ";"
 * @param context
 * @return number of characters written
 */
static size_t writeSemicolon(scpi_t * context) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003704:	2b00      	cmp	r3, #0
 8003706:	dd07      	ble.n	8003718 <writeSemicolon+0x20>
        return writeData(context, ";", 1);
 8003708:	4906      	ldr	r1, [pc, #24]	@ (8003724 <writeSemicolon+0x2c>)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	0018      	movs	r0, r3
 8003710:	f7ff ff87 	bl	8003622 <writeData>
 8003714:	0003      	movs	r3, r0
 8003716:	e000      	b.n	800371a <writeSemicolon+0x22>
    } else {
        return 0;
 8003718:	2300      	movs	r3, #0
    }
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b002      	add	sp, #8
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	0800e5b8 	.word	0x0800e5b8

08003728 <processCommand>:

/**
 * Process command
 * @param context
 */
static scpi_bool_t processCommand(scpi_t * context) {
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
    const scpi_command_t * cmd = context->param_list.cmd;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	613b      	str	r3, [r7, #16]
    lex_state_t * state = &context->param_list.lex_state;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3314      	adds	r3, #20
 800373a:	60fb      	str	r3, [r7, #12]
    scpi_bool_t result = TRUE;
 800373c:	2317      	movs	r3, #23
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	2201      	movs	r2, #1
 8003742:	701a      	strb	r2, [r3, #0]

    /* conditionaly write ; */
    writeSemicolon(context);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	0018      	movs	r0, r3
 8003748:	f7ff ffd6 	bl	80036f8 <writeSemicolon>

    context->cmd_error = FALSE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2238      	movs	r2, #56	@ 0x38
 8003750:	2100      	movs	r1, #0
 8003752:	5499      	strb	r1, [r3, r2]
    context->output_count = 0;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	631a      	str	r2, [r3, #48]	@ 0x30
    context->input_count = 0;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	635a      	str	r2, [r3, #52]	@ 0x34
    context->arbitrary_reminding = 0;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2294      	movs	r2, #148	@ 0x94
 8003764:	2100      	movs	r1, #0
 8003766:	5099      	str	r1, [r3, r2]

    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d024      	beq.n	80037ba <processCommand+0x92>
        if ((cmd->callback(context) != SCPI_RES_OK)) {
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	0010      	movs	r0, r2
 8003778:	4798      	blx	r3
 800377a:	0003      	movs	r3, r0
 800377c:	2b01      	cmp	r3, #1
 800377e:	d013      	beq.n	80037a8 <processCommand+0x80>
            if (!context->cmd_error) {
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2238      	movs	r2, #56	@ 0x38
 8003784:	5c9b      	ldrb	r3, [r3, r2]
 8003786:	2201      	movs	r2, #1
 8003788:	4053      	eors	r3, r2
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d006      	beq.n	800379e <processCommand+0x76>
                SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
 8003790:	23c8      	movs	r3, #200	@ 0xc8
 8003792:	425a      	negs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	0011      	movs	r1, r2
 8003798:	0018      	movs	r0, r3
 800379a:	f7fd ffe7 	bl	800176c <SCPI_ErrorPush>
            }
            result = FALSE;
 800379e:	2317      	movs	r3, #23
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	e008      	b.n	80037ba <processCommand+0x92>
        } else {
            if (context->cmd_error) {
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2238      	movs	r2, #56	@ 0x38
 80037ac:	5c9b      	ldrb	r3, [r3, r2]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <processCommand+0x92>
                result = FALSE;
 80037b2:	2317      	movs	r3, #23
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	2200      	movs	r2, #0
 80037b8:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    /* set error if command callback did not read all parameters */
    if (state->pos < (state->buffer + state->len) && !context->cmd_error) {
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6819      	ldr	r1, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	18cb      	adds	r3, r1, r3
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d212      	bcs.n	80037f2 <processCommand+0xca>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2238      	movs	r2, #56	@ 0x38
 80037d0:	5c9b      	ldrb	r3, [r3, r2]
 80037d2:	2201      	movs	r2, #1
 80037d4:	4053      	eors	r3, r2
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <processCommand+0xca>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
 80037dc:	236c      	movs	r3, #108	@ 0x6c
 80037de:	425a      	negs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	0011      	movs	r1, r2
 80037e4:	0018      	movs	r0, r3
 80037e6:	f7fd ffc1 	bl	800176c <SCPI_ErrorPush>
        result = FALSE;
 80037ea:	2317      	movs	r3, #23
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	2200      	movs	r2, #0
 80037f0:	701a      	strb	r2, [r3, #0]
    }

    return result;
 80037f2:	2317      	movs	r3, #23
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	781b      	ldrb	r3, [r3, #0]
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b006      	add	sp, #24
 80037fe:	bd80      	pop	{r7, pc}

08003800 <findCommandHeader>:
/**
 * Cycle all patterns and search matching pattern. Execute command callback.
 * @param context
 * @result TRUE if context->paramlist is filled with correct values
 */
static scpi_bool_t findCommandHeader(scpi_t * context, const char * header, int len) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	e01d      	b.n	800384e <findCommandHeader+0x4e>
        cmd = &context->cmdlist[i];
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6819      	ldr	r1, [r3, #0]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	0013      	movs	r3, r2
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	189b      	adds	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	18cb      	adds	r3, r1, r3
 8003822:	613b      	str	r3, [r7, #16]
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	2300      	movs	r3, #0
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	2300      	movs	r3, #0
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	2300      	movs	r3, #0
 8003836:	f001 fc1c 	bl	8005072 <matchCommand>
 800383a:	1e03      	subs	r3, r0, #0
 800383c:	d004      	beq.n	8003848 <findCommandHeader+0x48>
            context->param_list.cmd = cmd;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	611a      	str	r2, [r3, #16]
            return TRUE;
 8003844:	2301      	movs	r3, #1
 8003846:	e00e      	b.n	8003866 <findCommandHeader+0x66>
    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3301      	adds	r3, #1
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6819      	ldr	r1, [r3, #0]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	0013      	movs	r3, r2
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	189b      	adds	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	18cb      	adds	r3, r1, r3
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1d6      	bne.n	8003812 <findCommandHeader+0x12>
        }
    }
    return FALSE;
 8003864:	2300      	movs	r3, #0
}
 8003866:	0018      	movs	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	b006      	add	sp, #24
 800386c:	bd80      	pop	{r7, pc}

0800386e <SCPI_Parse>:
 * @param context
 * @param data - complete command line
 * @param len - command line length
 * @return FALSE if there was some error during evaluation of commands
 */
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
 800386e:	b590      	push	{r4, r7, lr}
 8003870:	b08d      	sub	sp, #52	@ 0x34
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	607a      	str	r2, [r7, #4]
    scpi_bool_t result = TRUE;
 800387a:	232f      	movs	r3, #47	@ 0x2f
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	2201      	movs	r2, #1
 8003880:	701a      	strb	r2, [r3, #0]
    scpi_parser_state_t * state;
    int r;
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};
 8003882:	2114      	movs	r1, #20
 8003884:	187b      	adds	r3, r7, r1
 8003886:	221a      	movs	r2, #26
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	187b      	adds	r3, r7, r1
 800388c:	2200      	movs	r2, #0
 800388e:	605a      	str	r2, [r3, #4]
 8003890:	187b      	adds	r3, r7, r1
 8003892:	2200      	movs	r2, #0
 8003894:	609a      	str	r2, [r3, #8]

    if (context == NULL) {
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <SCPI_Parse+0x32>
        return FALSE;
 800389c:	2300      	movs	r3, #0
 800389e:	e094      	b.n	80039ca <SCPI_Parse+0x15c>
    }

    state = &context->parser_state;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3364      	adds	r3, #100	@ 0x64
 80038a4:	627b      	str	r3, [r7, #36]	@ 0x24
    context->output_count = 0;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	631a      	str	r2, [r3, #48]	@ 0x30

    while (1) {
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	68b9      	ldr	r1, [r7, #8]
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	0018      	movs	r0, r3
 80038b4:	f001 f892 	bl	80049dc <scpiParser_detectProgramMessageUnit>
 80038b8:	0003      	movs	r3, r0
 80038ba:	623b      	str	r3, [r7, #32]

        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
 80038bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b19      	cmp	r3, #25
 80038c2:	d10b      	bne.n	80038dc <SCPI_Parse+0x6e>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_CHARACTER);
 80038c4:	2365      	movs	r3, #101	@ 0x65
 80038c6:	425a      	negs	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	0011      	movs	r1, r2
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7fd ff4d 	bl	800176c <SCPI_ErrorPush>
            result = FALSE;
 80038d2:	232f      	movs	r3, #47	@ 0x2f
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	e061      	b.n	80039a0 <SCPI_Parse+0x132>
        } else if (state->programHeader.len > 0) {
 80038dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	dd5d      	ble.n	80039a0 <SCPI_Parse+0x132>

            composeCompoundCommand(&cmd_prev, &state->programHeader);
 80038e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e6:	2414      	movs	r4, #20
 80038e8:	193b      	adds	r3, r7, r4
 80038ea:	0011      	movs	r1, r2
 80038ec:	0018      	movs	r0, r3
 80038ee:	f001 fd97 	bl	8005420 <composeCompoundCommand>

            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	6859      	ldr	r1, [r3, #4]
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	0018      	movs	r0, r3
 80038fe:	f7ff ff7f 	bl	8003800 <findCommandHeader>
 8003902:	1e03      	subs	r3, r0, #0
 8003904:	d02a      	beq.n	800395c <SCPI_Parse+0xee>

                context->param_list.lex_state.buffer = state->programData.ptr;
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	615a      	str	r2, [r3, #20]
                context->param_list.lex_state.pos = context->param_list.lex_state.buffer;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	619a      	str	r2, [r3, #24]
                context->param_list.lex_state.len = state->programData.len;
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	61da      	str	r2, [r3, #28]
                context->param_list.cmd_raw.data = state->programHeader.ptr;
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	629a      	str	r2, [r3, #40]	@ 0x28
                context->param_list.cmd_raw.position = 0;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	625a      	str	r2, [r3, #36]	@ 0x24
                context->param_list.cmd_raw.length = state->programHeader.len;
 800392c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	001a      	movs	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	621a      	str	r2, [r3, #32]

                result &= processCommand(context);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	0018      	movs	r0, r3
 800393a:	f7ff fef5 	bl	8003728 <processCommand>
 800393e:	0003      	movs	r3, r0
 8003940:	001a      	movs	r2, r3
 8003942:	212f      	movs	r1, #47	@ 0x2f
 8003944:	187b      	adds	r3, r7, r1
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	401a      	ands	r2, r3
 800394a:	187b      	adds	r3, r7, r1
 800394c:	1e51      	subs	r1, r2, #1
 800394e:	418a      	sbcs	r2, r1
 8003950:	701a      	strb	r2, [r3, #0]
                cmd_prev = state->programHeader;
 8003952:	193b      	adds	r3, r7, r4
 8003954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003956:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003958:	c313      	stmia	r3!, {r0, r1, r4}
 800395a:	e021      	b.n	80039a0 <SCPI_Parse+0x132>
            } else {
                /* place undefined header with error */
                /* calculate length of errornouse header and trim \r\n */
                size_t r2 = r;
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	62bb      	str	r3, [r7, #40]	@ 0x28
                while (r2 > 0 && (data[r2 - 1] == '\r' || data[r2 - 1] == '\n')) r2--;
 8003960:	e002      	b.n	8003968 <SCPI_Parse+0xfa>
 8003962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003964:	3b01      	subs	r3, #1
 8003966:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00d      	beq.n	800398a <SCPI_Parse+0x11c>
 800396e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	18d3      	adds	r3, r2, r3
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b0d      	cmp	r3, #13
 800397a:	d0f2      	beq.n	8003962 <SCPI_Parse+0xf4>
 800397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397e:	3b01      	subs	r3, #1
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	18d3      	adds	r3, r2, r3
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b0a      	cmp	r3, #10
 8003988:	d0eb      	beq.n	8003962 <SCPI_Parse+0xf4>
                SCPI_ErrorPushEx(context, SCPI_ERROR_UNDEFINED_HEADER, data, r2);
 800398a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	2171      	movs	r1, #113	@ 0x71
 8003990:	4249      	negs	r1, r1
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f7fd fe64 	bl	8001660 <SCPI_ErrorPushEx>
                result = FALSE;
 8003998:	232f      	movs	r3, #47	@ 0x2f
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
            }
        }

        if (r < len) {
 80039a0:	6a3a      	ldr	r2, [r7, #32]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	da08      	bge.n	80039ba <SCPI_Parse+0x14c>
            data += r;
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	18d3      	adds	r3, r2, r3
 80039ae:	60bb      	str	r3, [r7, #8]
            len -= r;
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	607b      	str	r3, [r7, #4]
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 80039b8:	e778      	b.n	80038ac <SCPI_Parse+0x3e>
        } else {
            break;
 80039ba:	46c0      	nop			@ (mov r8, r8)
        }

    }

    /* conditionaly write new line */
    writeNewLine(context);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	0018      	movs	r0, r3
 80039c0:	f7ff fe7c 	bl	80036bc <writeNewLine>

    return result;
 80039c4:	232f      	movs	r3, #47	@ 0x2f
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	781b      	ldrb	r3, [r3, #0]
}
 80039ca:	0018      	movs	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b00d      	add	sp, #52	@ 0x34
 80039d0:	bd90      	pop	{r4, r7, pc}

080039d2 <SCPI_Init>:
        const scpi_command_t * commands,
        scpi_interface_t * interface,
        const scpi_unit_def_t * units,
        const char * idn1, const char * idn2, const char * idn3, const char * idn4,
        char * input_buffer, size_t input_buffer_length,
        scpi_error_t * error_queue_data, int16_t error_queue_size) {
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	603b      	str	r3, [r7, #0]
    memset(context, 0, sizeof (*context));
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2298      	movs	r2, #152	@ 0x98
 80039e4:	2100      	movs	r1, #0
 80039e6:	0018      	movs	r0, r3
 80039e8:	f009 fef7 	bl	800d7da <memset>
    context->cmdlist = commands;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	601a      	str	r2, [r3, #0]
    context->interface = interface;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    context->units = units;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	65da      	str	r2, [r3, #92]	@ 0x5c
    context->idn[0] = idn1;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2184      	movs	r1, #132	@ 0x84
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	505a      	str	r2, [r3, r1]
    context->idn[1] = idn2;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2188      	movs	r1, #136	@ 0x88
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	505a      	str	r2, [r3, r1]
    context->idn[2] = idn3;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	218c      	movs	r1, #140	@ 0x8c
 8003a12:	6a3a      	ldr	r2, [r7, #32]
 8003a14:	505a      	str	r2, [r3, r1]
    context->idn[3] = idn4;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2190      	movs	r1, #144	@ 0x90
 8003a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a1c:	505a      	str	r2, [r3, r1]
    context->buffer.data = input_buffer;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a22:	60da      	str	r2, [r3, #12]
    context->buffer.length = input_buffer_length;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a28:	605a      	str	r2, [r3, #4]
    context->buffer.position = 0;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	609a      	str	r2, [r3, #8]
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 8003a30:	2334      	movs	r3, #52	@ 0x34
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	2200      	movs	r2, #0
 8003a36:	5e9a      	ldrsh	r2, [r3, r2]
 8003a38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f7fd fd26 	bl	800148e <SCPI_ErrorInit>
}
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b004      	add	sp, #16
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <SCPI_Input>:
 * @param context
 * @param data - data to process
 * @param len - length of data
 * @return
 */
scpi_bool_t SCPI_Input(scpi_t * context, const char * data, int len) {
 8003a4c:	b590      	push	{r4, r7, lr}
 8003a4e:	b089      	sub	sp, #36	@ 0x24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
    scpi_bool_t result = TRUE;
 8003a58:	201f      	movs	r0, #31
 8003a5a:	183b      	adds	r3, r7, r0
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	701a      	strb	r2, [r3, #0]
    size_t totcmdlen = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61bb      	str	r3, [r7, #24]
    int cmdlen = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]

    if (len == 0) {
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d116      	bne.n	8003a9c <SCPI_Input+0x50>
        context->buffer.data[context->buffer.position] = 0;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	18d3      	adds	r3, r2, r3
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	68d9      	ldr	r1, [r3, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	001a      	movs	r2, r3
 8003a86:	183c      	adds	r4, r7, r0
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f7ff feef 	bl	800386e <SCPI_Parse>
 8003a90:	0003      	movs	r3, r0
 8003a92:	7023      	strb	r3, [r4, #0]
        context->buffer.position = 0;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	609a      	str	r2, [r3, #8]
 8003a9a:	e07f      	b.n	8003b9c <SCPI_Input+0x150>
    } else {
        int buffer_free;

        buffer_free = context->buffer.length - context->buffer.position;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	613b      	str	r3, [r7, #16]
        if (len > (buffer_free - 1)) {
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	dc11      	bgt.n	8003ad4 <SCPI_Input+0x88>
            /* Input buffer overrun - invalidate buffer */
            context->buffer.position = 0;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	609a      	str	r2, [r3, #8]
            context->buffer.data[context->buffer.position] = 0;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	18d3      	adds	r3, r2, r3
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
            SCPI_ErrorPush(context, SCPI_ERROR_INPUT_BUFFER_OVERRUN);
 8003ac4:	4a39      	ldr	r2, [pc, #228]	@ (8003bac <SCPI_Input+0x160>)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	0011      	movs	r1, r2
 8003aca:	0018      	movs	r0, r3
 8003acc:	f7fd fe4e 	bl	800176c <SCPI_ErrorPush>
            return FALSE;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e066      	b.n	8003ba2 <SCPI_Input+0x156>
        }
        memcpy(&context->buffer.data[context->buffer.position], data, len);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	18d3      	adds	r3, r2, r3
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f009 fee9 	bl	800d8ba <memcpy>
        context->buffer.position += len;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	18d2      	adds	r2, r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	609a      	str	r2, [r3, #8]
        context->buffer.data[context->buffer.position] = 0;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	18d3      	adds	r3, r2, r3
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]


        while (1) {
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3364      	adds	r3, #100	@ 0x64
 8003b06:	0018      	movs	r0, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	18d1      	adds	r1, r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	001a      	movs	r2, r3
 8003b1a:	f000 ff5f 	bl	80049dc <scpiParser_detectProgramMessageUnit>
 8003b1e:	0003      	movs	r3, r0
 8003b20:	617b      	str	r3, [r7, #20]
            totcmdlen += cmdlen;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	18d3      	adds	r3, r2, r3
 8003b28:	61bb      	str	r3, [r7, #24]

            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2280      	movs	r2, #128	@ 0x80
 8003b2e:	5c9b      	ldrb	r3, [r3, r2]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d120      	bne.n	8003b76 <SCPI_Input+0x12a>
                result = SCPI_Parse(context, context->buffer.data, totcmdlen);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68d9      	ldr	r1, [r3, #12]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	231f      	movs	r3, #31
 8003b3c:	18fc      	adds	r4, r7, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7ff fe94 	bl	800386e <SCPI_Parse>
 8003b46:	0003      	movs	r3, r0
 8003b48:	7023      	strb	r3, [r4, #0]
                memmove(context->buffer.data, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	68d8      	ldr	r0, [r3, #12]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	18d1      	adds	r1, r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	001a      	movs	r2, r3
 8003b60:	f009 fe28 	bl	800d7b4 <memmove>
                context->buffer.position -= totcmdlen;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	1ad2      	subs	r2, r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	609a      	str	r2, [r3, #8]
                totcmdlen = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	e7c5      	b.n	8003b02 <SCPI_Input+0xb6>
            } else {
                if (context->parser_state.programHeader.type == SCPI_TOKEN_UNKNOWN
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2264      	movs	r2, #100	@ 0x64
 8003b7a:	5c9b      	ldrb	r3, [r3, r2]
 8003b7c:	2b1a      	cmp	r3, #26
 8003b7e:	d104      	bne.n	8003b8a <SCPI_Input+0x13e>
                        && context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NONE) break;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2280      	movs	r2, #128	@ 0x80
 8003b84:	5c9b      	ldrb	r3, [r3, r2]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <SCPI_Input+0x14a>
                if (totcmdlen >= context->buffer.position) break;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d202      	bcs.n	8003b9a <SCPI_Input+0x14e>
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 8003b94:	e7b5      	b.n	8003b02 <SCPI_Input+0xb6>
                        && context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NONE) break;
 8003b96:	46c0      	nop			@ (mov r8, r8)
 8003b98:	e000      	b.n	8003b9c <SCPI_Input+0x150>
                if (totcmdlen >= context->buffer.position) break;
 8003b9a:	46c0      	nop			@ (mov r8, r8)
            }
        }
    }

    return result;
 8003b9c:	231f      	movs	r3, #31
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	781b      	ldrb	r3, [r3, #0]
}
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b009      	add	sp, #36	@ 0x24
 8003ba8:	bd90      	pop	{r4, r7, pc}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	fffffe95 	.word	0xfffffe95

08003bb0 <SCPI_ResultCharacters>:
 * Write raw string result to the output
 * @param context
 * @param data
 * @return
 */
size_t SCPI_ResultCharacters(scpi_t * context, const char * data, size_t len) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
    size_t result = 0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
    result += writeDelimiter(context);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f7ff fd62 	bl	800368c <writeDelimiter>
 8003bc8:	0002      	movs	r2, r0
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	189b      	adds	r3, r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
    result += writeData(context, data, len);
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f7ff fd23 	bl	8003622 <writeData>
 8003bdc:	0002      	movs	r2, r0
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	189b      	adds	r3, r3, r2
 8003be2:	617b      	str	r3, [r7, #20]
    context->output_count++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	631a      	str	r2, [r3, #48]	@ 0x30
    return result;
 8003bee:	697b      	ldr	r3, [r7, #20]
}
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b006      	add	sp, #24
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <getBasePrefix>:
/**
 * Return prefix of nondecimal base
 * @param base
 * @return
 */
static const char * getBasePrefix(int8_t base) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	0002      	movs	r2, r0
 8003c00:	1dfb      	adds	r3, r7, #7
 8003c02:	701a      	strb	r2, [r3, #0]
    switch (base) {
 8003c04:	1dfb      	adds	r3, r7, #7
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	b25b      	sxtb	r3, r3
 8003c0a:	2b10      	cmp	r3, #16
 8003c0c:	d009      	beq.n	8003c22 <getBasePrefix+0x2a>
 8003c0e:	dc0a      	bgt.n	8003c26 <getBasePrefix+0x2e>
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d002      	beq.n	8003c1a <getBasePrefix+0x22>
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d002      	beq.n	8003c1e <getBasePrefix+0x26>
 8003c18:	e005      	b.n	8003c26 <getBasePrefix+0x2e>
        case 2: return "#B";
 8003c1a:	4b05      	ldr	r3, [pc, #20]	@ (8003c30 <getBasePrefix+0x38>)
 8003c1c:	e004      	b.n	8003c28 <getBasePrefix+0x30>
        case 8: return "#Q";
 8003c1e:	4b05      	ldr	r3, [pc, #20]	@ (8003c34 <getBasePrefix+0x3c>)
 8003c20:	e002      	b.n	8003c28 <getBasePrefix+0x30>
        case 16: return "#H";
 8003c22:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <getBasePrefix+0x40>)
 8003c24:	e000      	b.n	8003c28 <getBasePrefix+0x30>
        default: return NULL;
 8003c26:	2300      	movs	r3, #0
    }
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b002      	add	sp, #8
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	0800e5bc 	.word	0x0800e5bc
 8003c34:	0800e5c0 	.word	0x0800e5c0
 8003c38:	0800e5c4 	.word	0x0800e5c4

08003c3c <resultUInt32BaseSign>:
 * @param val
 * @param base
 * @param sign
 * @return
 */
static size_t resultUInt32BaseSign(scpi_t * context, uint32_t val, int8_t base, scpi_bool_t sign) {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b092      	sub	sp, #72	@ 0x48
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	0019      	movs	r1, r3
 8003c48:	1dfb      	adds	r3, r7, #7
 8003c4a:	701a      	strb	r2, [r3, #0]
 8003c4c:	1dbb      	adds	r3, r7, #6
 8003c4e:	1c0a      	adds	r2, r1, #0
 8003c50:	701a      	strb	r2, [r3, #0]
    char buffer[32 + 1];
    const char * basePrefix;
    size_t result = 0;
 8003c52:	2300      	movs	r3, #0
 8003c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    size_t len;

    len = UInt32ToStrBaseSign(val, buffer, sizeof (buffer), base, sign);
 8003c56:	1dfb      	adds	r3, r7, #7
 8003c58:	2200      	movs	r2, #0
 8003c5a:	569a      	ldrsb	r2, [r3, r2]
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	18f9      	adds	r1, r7, r3
 8003c60:	68b8      	ldr	r0, [r7, #8]
 8003c62:	1dbb      	adds	r3, r7, #6
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	0013      	movs	r3, r2
 8003c6a:	2221      	movs	r2, #33	@ 0x21
 8003c6c:	f000 ffac 	bl	8004bc8 <UInt32ToStrBaseSign>
 8003c70:	0003      	movs	r3, r0
 8003c72:	63bb      	str	r3, [r7, #56]	@ 0x38
    basePrefix = getBasePrefix(base);
 8003c74:	1dfb      	adds	r3, r7, #7
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	b25b      	sxtb	r3, r3
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f7ff ffbc 	bl	8003bf8 <getBasePrefix>
 8003c80:	0003      	movs	r3, r0
 8003c82:	637b      	str	r3, [r7, #52]	@ 0x34

    result += writeDelimiter(context);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	0018      	movs	r0, r3
 8003c88:	f7ff fd00 	bl	800368c <writeDelimiter>
 8003c8c:	0002      	movs	r2, r0
 8003c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c90:	189b      	adds	r3, r3, r2
 8003c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (basePrefix != NULL) {
 8003c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <resultUInt32BaseSign+0x72>
        result += writeData(context, basePrefix, 2);
 8003c9a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f7ff fcbe 	bl	8003622 <writeData>
 8003ca6:	0002      	movs	r2, r0
 8003ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003caa:	189b      	adds	r3, r3, r2
 8003cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    result += writeData(context, buffer, len);
 8003cae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	18f9      	adds	r1, r7, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f7ff fcb3 	bl	8003622 <writeData>
 8003cbc:	0002      	movs	r2, r0
 8003cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cc0:	189b      	adds	r3, r3, r2
 8003cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    context->output_count++;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	631a      	str	r2, [r3, #48]	@ 0x30
    return result;
 8003cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b010      	add	sp, #64	@ 0x40
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <SCPI_ResultInt32>:
 * Write signed 32 bit integer value to the result
 * @param context
 * @param val
 * @return
 */
size_t SCPI_ResultInt32(scpi_t * context, int32_t val) {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
    return resultUInt32BaseSign(context, val, 10, TRUE);
 8003ce2:	6839      	ldr	r1, [r7, #0]
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	220a      	movs	r2, #10
 8003cea:	f7ff ffa7 	bl	8003c3c <resultUInt32BaseSign>
 8003cee:	0003      	movs	r3, r0
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <SCPI_ResultUInt32Base>:
 * Write signed/unsigned 32 bit integer value in specific base to the result
 * @param context
 * @param val
 * @return
 */
size_t SCPI_ResultUInt32Base(scpi_t * context, uint32_t val, int8_t base) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	1dfb      	adds	r3, r7, #7
 8003d04:	701a      	strb	r2, [r3, #0]
    return resultUInt32BaseSign(context, val, base, FALSE);
 8003d06:	1dfb      	adds	r3, r7, #7
 8003d08:	2200      	movs	r2, #0
 8003d0a:	569a      	ldrsb	r2, [r3, r2]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	2300      	movs	r3, #0
 8003d12:	f7ff ff93 	bl	8003c3c <resultUInt32BaseSign>
 8003d16:	0003      	movs	r3, r0
}
 8003d18:	0018      	movs	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b004      	add	sp, #16
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <SCPI_ResultDouble>:
 * Write double (64bit) value to the result
 * @param context
 * @param val
 * @return
 */
size_t SCPI_ResultDouble(scpi_t * context, double val) {
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b08f      	sub	sp, #60	@ 0x3c
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	603a      	str	r2, [r7, #0]
 8003d2a:	607b      	str	r3, [r7, #4]
    char buffer[32];
    size_t result = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	637b      	str	r3, [r7, #52]	@ 0x34
    size_t len = SCPI_DoubleToStr(val, buffer, sizeof (buffer));
 8003d30:	2410      	movs	r4, #16
 8003d32:	193a      	adds	r2, r7, r4
 8003d34:	6838      	ldr	r0, [r7, #0]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	2320      	movs	r3, #32
 8003d3a:	f001 f809 	bl	8004d50 <SCPI_DoubleToStr>
 8003d3e:	0003      	movs	r3, r0
 8003d40:	633b      	str	r3, [r7, #48]	@ 0x30
    result += writeDelimiter(context);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	0018      	movs	r0, r3
 8003d46:	f7ff fca1 	bl	800368c <writeDelimiter>
 8003d4a:	0002      	movs	r2, r0
 8003d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d4e:	189b      	adds	r3, r3, r2
 8003d50:	637b      	str	r3, [r7, #52]	@ 0x34
    result += writeData(context, buffer, len);
 8003d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d54:	1939      	adds	r1, r7, r4
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f7ff fc62 	bl	8003622 <writeData>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d62:	189b      	adds	r3, r3, r2
 8003d64:	637b      	str	r3, [r7, #52]	@ 0x34
    context->output_count++;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	631a      	str	r2, [r3, #48]	@ 0x30
    return result;
 8003d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003d72:	0018      	movs	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b00f      	add	sp, #60	@ 0x3c
 8003d78:	bd90      	pop	{r4, r7, pc}
	...

08003d7c <SCPI_ResultError>:
 *
 * @param context
 * @param error
 * @return
 */
size_t SCPI_ResultError(scpi_t * context, scpi_error_t * error) {
 8003d7c:	b590      	push	{r4, r7, lr}
 8003d7e:	b08b      	sub	sp, #44	@ 0x2c
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
    size_t result = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24
    size_t outputlimit = SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH;
 8003d8a:	23ff      	movs	r3, #255	@ 0xff
 8003d8c:	623b      	str	r3, [r7, #32]
    size_t step = 0;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61bb      	str	r3, [r7, #24]

    const char * data[SCPIDEFINE_DESCRIPTION_MAX_PARTS];
    size_t len[SCPIDEFINE_DESCRIPTION_MAX_PARTS];
    size_t i;

    data[0] = SCPI_ErrorTranslate(error->error_code);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2200      	movs	r2, #0
 8003d96:	5e9b      	ldrsh	r3, [r3, r2]
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f7fd fcfb 	bl	8001794 <SCPI_ErrorTranslate>
 8003d9e:	0003      	movs	r3, r0
 8003da0:	613b      	str	r3, [r7, #16]
    len[0] = strlen(data[0]);
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f7fc f9af 	bl	8000108 <strlen>
 8003daa:	0003      	movs	r3, r0
 8003dac:	60fb      	str	r3, [r7, #12]
#else
    SCPIDEFINE_get_parts(&context->error_info_heap, data[1], &len[1], &data[2], &len[2]);
#endif
#endif

    result += SCPI_ResultInt32(context, error->error_code);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2200      	movs	r2, #0
 8003db2:	5e9b      	ldrsh	r3, [r3, r2]
 8003db4:	001a      	movs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	0011      	movs	r1, r2
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7ff ff8c 	bl	8003cd8 <SCPI_ResultInt32>
 8003dc0:	0002      	movs	r2, r0
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	189b      	adds	r3, r3, r2
 8003dc6:	627b      	str	r3, [r7, #36]	@ 0x24
    result += writeDelimiter(context);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f7ff fc5e 	bl	800368c <writeDelimiter>
 8003dd0:	0002      	movs	r2, r0
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd4:	189b      	adds	r3, r3, r2
 8003dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    result += writeData(context, "\"", 1);
 8003dd8:	4973      	ldr	r1, [pc, #460]	@ (8003fa8 <SCPI_ResultError+0x22c>)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	0018      	movs	r0, r3
 8003de0:	f7ff fc1f 	bl	8003622 <writeData>
 8003de4:	0002      	movs	r2, r0
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	189b      	adds	r3, r3, r2
 8003dea:	627b      	str	r3, [r7, #36]	@ 0x24

    for (i = 0; (i < SCPIDEFINE_DESCRIPTION_MAX_PARTS) && data[i] && outputlimit; i++) {
 8003dec:	2300      	movs	r3, #0
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	e0bb      	b.n	8003f6a <SCPI_ResultError+0x1ee>
        if (i == 1) {
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d10a      	bne.n	8003e0e <SCPI_ResultError+0x92>
            result += writeSemicolon(context);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f7ff fc7c 	bl	80036f8 <writeSemicolon>
 8003e00:	0002      	movs	r2, r0
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	189b      	adds	r3, r3, r2
 8003e06:	627b      	str	r3, [r7, #36]	@ 0x24
            outputlimit -= 1;
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	623b      	str	r3, [r7, #32]
        }
        if (len[i] > outputlimit) {
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	2128      	movs	r1, #40	@ 0x28
 8003e14:	185b      	adds	r3, r3, r1
 8003e16:	19db      	adds	r3, r3, r7
 8003e18:	3b1c      	subs	r3, #28
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6a3a      	ldr	r2, [r7, #32]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d26c      	bcs.n	8003efc <SCPI_ResultError+0x180>
            len[i] = outputlimit;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	185b      	adds	r3, r3, r1
 8003e28:	19db      	adds	r3, r3, r7
 8003e2a:	3b1c      	subs	r3, #28
 8003e2c:	6a3a      	ldr	r2, [r7, #32]
 8003e2e:	601a      	str	r2, [r3, #0]
        }

        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 8003e30:	e064      	b.n	8003efc <SCPI_ResultError+0x180>
            if ((step = quote - data[i] + 1) >= outputlimit) {
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	2128      	movs	r1, #40	@ 0x28
 8003e38:	185b      	adds	r3, r3, r1
 8003e3a:	19db      	adds	r3, r3, r7
 8003e3c:	3b18      	subs	r3, #24
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	3301      	adds	r3, #1
 8003e46:	61bb      	str	r3, [r7, #24]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d310      	bcc.n	8003e72 <SCPI_ResultError+0xf6>
                len[i] -= 1;
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	185b      	adds	r3, r3, r1
 8003e56:	19db      	adds	r3, r3, r7
 8003e58:	3b1c      	subs	r3, #28
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	1e5a      	subs	r2, r3, #1
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	185b      	adds	r3, r3, r1
 8003e64:	19db      	adds	r3, r3, r7
 8003e66:	3b1c      	subs	r3, #28
 8003e68:	601a      	str	r2, [r3, #0]
                outputlimit -= 1;
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	623b      	str	r3, [r7, #32]
                break;
 8003e70:	e05a      	b.n	8003f28 <SCPI_ResultError+0x1ac>
            }
            result += writeData(context, data[i], step);
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	2428      	movs	r4, #40	@ 0x28
 8003e78:	191b      	adds	r3, r3, r4
 8003e7a:	19db      	adds	r3, r3, r7
 8003e7c:	3b18      	subs	r3, #24
 8003e7e:	6819      	ldr	r1, [r3, #0]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	0018      	movs	r0, r3
 8003e86:	f7ff fbcc 	bl	8003622 <writeData>
 8003e8a:	0002      	movs	r2, r0
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8e:	189b      	adds	r3, r3, r2
 8003e90:	627b      	str	r3, [r7, #36]	@ 0x24
            result += writeData(context, "\"", 1);
 8003e92:	4945      	ldr	r1, [pc, #276]	@ (8003fa8 <SCPI_ResultError+0x22c>)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7ff fbc2 	bl	8003622 <writeData>
 8003e9e:	0002      	movs	r2, r0
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea2:	189b      	adds	r3, r3, r2
 8003ea4:	627b      	str	r3, [r7, #36]	@ 0x24
            len[i] -= step;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	191b      	adds	r3, r3, r4
 8003eac:	19db      	adds	r3, r3, r7
 8003eae:	3b1c      	subs	r3, #28
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	1ad2      	subs	r2, r2, r3
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	191b      	adds	r3, r3, r4
 8003ebc:	19db      	adds	r3, r3, r7
 8003ebe:	3b1c      	subs	r3, #28
 8003ec0:	601a      	str	r2, [r3, #0]
            outputlimit -= step + 1;
 8003ec2:	6a3a      	ldr	r2, [r7, #32]
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	623b      	str	r3, [r7, #32]
            data[i] = quote + 1;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	191b      	adds	r3, r3, r4
 8003ed6:	19db      	adds	r3, r3, r7
 8003ed8:	3b18      	subs	r3, #24
 8003eda:	601a      	str	r2, [r3, #0]
            if (len[i] > outputlimit) {
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	191b      	adds	r3, r3, r4
 8003ee2:	19db      	adds	r3, r3, r7
 8003ee4:	3b1c      	subs	r3, #28
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6a3a      	ldr	r2, [r7, #32]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d206      	bcs.n	8003efc <SCPI_ResultError+0x180>
                len[i] = outputlimit;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	191b      	adds	r3, r3, r4
 8003ef4:	19db      	adds	r3, r3, r7
 8003ef6:	3b1c      	subs	r3, #28
 8003ef8:	6a3a      	ldr	r2, [r7, #32]
 8003efa:	601a      	str	r2, [r3, #0]
        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	2228      	movs	r2, #40	@ 0x28
 8003f02:	189b      	adds	r3, r3, r2
 8003f04:	19db      	adds	r3, r3, r7
 8003f06:	3b18      	subs	r3, #24
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	189b      	adds	r3, r3, r2
 8003f10:	19db      	adds	r3, r3, r7
 8003f12:	3b1c      	subs	r3, #28
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a24      	ldr	r2, [pc, #144]	@ (8003fa8 <SCPI_ResultError+0x22c>)
 8003f18:	0019      	movs	r1, r3
 8003f1a:	f000 fe26 	bl	8004b6a <strnpbrk>
 8003f1e:	0003      	movs	r3, r0
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d184      	bne.n	8003e32 <SCPI_ResultError+0xb6>
            }
        }

        result += writeData(context, data[i], len[i]);
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	2428      	movs	r4, #40	@ 0x28
 8003f2e:	191b      	adds	r3, r3, r4
 8003f30:	19db      	adds	r3, r3, r7
 8003f32:	3b18      	subs	r3, #24
 8003f34:	6819      	ldr	r1, [r3, #0]
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	191b      	adds	r3, r3, r4
 8003f3c:	19db      	adds	r3, r3, r7
 8003f3e:	3b1c      	subs	r3, #28
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	0018      	movs	r0, r3
 8003f46:	f7ff fb6c 	bl	8003622 <writeData>
 8003f4a:	0002      	movs	r2, r0
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	189b      	adds	r3, r3, r2
 8003f50:	627b      	str	r3, [r7, #36]	@ 0x24
        outputlimit -= len[i];
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	191b      	adds	r3, r3, r4
 8003f58:	19db      	adds	r3, r3, r7
 8003f5a:	3b1c      	subs	r3, #28
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6a3a      	ldr	r2, [r7, #32]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	623b      	str	r3, [r7, #32]
    for (i = 0; (i < SCPIDEFINE_DESCRIPTION_MAX_PARTS) && data[i] && outputlimit; i++) {
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	3301      	adds	r3, #1
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10c      	bne.n	8003f8a <SCPI_ResultError+0x20e>
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	2228      	movs	r2, #40	@ 0x28
 8003f76:	189b      	adds	r3, r3, r2
 8003f78:	19db      	adds	r3, r3, r7
 8003f7a:	3b18      	subs	r3, #24
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <SCPI_ResultError+0x20e>
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d000      	beq.n	8003f8a <SCPI_ResultError+0x20e>
 8003f88:	e733      	b.n	8003df2 <SCPI_ResultError+0x76>
    }
    result += writeData(context, "\"", 1);
 8003f8a:	4907      	ldr	r1, [pc, #28]	@ (8003fa8 <SCPI_ResultError+0x22c>)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	0018      	movs	r0, r3
 8003f92:	f7ff fb46 	bl	8003622 <writeData>
 8003f96:	0002      	movs	r2, r0
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	189b      	adds	r3, r3, r2
 8003f9c:	627b      	str	r3, [r7, #36]	@ 0x24

    return result;
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b00b      	add	sp, #44	@ 0x2c
 8003fa6:	bd90      	pop	{r4, r7, pc}
 8003fa8:	0800e5c8 	.word	0x0800e5c8

08003fac <SCPI_ResultArbitraryBlockHeader>:
 * Write arbitrary block header with length
 * @param context
 * @param len
 * @return
 */
size_t SCPI_ResultArbitraryBlockHeader(scpi_t * context, size_t len) {
 8003fac:	b590      	push	{r4, r7, lr}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
    char block_header[12];
    size_t header_len;
    block_header[0] = '#';
 8003fb6:	2408      	movs	r4, #8
 8003fb8:	193b      	adds	r3, r7, r4
 8003fba:	2223      	movs	r2, #35	@ 0x23
 8003fbc:	701a      	strb	r2, [r3, #0]
    SCPI_UInt32ToStrBase((uint32_t) len, block_header + 2, 10, 10);
 8003fbe:	1939      	adds	r1, r7, r4
 8003fc0:	3102      	adds	r1, #2
 8003fc2:	6838      	ldr	r0, [r7, #0]
 8003fc4:	230a      	movs	r3, #10
 8003fc6:	220a      	movs	r2, #10
 8003fc8:	f000 feaa 	bl	8004d20 <SCPI_UInt32ToStrBase>

    header_len = strlen(block_header + 2);
 8003fcc:	193b      	adds	r3, r7, r4
 8003fce:	3302      	adds	r3, #2
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f7fc f899 	bl	8000108 <strlen>
 8003fd6:	0003      	movs	r3, r0
 8003fd8:	617b      	str	r3, [r7, #20]
    block_header[1] = (char) (header_len + '0');
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	3330      	adds	r3, #48	@ 0x30
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	193b      	adds	r3, r7, r4
 8003fe4:	705a      	strb	r2, [r3, #1]

    context->arbitrary_reminding = len;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2194      	movs	r1, #148	@ 0x94
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	505a      	str	r2, [r3, r1]
    return writeData(context, block_header, header_len + 2);
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	1c9a      	adds	r2, r3, #2
 8003ff2:	1939      	adds	r1, r7, r4
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f7ff fb13 	bl	8003622 <writeData>
 8003ffc:	0003      	movs	r3, r0
}
 8003ffe:	0018      	movs	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	b007      	add	sp, #28
 8004004:	bd90      	pop	{r4, r7, pc}
	...

08004008 <SCPI_ResultArbitraryBlockData>:
 * @param context
 * @param data
 * @param len
 * @return
 */
size_t SCPI_ResultArbitraryBlockData(scpi_t * context, const void * data, size_t len) {
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]

    if (context->arbitrary_reminding < len) {
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2294      	movs	r2, #148	@ 0x94
 8004018:	589b      	ldr	r3, [r3, r2]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	429a      	cmp	r2, r3
 800401e:	d907      	bls.n	8004030 <SCPI_ResultArbitraryBlockData+0x28>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8004020:	4a12      	ldr	r2, [pc, #72]	@ (800406c <SCPI_ResultArbitraryBlockData+0x64>)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	0011      	movs	r1, r2
 8004026:	0018      	movs	r0, r3
 8004028:	f7fd fba0 	bl	800176c <SCPI_ErrorPush>
        return 0;
 800402c:	2300      	movs	r3, #0
 800402e:	e018      	b.n	8004062 <SCPI_ResultArbitraryBlockData+0x5a>
    }

    context->arbitrary_reminding -= len;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2294      	movs	r2, #148	@ 0x94
 8004034:	589a      	ldr	r2, [r3, r2]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	1ad2      	subs	r2, r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2194      	movs	r1, #148	@ 0x94
 800403e:	505a      	str	r2, [r3, r1]

    if (context->arbitrary_reminding == 0) {
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2294      	movs	r2, #148	@ 0x94
 8004044:	589b      	ldr	r3, [r3, r2]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d104      	bne.n	8004054 <SCPI_ResultArbitraryBlockData+0x4c>
        context->output_count++;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return writeData(context, (const char *) data, len);
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	0018      	movs	r0, r3
 800405c:	f7ff fae1 	bl	8003622 <writeData>
 8004060:	0003      	movs	r3, r0
}
 8004062:	0018      	movs	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	b004      	add	sp, #16
 8004068:	bd80      	pop	{r7, pc}
 800406a:	46c0      	nop			@ (mov r8, r8)
 800406c:	fffffeca 	.word	0xfffffeca

08004070 <SCPI_ResultArbitraryBlock>:
 * @param context
 * @param data
 * @param len
 * @return
 */
size_t SCPI_ResultArbitraryBlock(scpi_t * context, const void * data, size_t len) {
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
    size_t result = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
    result += SCPI_ResultArbitraryBlockHeader(context, len);
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	0011      	movs	r1, r2
 8004086:	0018      	movs	r0, r3
 8004088:	f7ff ff90 	bl	8003fac <SCPI_ResultArbitraryBlockHeader>
 800408c:	0002      	movs	r2, r0
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	189b      	adds	r3, r3, r2
 8004092:	617b      	str	r3, [r7, #20]
    result += SCPI_ResultArbitraryBlockData(context, data, len);
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	0018      	movs	r0, r3
 800409c:	f7ff ffb4 	bl	8004008 <SCPI_ResultArbitraryBlockData>
 80040a0:	0002      	movs	r2, r0
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	189b      	adds	r3, r3, r2
 80040a6:	617b      	str	r3, [r7, #20]
    return result;
 80040a8:	697b      	ldr	r3, [r7, #20]
}
 80040aa:	0018      	movs	r0, r3
 80040ac:	46bd      	mov	sp, r7
 80040ae:	b006      	add	sp, #24
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <invalidateToken>:
/**
 * Invalidate token
 * @param token
 * @param ptr
 */
static void invalidateToken(scpi_token_t * token, char * ptr) {
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	6039      	str	r1, [r7, #0]
    token->len = 0;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	609a      	str	r2, [r3, #8]
    token->ptr = ptr;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	605a      	str	r2, [r3, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	221a      	movs	r2, #26
 80040cc:	701a      	strb	r2, [r3, #0]
}
 80040ce:	46c0      	nop			@ (mov r8, r8)
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b002      	add	sp, #8
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <SCPI_Parameter>:
 * @param context
 * @param parameter
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_Parameter(scpi_t * context, scpi_parameter_t * parameter, scpi_bool_t mandatory) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	1dfb      	adds	r3, r7, #7
 80040e4:	701a      	strb	r2, [r3, #0]
    lex_state_t * state;

    if (!parameter) {
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d107      	bne.n	80040fc <SCPI_Parameter+0x24>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 80040ec:	4a37      	ldr	r2, [pc, #220]	@ (80041cc <SCPI_Parameter+0xf4>)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	0011      	movs	r1, r2
 80040f2:	0018      	movs	r0, r3
 80040f4:	f7fd fb3a 	bl	800176c <SCPI_ErrorPush>
        return FALSE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	e062      	b.n	80041c2 <SCPI_Parameter+0xea>
    }

    invalidateToken(parameter, NULL);
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2100      	movs	r1, #0
 8004100:	0018      	movs	r0, r3
 8004102:	f7ff ffd6 	bl	80040b2 <invalidateToken>

    state = &context->param_list.lex_state;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3314      	adds	r3, #20
 800410a:	617b      	str	r3, [r7, #20]

    if (state->pos >= (state->buffer + state->len)) {
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	18cb      	adds	r3, r1, r3
 800411a:	429a      	cmp	r2, r3
 800411c:	d310      	bcc.n	8004140 <SCPI_Parameter+0x68>
        if (mandatory) {
 800411e:	1dfb      	adds	r3, r7, #7
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d007      	beq.n	8004136 <SCPI_Parameter+0x5e>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 8004126:	236d      	movs	r3, #109	@ 0x6d
 8004128:	425a      	negs	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	0011      	movs	r1, r2
 800412e:	0018      	movs	r0, r3
 8004130:	f7fd fb1c 	bl	800176c <SCPI_ErrorPush>
 8004134:	e002      	b.n	800413c <SCPI_Parameter+0x64>
        } else {
            parameter->type = SCPI_TOKEN_PROGRAM_MNEMONIC; /* TODO: select something different */
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2209      	movs	r2, #9
 800413a:	701a      	strb	r2, [r3, #0]
        }
        return FALSE;
 800413c:	2300      	movs	r3, #0
 800413e:	e040      	b.n	80041c2 <SCPI_Parameter+0xea>
    }
    if (context->input_count != 0) {
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004144:	2b00      	cmp	r3, #0
 8004146:	d017      	beq.n	8004178 <SCPI_Parameter+0xa0>
        scpiLex_Comma(state, parameter);
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	0011      	movs	r1, r2
 800414e:	0018      	movs	r0, r3
 8004150:	f7ff f903 	bl	800335a <scpiLex_Comma>
        if (parameter->type != SCPI_TOKEN_COMMA) {
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00d      	beq.n	8004178 <SCPI_Parameter+0xa0>
            invalidateToken(parameter, NULL);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2100      	movs	r1, #0
 8004160:	0018      	movs	r0, r3
 8004162:	f7ff ffa6 	bl	80040b2 <invalidateToken>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
 8004166:	2367      	movs	r3, #103	@ 0x67
 8004168:	425a      	negs	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	0011      	movs	r1, r2
 800416e:	0018      	movs	r0, r3
 8004170:	f7fd fafc 	bl	800176c <SCPI_ErrorPush>
            return FALSE;
 8004174:	2300      	movs	r3, #0
 8004176:	e024      	b.n	80041c2 <SCPI_Parameter+0xea>
        }
    }

    context->input_count++;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	635a      	str	r2, [r3, #52]	@ 0x34

    scpiParser_parseProgramData(&context->param_list.lex_state, parameter);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3314      	adds	r3, #20
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	0011      	movs	r1, r2
 800418a:	0018      	movs	r0, r3
 800418c:	f000 fb30 	bl	80047f0 <scpiParser_parseProgramData>

    switch (parameter->type) {
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b0b      	cmp	r3, #11
 8004196:	dc02      	bgt.n	800419e <SCPI_Parameter+0xc6>
 8004198:	2b06      	cmp	r3, #6
 800419a:	da03      	bge.n	80041a4 <SCPI_Parameter+0xcc>
 800419c:	e004      	b.n	80041a8 <SCPI_Parameter+0xd0>
 800419e:	3b0d      	subs	r3, #13
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d801      	bhi.n	80041a8 <SCPI_Parameter+0xd0>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
        case SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA:
        case SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA:
        case SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA:
        case SCPI_TOKEN_PROGRAM_EXPRESSION:
            return TRUE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e00c      	b.n	80041c2 <SCPI_Parameter+0xea>
        default:
            invalidateToken(parameter, NULL);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2100      	movs	r1, #0
 80041ac:	0018      	movs	r0, r3
 80041ae:	f7ff ff80 	bl	80040b2 <invalidateToken>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 80041b2:	2397      	movs	r3, #151	@ 0x97
 80041b4:	425a      	negs	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	0011      	movs	r1, r2
 80041ba:	0018      	movs	r0, r3
 80041bc:	f7fd fad6 	bl	800176c <SCPI_ErrorPush>
            return FALSE;
 80041c0:	2300      	movs	r3, #0
    }
}
 80041c2:	0018      	movs	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b006      	add	sp, #24
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	fffffeca 	.word	0xfffffeca

080041d0 <SCPI_ParamIsNumber>:
 * Detect if parameter is number
 * @param parameter
 * @param suffixAllowed
 * @return
 */
scpi_bool_t SCPI_ParamIsNumber(scpi_parameter_t * parameter, scpi_bool_t suffixAllowed) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	000a      	movs	r2, r1
 80041da:	1cfb      	adds	r3, r7, #3
 80041dc:	701a      	strb	r2, [r3, #0]
    switch (parameter->type) {
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b0b      	cmp	r3, #11
 80041e4:	d009      	beq.n	80041fa <SCPI_ParamIsNumber+0x2a>
 80041e6:	dc0b      	bgt.n	8004200 <SCPI_ParamIsNumber+0x30>
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	dc02      	bgt.n	80041f2 <SCPI_ParamIsNumber+0x22>
 80041ec:	2b06      	cmp	r3, #6
 80041ee:	da02      	bge.n	80041f6 <SCPI_ParamIsNumber+0x26>
 80041f0:	e006      	b.n	8004200 <SCPI_ParamIsNumber+0x30>
 80041f2:	2b0a      	cmp	r3, #10
 80041f4:	d104      	bne.n	8004200 <SCPI_ParamIsNumber+0x30>
        case SCPI_TOKEN_HEXNUM:
        case SCPI_TOKEN_OCTNUM:
        case SCPI_TOKEN_BINNUM:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
            return TRUE;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e003      	b.n	8004202 <SCPI_ParamIsNumber+0x32>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            return suffixAllowed;
 80041fa:	1cfb      	adds	r3, r7, #3
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	e000      	b.n	8004202 <SCPI_ParamIsNumber+0x32>
        default:
            return FALSE;
 8004200:	2300      	movs	r3, #0
    }
}
 8004202:	0018      	movs	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	b002      	add	sp, #8
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <ParamSignToUInt32>:
 * @param parameter
 * @param value result
 * @param sign
 * @return TRUE if succesful
 */
static scpi_bool_t ParamSignToUInt32(scpi_t * context, scpi_parameter_t * parameter, uint32_t * value, scpi_bool_t sign) {
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	001a      	movs	r2, r3
 800421a:	1cfb      	adds	r3, r7, #3
 800421c:	701a      	strb	r2, [r3, #0]

    if (!value) {
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d107      	bne.n	8004234 <ParamSignToUInt32+0x28>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8004224:	4a2d      	ldr	r2, [pc, #180]	@ (80042dc <ParamSignToUInt32+0xd0>)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	0011      	movs	r1, r2
 800422a:	0018      	movs	r0, r3
 800422c:	f7fd fa9e 	bl	800176c <SCPI_ErrorPush>
        return FALSE;
 8004230:	2300      	movs	r3, #0
 8004232:	e04e      	b.n	80042d2 <ParamSignToUInt32+0xc6>
    }

    switch (parameter->type) {
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b0b      	cmp	r3, #11
 800423a:	dc49      	bgt.n	80042d0 <ParamSignToUInt32+0xc4>
 800423c:	2b0a      	cmp	r3, #10
 800423e:	da2b      	bge.n	8004298 <ParamSignToUInt32+0x8c>
 8004240:	2b08      	cmp	r3, #8
 8004242:	d01d      	beq.n	8004280 <ParamSignToUInt32+0x74>
 8004244:	dc44      	bgt.n	80042d0 <ParamSignToUInt32+0xc4>
 8004246:	2b06      	cmp	r3, #6
 8004248:	d002      	beq.n	8004250 <ParamSignToUInt32+0x44>
 800424a:	2b07      	cmp	r3, #7
 800424c:	d00c      	beq.n	8004268 <ParamSignToUInt32+0x5c>
 800424e:	e03f      	b.n	80042d0 <ParamSignToUInt32+0xc4>
        case SCPI_TOKEN_HEXNUM:
            return strBaseToUInt32(parameter->ptr, value, 16) > 0 ? TRUE : FALSE;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	2210      	movs	r2, #16
 8004258:	0018      	movs	r0, r3
 800425a:	f000 fdaf 	bl	8004dbc <strBaseToUInt32>
 800425e:	0003      	movs	r3, r0
 8004260:	1e5a      	subs	r2, r3, #1
 8004262:	4193      	sbcs	r3, r2
 8004264:	b2db      	uxtb	r3, r3
 8004266:	e034      	b.n	80042d2 <ParamSignToUInt32+0xc6>
        case SCPI_TOKEN_OCTNUM:
            return strBaseToUInt32(parameter->ptr, value, 8) > 0 ? TRUE : FALSE;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	2208      	movs	r2, #8
 8004270:	0018      	movs	r0, r3
 8004272:	f000 fda3 	bl	8004dbc <strBaseToUInt32>
 8004276:	0003      	movs	r3, r0
 8004278:	1e5a      	subs	r2, r3, #1
 800427a:	4193      	sbcs	r3, r2
 800427c:	b2db      	uxtb	r3, r3
 800427e:	e028      	b.n	80042d2 <ParamSignToUInt32+0xc6>
        case SCPI_TOKEN_BINNUM:
            return strBaseToUInt32(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	0018      	movs	r0, r3
 800428a:	f000 fd97 	bl	8004dbc <strBaseToUInt32>
 800428e:	0003      	movs	r3, r0
 8004290:	1e5a      	subs	r2, r3, #1
 8004292:	4193      	sbcs	r3, r2
 8004294:	b2db      	uxtb	r3, r3
 8004296:	e01c      	b.n	80042d2 <ParamSignToUInt32+0xc6>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            if (sign) {
 8004298:	1cfb      	adds	r3, r7, #3
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00b      	beq.n	80042b8 <ParamSignToUInt32+0xac>
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	220a      	movs	r2, #10
 80042a8:	0018      	movs	r0, r3
 80042aa:	f000 fd6d 	bl	8004d88 <strBaseToInt32>
 80042ae:	0003      	movs	r3, r0
 80042b0:	1e5a      	subs	r2, r3, #1
 80042b2:	4193      	sbcs	r3, r2
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	e00c      	b.n	80042d2 <ParamSignToUInt32+0xc6>
            } else {
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	220a      	movs	r2, #10
 80042c0:	0018      	movs	r0, r3
 80042c2:	f000 fd7b 	bl	8004dbc <strBaseToUInt32>
 80042c6:	0003      	movs	r3, r0
 80042c8:	1e5a      	subs	r2, r3, #1
 80042ca:	4193      	sbcs	r3, r2
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	e000      	b.n	80042d2 <ParamSignToUInt32+0xc6>
            }
        default:
            return FALSE;
 80042d0:	2300      	movs	r3, #0
    }
}
 80042d2:	0018      	movs	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b004      	add	sp, #16
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	fffffeca 	.word	0xfffffeca

080042e0 <SCPI_ParamToInt32>:
 * @param context
 * @param parameter
 * @param value result
 * @return TRUE if succesful
 */
scpi_bool_t SCPI_ParamToInt32(scpi_t * context, scpi_parameter_t * parameter, int32_t * value) {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
    return ParamSignToUInt32(context, parameter, (uint32_t *) value, TRUE);
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	2301      	movs	r3, #1
 80042f4:	f7ff ff8a 	bl	800420c <ParamSignToUInt32>
 80042f8:	0003      	movs	r3, r0
}
 80042fa:	0018      	movs	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b004      	add	sp, #16
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <ParamSignUInt32>:
 * @param value
 * @param mandatory
 * @param sign
 * @return
 */
static scpi_bool_t ParamSignUInt32(scpi_t * context, uint32_t * value, scpi_bool_t mandatory, scpi_bool_t sign) {
 8004304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004306:	b089      	sub	sp, #36	@ 0x24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	0019      	movs	r1, r3
 8004310:	1dfb      	adds	r3, r7, #7
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	1dbb      	adds	r3, r7, #6
 8004316:	1c0a      	adds	r2, r1, #0
 8004318:	701a      	strb	r2, [r3, #0]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!value) {
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d107      	bne.n	8004330 <ParamSignUInt32+0x2c>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8004320:	4a28      	ldr	r2, [pc, #160]	@ (80043c4 <ParamSignUInt32+0xc0>)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	0011      	movs	r1, r2
 8004326:	0018      	movs	r0, r3
 8004328:	f7fd fa20 	bl	800176c <SCPI_ErrorPush>
        return FALSE;
 800432c:	2300      	movs	r3, #0
 800432e:	e045      	b.n	80043bc <ParamSignUInt32+0xb8>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 8004330:	251f      	movs	r5, #31
 8004332:	197c      	adds	r4, r7, r5
 8004334:	1dfb      	adds	r3, r7, #7
 8004336:	781a      	ldrb	r2, [r3, #0]
 8004338:	2610      	movs	r6, #16
 800433a:	19b9      	adds	r1, r7, r6
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	0018      	movs	r0, r3
 8004340:	f7ff feca 	bl	80040d8 <SCPI_Parameter>
 8004344:	0003      	movs	r3, r0
 8004346:	7023      	strb	r3, [r4, #0]
    if (result) {
 8004348:	002c      	movs	r4, r5
 800434a:	193b      	adds	r3, r7, r4
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d031      	beq.n	80043b6 <ParamSignUInt32+0xb2>
        if (SCPI_ParamIsNumber(&param, FALSE)) {
 8004352:	0035      	movs	r5, r6
 8004354:	197b      	adds	r3, r7, r5
 8004356:	2100      	movs	r1, #0
 8004358:	0018      	movs	r0, r3
 800435a:	f7ff ff39 	bl	80041d0 <SCPI_ParamIsNumber>
 800435e:	1e03      	subs	r3, r0, #0
 8004360:	d00a      	beq.n	8004378 <ParamSignUInt32+0x74>
            result = ParamSignToUInt32(context, &param, value, sign);
 8004362:	193c      	adds	r4, r7, r4
 8004364:	1dbb      	adds	r3, r7, #6
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	1979      	adds	r1, r7, r5
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f7ff ff4d 	bl	800420c <ParamSignToUInt32>
 8004372:	0003      	movs	r3, r0
 8004374:	7023      	strb	r3, [r4, #0]
 8004376:	e01e      	b.n	80043b6 <ParamSignUInt32+0xb2>
        } else if (SCPI_ParamIsNumber(&param, TRUE)) {
 8004378:	2310      	movs	r3, #16
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	2101      	movs	r1, #1
 800437e:	0018      	movs	r0, r3
 8004380:	f7ff ff26 	bl	80041d0 <SCPI_ParamIsNumber>
 8004384:	1e03      	subs	r3, r0, #0
 8004386:	d00b      	beq.n	80043a0 <ParamSignUInt32+0x9c>
            SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
 8004388:	238a      	movs	r3, #138	@ 0x8a
 800438a:	425a      	negs	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	0011      	movs	r1, r2
 8004390:	0018      	movs	r0, r3
 8004392:	f7fd f9eb 	bl	800176c <SCPI_ErrorPush>
            result = FALSE;
 8004396:	231f      	movs	r3, #31
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	e00a      	b.n	80043b6 <ParamSignUInt32+0xb2>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 80043a0:	2368      	movs	r3, #104	@ 0x68
 80043a2:	425a      	negs	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	0011      	movs	r1, r2
 80043a8:	0018      	movs	r0, r3
 80043aa:	f7fd f9df 	bl	800176c <SCPI_ErrorPush>
            result = FALSE;
 80043ae:	231f      	movs	r3, #31
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	2200      	movs	r2, #0
 80043b4:	701a      	strb	r2, [r3, #0]
        }
    }
    return result;
 80043b6:	231f      	movs	r3, #31
 80043b8:	18fb      	adds	r3, r7, r3
 80043ba:	781b      	ldrb	r3, [r3, #0]
}
 80043bc:	0018      	movs	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	b009      	add	sp, #36	@ 0x24
 80043c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c4:	fffffeca 	.word	0xfffffeca

080043c8 <SCPI_ParamInt32>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamInt32(scpi_t * context, int32_t * value, scpi_bool_t mandatory) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	1dfb      	adds	r3, r7, #7
 80043d4:	701a      	strb	r2, [r3, #0]
    return ParamSignUInt32(context, (uint32_t *) value, mandatory, TRUE);
 80043d6:	1dfb      	adds	r3, r7, #7
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	2301      	movs	r3, #1
 80043e0:	f7ff ff90 	bl	8004304 <ParamSignUInt32>
 80043e4:	0003      	movs	r3, r0
}
 80043e6:	0018      	movs	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b004      	add	sp, #16
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <SCPI_ParamArbitraryBlock>:
 * @param value result pointer to data
 * @param len result length of data
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamArbitraryBlock(scpi_t * context, const char ** value, size_t * len, scpi_bool_t mandatory) {
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b089      	sub	sp, #36	@ 0x24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	001a      	movs	r2, r3
 80043fe:	1cfb      	adds	r3, r7, #3
 8004400:	701a      	strb	r2, [r3, #0]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!value || !len) {
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <SCPI_ParamArbitraryBlock+0x1e>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d107      	bne.n	800441e <SCPI_ParamArbitraryBlock+0x2e>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800440e:	4a1c      	ldr	r2, [pc, #112]	@ (8004480 <SCPI_ParamArbitraryBlock+0x90>)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	0011      	movs	r1, r2
 8004414:	0018      	movs	r0, r3
 8004416:	f7fd f9a9 	bl	800176c <SCPI_ErrorPush>
        return FALSE;
 800441a:	2300      	movs	r3, #0
 800441c:	e02b      	b.n	8004476 <SCPI_ParamArbitraryBlock+0x86>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 800441e:	261f      	movs	r6, #31
 8004420:	19bc      	adds	r4, r7, r6
 8004422:	1cfb      	adds	r3, r7, #3
 8004424:	781a      	ldrb	r2, [r3, #0]
 8004426:	2510      	movs	r5, #16
 8004428:	1979      	adds	r1, r7, r5
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	0018      	movs	r0, r3
 800442e:	f7ff fe53 	bl	80040d8 <SCPI_Parameter>
 8004432:	0003      	movs	r3, r0
 8004434:	7023      	strb	r3, [r4, #0]
    if (result) {
 8004436:	19bb      	adds	r3, r7, r6
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d018      	beq.n	8004470 <SCPI_ParamArbitraryBlock+0x80>
        if (param.type == SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA) {
 800443e:	197b      	adds	r3, r7, r5
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b0d      	cmp	r3, #13
 8004444:	d109      	bne.n	800445a <SCPI_ParamArbitraryBlock+0x6a>
            *value = param.ptr;
 8004446:	197b      	adds	r3, r7, r5
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	601a      	str	r2, [r3, #0]
            *len = param.len;
 800444e:	197b      	adds	r3, r7, r5
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	001a      	movs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	e00a      	b.n	8004470 <SCPI_ParamArbitraryBlock+0x80>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 800445a:	2368      	movs	r3, #104	@ 0x68
 800445c:	425a      	negs	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	0011      	movs	r1, r2
 8004462:	0018      	movs	r0, r3
 8004464:	f7fd f982 	bl	800176c <SCPI_ErrorPush>
            result = FALSE;
 8004468:	231f      	movs	r3, #31
 800446a:	18fb      	adds	r3, r7, r3
 800446c:	2200      	movs	r2, #0
 800446e:	701a      	strb	r2, [r3, #0]
        }
    }

    return result;
 8004470:	231f      	movs	r3, #31
 8004472:	18fb      	adds	r3, r7, r3
 8004474:	781b      	ldrb	r3, [r3, #0]
}
 8004476:	0018      	movs	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	b009      	add	sp, #36	@ 0x24
 800447c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800447e:	46c0      	nop			@ (mov r8, r8)
 8004480:	fffffeca 	.word	0xfffffeca

08004484 <SCPI_ParamCopyText>:

scpi_bool_t SCPI_ParamCopyText(scpi_t * context, char * buffer, size_t buffer_len, size_t * copy_len, scpi_bool_t mandatory) {
 8004484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004486:	b08d      	sub	sp, #52	@ 0x34
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
    scpi_parameter_t param;
    size_t i_from;
    size_t i_to;
    char quote;

    if (!buffer || !copy_len) {
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <SCPI_ParamCopyText+0x1a>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d107      	bne.n	80044ae <SCPI_ParamCopyText+0x2a>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800449e:	4a3d      	ldr	r2, [pc, #244]	@ (8004594 <SCPI_ParamCopyText+0x110>)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	0011      	movs	r1, r2
 80044a4:	0018      	movs	r0, r3
 80044a6:	f7fd f961 	bl	800176c <SCPI_ErrorPush>
        return FALSE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e06e      	b.n	800458c <SCPI_ParamCopyText+0x108>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 80044ae:	262f      	movs	r6, #47	@ 0x2f
 80044b0:	19bc      	adds	r4, r7, r6
 80044b2:	2340      	movs	r3, #64	@ 0x40
 80044b4:	2208      	movs	r2, #8
 80044b6:	189b      	adds	r3, r3, r2
 80044b8:	19db      	adds	r3, r3, r7
 80044ba:	781a      	ldrb	r2, [r3, #0]
 80044bc:	2514      	movs	r5, #20
 80044be:	1979      	adds	r1, r7, r5
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	0018      	movs	r0, r3
 80044c4:	f7ff fe08 	bl	80040d8 <SCPI_Parameter>
 80044c8:	0003      	movs	r3, r0
 80044ca:	7023      	strb	r3, [r4, #0]
    if (result) {
 80044cc:	19bb      	adds	r3, r7, r6
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d058      	beq.n	8004586 <SCPI_ParamCopyText+0x102>

        switch (param.type) {
 80044d4:	197b      	adds	r3, r7, r5
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	3b0e      	subs	r3, #14
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d846      	bhi.n	800456c <SCPI_ParamCopyText+0xe8>
            case SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA:
            case SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA:
                quote = param.type == SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA ? '\'' : '"';
 80044de:	197b      	adds	r3, r7, r5
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b0e      	cmp	r3, #14
 80044e4:	d101      	bne.n	80044ea <SCPI_ParamCopyText+0x66>
 80044e6:	2227      	movs	r2, #39	@ 0x27
 80044e8:	e000      	b.n	80044ec <SCPI_ParamCopyText+0x68>
 80044ea:	2222      	movs	r2, #34	@ 0x22
 80044ec:	2323      	movs	r3, #35	@ 0x23
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	701a      	strb	r2, [r3, #0]
                for (i_from = 1, i_to = 0; i_from < (size_t) (param.len - 1); i_from++) {
 80044f2:	2301      	movs	r3, #1
 80044f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044f6:	2300      	movs	r3, #0
 80044f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044fa:	e020      	b.n	800453e <SCPI_ParamCopyText+0xba>
                    if (i_from >= buffer_len) {
 80044fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	429a      	cmp	r2, r3
 8004502:	d225      	bcs.n	8004550 <SCPI_ParamCopyText+0xcc>
                        break;
                    }
                    buffer[i_to] = param.ptr[i_from];
 8004504:	2014      	movs	r0, #20
 8004506:	183b      	adds	r3, r7, r0
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450c:	18d2      	adds	r2, r2, r3
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	18cb      	adds	r3, r1, r3
 8004514:	7812      	ldrb	r2, [r2, #0]
 8004516:	701a      	strb	r2, [r3, #0]
                    i_to++;
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	3301      	adds	r3, #1
 800451c:	627b      	str	r3, [r7, #36]	@ 0x24
                    if (param.ptr[i_from] == quote) {
 800451e:	183b      	adds	r3, r7, r0
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004524:	18d3      	adds	r3, r2, r3
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2223      	movs	r2, #35	@ 0x23
 800452a:	18ba      	adds	r2, r7, r2
 800452c:	7812      	ldrb	r2, [r2, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d102      	bne.n	8004538 <SCPI_ParamCopyText+0xb4>
                        i_from++;
 8004532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004534:	3301      	adds	r3, #1
 8004536:	62bb      	str	r3, [r7, #40]	@ 0x28
                for (i_from = 1, i_to = 0; i_from < (size_t) (param.len - 1); i_from++) {
 8004538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453a:	3301      	adds	r3, #1
 800453c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800453e:	2314      	movs	r3, #20
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	3b01      	subs	r3, #1
 8004546:	001a      	movs	r2, r3
 8004548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454a:	4293      	cmp	r3, r2
 800454c:	d3d6      	bcc.n	80044fc <SCPI_ParamCopyText+0x78>
 800454e:	e000      	b.n	8004552 <SCPI_ParamCopyText+0xce>
                        break;
 8004550:	46c0      	nop			@ (mov r8, r8)
                    }
                }
                *copy_len = i_to;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004556:	601a      	str	r2, [r3, #0]
                if (i_to < buffer_len) {
 8004558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	429a      	cmp	r2, r3
 800455e:	d211      	bcs.n	8004584 <SCPI_ParamCopyText+0x100>
                    buffer[i_to] = 0;
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	18d3      	adds	r3, r2, r3
 8004566:	2200      	movs	r2, #0
 8004568:	701a      	strb	r2, [r3, #0]
                }
                break;
 800456a:	e00b      	b.n	8004584 <SCPI_ParamCopyText+0x100>
            default:
                SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 800456c:	2368      	movs	r3, #104	@ 0x68
 800456e:	425a      	negs	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	0011      	movs	r1, r2
 8004574:	0018      	movs	r0, r3
 8004576:	f7fd f8f9 	bl	800176c <SCPI_ErrorPush>
                result = FALSE;
 800457a:	232f      	movs	r3, #47	@ 0x2f
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	2200      	movs	r2, #0
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	e000      	b.n	8004586 <SCPI_ParamCopyText+0x102>
                break;
 8004584:	46c0      	nop			@ (mov r8, r8)
        }
    }

    return result;
 8004586:	232f      	movs	r3, #47	@ 0x2f
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	781b      	ldrb	r3, [r3, #0]
}
 800458c:	0018      	movs	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	b00d      	add	sp, #52	@ 0x34
 8004592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004594:	fffffeca 	.word	0xfffffeca

08004598 <SCPI_ParamToChoice>:
 * @param parameter - should be PROGRAM_MNEMONIC
 * @param options - NULL terminated list of choices
 * @param value - index to options
 * @return
 */
scpi_bool_t SCPI_ParamToChoice(scpi_t * context, scpi_parameter_t * parameter, const scpi_choice_def_t * options, int32_t * value) {
 8004598:	b590      	push	{r4, r7, lr}
 800459a:	b089      	sub	sp, #36	@ 0x24
 800459c:	af02      	add	r7, sp, #8
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
    size_t res;
    scpi_bool_t result = FALSE;
 80045a6:	2313      	movs	r3, #19
 80045a8:	18fb      	adds	r3, r7, r3
 80045aa:	2200      	movs	r2, #0
 80045ac:	701a      	strb	r2, [r3, #0]

    if (!options || !value) {
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <SCPI_ParamToChoice+0x22>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d107      	bne.n	80045ca <SCPI_ParamToChoice+0x32>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 80045ba:	4a2f      	ldr	r2, [pc, #188]	@ (8004678 <SCPI_ParamToChoice+0xe0>)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	0011      	movs	r1, r2
 80045c0:	0018      	movs	r0, r3
 80045c2:	f7fd f8d3 	bl	800176c <SCPI_ErrorPush>
        return FALSE;
 80045c6:	2300      	movs	r3, #0
 80045c8:	e051      	b.n	800466e <SCPI_ParamToChoice+0xd6>
    }

    if (parameter->type == SCPI_TOKEN_PROGRAM_MNEMONIC) {
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b09      	cmp	r3, #9
 80045d0:	d143      	bne.n	800465a <SCPI_ParamToChoice+0xc2>
        for (res = 0; options[res].name; ++res) {
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	e029      	b.n	800462c <SCPI_ParamToChoice+0x94>
            if (matchPattern(options[res].name, strlen(options[res].name), parameter->ptr, parameter->len, NULL)) {
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	18d3      	adds	r3, r2, r3
 80045e0:	681c      	ldr	r4, [r3, #0]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	18d3      	adds	r3, r2, r3
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	0018      	movs	r0, r3
 80045ee:	f7fb fd8b 	bl	8000108 <strlen>
 80045f2:	0001      	movs	r1, r0
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	0018      	movs	r0, r3
 80045fe:	2300      	movs	r3, #0
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	0003      	movs	r3, r0
 8004604:	0020      	movs	r0, r4
 8004606:	f000 fcd7 	bl	8004fb8 <matchPattern>
 800460a:	1e03      	subs	r3, r0, #0
 800460c:	d00b      	beq.n	8004626 <SCPI_ParamToChoice+0x8e>
                *value = options[res].tag;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	18d3      	adds	r3, r2, r3
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	601a      	str	r2, [r3, #0]
                result = TRUE;
 800461c:	2313      	movs	r3, #19
 800461e:	18fb      	adds	r3, r7, r3
 8004620:	2201      	movs	r2, #1
 8004622:	701a      	strb	r2, [r3, #0]
                break;
 8004624:	e009      	b.n	800463a <SCPI_ParamToChoice+0xa2>
        for (res = 0; options[res].name; ++res) {
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	3301      	adds	r3, #1
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	18d3      	adds	r3, r2, r3
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1ce      	bne.n	80045d8 <SCPI_ParamToChoice+0x40>
            }
        }

        if (!result) {
 800463a:	2313      	movs	r3, #19
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2201      	movs	r2, #1
 8004642:	4053      	eors	r3, r2
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00e      	beq.n	8004668 <SCPI_ParamToChoice+0xd0>
            SCPI_ErrorPush(context, SCPI_ERROR_ILLEGAL_PARAMETER_VALUE);
 800464a:	23e0      	movs	r3, #224	@ 0xe0
 800464c:	425a      	negs	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	0011      	movs	r1, r2
 8004652:	0018      	movs	r0, r3
 8004654:	f7fd f88a 	bl	800176c <SCPI_ErrorPush>
 8004658:	e006      	b.n	8004668 <SCPI_ParamToChoice+0xd0>
        }
    } else {
        SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 800465a:	2368      	movs	r3, #104	@ 0x68
 800465c:	425a      	negs	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	0011      	movs	r1, r2
 8004662:	0018      	movs	r0, r3
 8004664:	f7fd f882 	bl	800176c <SCPI_ErrorPush>
    }

    return result;
 8004668:	2313      	movs	r3, #19
 800466a:	18fb      	adds	r3, r7, r3
 800466c:	781b      	ldrb	r3, [r3, #0]
}
 800466e:	0018      	movs	r0, r3
 8004670:	46bd      	mov	sp, r7
 8004672:	b007      	add	sp, #28
 8004674:	bd90      	pop	{r4, r7, pc}
 8004676:	46c0      	nop			@ (mov r8, r8)
 8004678:	fffffeca 	.word	0xfffffeca

0800467c <SCPI_ChoiceToName>:
 * @param options specifications of choices numbers (patterns)
 * @param tag numerical representatio of choice
 * @param text result text
 * @return TRUE if succesfule, else FALSE
 */
scpi_bool_t SCPI_ChoiceToName(const scpi_choice_def_t * options, int32_t tag, const char ** text) {
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
    int i;

    for (i = 0; options[i].name != NULL; i++) {
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	e013      	b.n	80046b6 <SCPI_ChoiceToName+0x3a>
        if (options[i].tag == tag) {
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	18d3      	adds	r3, r2, r3
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	429a      	cmp	r2, r3
 800469c:	d108      	bne.n	80046b0 <SCPI_ChoiceToName+0x34>
            *text = options[i].name;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	18d3      	adds	r3, r2, r3
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	601a      	str	r2, [r3, #0]
            return TRUE;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e00a      	b.n	80046c6 <SCPI_ChoiceToName+0x4a>
    for (i = 0; options[i].name != NULL; i++) {
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	3301      	adds	r3, #1
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	18d3      	adds	r3, r2, r3
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1e4      	bne.n	800468e <SCPI_ChoiceToName+0x12>
        }
    }

    return FALSE;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	0018      	movs	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b006      	add	sp, #24
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <SCPI_ParamBool>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamBool(scpi_t * context, scpi_bool_t * value, scpi_bool_t mandatory) {
 80046d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046d2:	b08b      	sub	sp, #44	@ 0x2c
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	1dfb      	adds	r3, r7, #7
 80046dc:	701a      	strb	r2, [r3, #0]
    scpi_bool_t result;
    scpi_parameter_t param;
    int32_t intval;

    if (!value) {
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d107      	bne.n	80046f4 <SCPI_ParamBool+0x24>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 80046e4:	4a23      	ldr	r2, [pc, #140]	@ (8004774 <SCPI_ParamBool+0xa4>)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	0011      	movs	r1, r2
 80046ea:	0018      	movs	r0, r3
 80046ec:	f7fd f83e 	bl	800176c <SCPI_ErrorPush>
        return FALSE;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e03a      	b.n	800476a <SCPI_ParamBool+0x9a>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 80046f4:	2627      	movs	r6, #39	@ 0x27
 80046f6:	19bc      	adds	r4, r7, r6
 80046f8:	1dfb      	adds	r3, r7, #7
 80046fa:	781a      	ldrb	r2, [r3, #0]
 80046fc:	2518      	movs	r5, #24
 80046fe:	1979      	adds	r1, r7, r5
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	0018      	movs	r0, r3
 8004704:	f7ff fce8 	bl	80040d8 <SCPI_Parameter>
 8004708:	0003      	movs	r3, r0
 800470a:	7023      	strb	r3, [r4, #0]

    if (result) {
 800470c:	19bb      	adds	r3, r7, r6
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d027      	beq.n	8004764 <SCPI_ParamBool+0x94>
        if (param.type == SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA) {
 8004714:	197b      	adds	r3, r7, r5
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b0a      	cmp	r3, #10
 800471a:	d10d      	bne.n	8004738 <SCPI_ParamBool+0x68>
            SCPI_ParamToInt32(context, &param, &intval);
 800471c:	2314      	movs	r3, #20
 800471e:	18fa      	adds	r2, r7, r3
 8004720:	1979      	adds	r1, r7, r5
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	0018      	movs	r0, r3
 8004726:	f7ff fddb 	bl	80042e0 <SCPI_ParamToInt32>
            *value = intval ? TRUE : FALSE;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	1e5a      	subs	r2, r3, #1
 800472e:	4193      	sbcs	r3, r2
 8004730:	b2da      	uxtb	r2, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e015      	b.n	8004764 <SCPI_ParamBool+0x94>
        } else {
            result = SCPI_ParamToChoice(context, &param, scpi_bool_def, &intval);
 8004738:	2527      	movs	r5, #39	@ 0x27
 800473a:	197c      	adds	r4, r7, r5
 800473c:	2314      	movs	r3, #20
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	4a0d      	ldr	r2, [pc, #52]	@ (8004778 <SCPI_ParamBool+0xa8>)
 8004742:	2118      	movs	r1, #24
 8004744:	1879      	adds	r1, r7, r1
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f7ff ff26 	bl	8004598 <SCPI_ParamToChoice>
 800474c:	0003      	movs	r3, r0
 800474e:	7023      	strb	r3, [r4, #0]
            if (result) {
 8004750:	197b      	adds	r3, r7, r5
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <SCPI_ParamBool+0x94>
                *value = intval ? TRUE : FALSE;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	1e5a      	subs	r2, r3, #1
 800475c:	4193      	sbcs	r3, r2
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    return result;
 8004764:	2327      	movs	r3, #39	@ 0x27
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	781b      	ldrb	r3, [r3, #0]
}
 800476a:	0018      	movs	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	b00b      	add	sp, #44	@ 0x2c
 8004770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	fffffeca 	.word	0xfffffeca
 8004778:	0800ea60 	.word	0x0800ea60

0800477c <SCPI_ParamChoice>:
 * @param options
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamChoice(scpi_t * context, const scpi_choice_def_t * options, int32_t * value, scpi_bool_t mandatory) {
 800477c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477e:	b089      	sub	sp, #36	@ 0x24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	001a      	movs	r2, r3
 800478a:	1cfb      	adds	r3, r7, #3
 800478c:	701a      	strb	r2, [r3, #0]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!options || !value) {
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <SCPI_ParamChoice+0x1e>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d107      	bne.n	80047aa <SCPI_ParamChoice+0x2e>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 800479a:	4a14      	ldr	r2, [pc, #80]	@ (80047ec <SCPI_ParamChoice+0x70>)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	0011      	movs	r1, r2
 80047a0:	0018      	movs	r0, r3
 80047a2:	f7fc ffe3 	bl	800176c <SCPI_ErrorPush>
        return FALSE;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e01b      	b.n	80047e2 <SCPI_ParamChoice+0x66>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 80047aa:	251f      	movs	r5, #31
 80047ac:	197c      	adds	r4, r7, r5
 80047ae:	1cfb      	adds	r3, r7, #3
 80047b0:	781a      	ldrb	r2, [r3, #0]
 80047b2:	2610      	movs	r6, #16
 80047b4:	19b9      	adds	r1, r7, r6
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7ff fc8d 	bl	80040d8 <SCPI_Parameter>
 80047be:	0003      	movs	r3, r0
 80047c0:	7023      	strb	r3, [r4, #0]
    if (result) {
 80047c2:	197b      	adds	r3, r7, r5
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d008      	beq.n	80047dc <SCPI_ParamChoice+0x60>
        result = SCPI_ParamToChoice(context, &param, options, value);
 80047ca:	197c      	adds	r4, r7, r5
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	19b9      	adds	r1, r7, r6
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f7ff fee0 	bl	8004598 <SCPI_ParamToChoice>
 80047d8:	0003      	movs	r3, r0
 80047da:	7023      	strb	r3, [r4, #0]
    }

    return result;
 80047dc:	231f      	movs	r3, #31
 80047de:	18fb      	adds	r3, r7, r3
 80047e0:	781b      	ldrb	r3, [r3, #0]
}
 80047e2:	0018      	movs	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b009      	add	sp, #36	@ 0x24
 80047e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047ea:	46c0      	nop			@ (mov r8, r8)
 80047ec:	fffffeca 	.word	0xfffffeca

080047f0 <scpiParser_parseProgramData>:
 * Parse one parameter and detect type
 * @param state
 * @param token
 * @return
 */
int scpiParser_parseProgramData(lex_state_t * state, scpi_token_t * token) {
 80047f0:	b590      	push	{r4, r7, lr}
 80047f2:	b08b      	sub	sp, #44	@ 0x2c
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
    scpi_token_t tmp;
    int result = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	627b      	str	r3, [r7, #36]	@ 0x24
    int wsLen;
    int suffixLen;
    int realLen = 0;
 80047fe:	2300      	movs	r3, #0
 8004800:	623b      	str	r3, [r7, #32]
    realLen += scpiLex_WhiteSpace(state, &tmp);
 8004802:	230c      	movs	r3, #12
 8004804:	18fa      	adds	r2, r7, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	0011      	movs	r1, r2
 800480a:	0018      	movs	r0, r3
 800480c:	f7fe f80e 	bl	800282c <scpiLex_WhiteSpace>
 8004810:	0002      	movs	r2, r0
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	189b      	adds	r3, r3, r2
 8004816:	623b      	str	r3, [r7, #32]

    if (result == 0) result = scpiLex_NondecimalNumericData(state, token);
 8004818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481a:	2b00      	cmp	r3, #0
 800481c:	d107      	bne.n	800482e <scpiParser_parseProgramData+0x3e>
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	0011      	movs	r1, r2
 8004824:	0018      	movs	r0, r3
 8004826:	f7fe fa99 	bl	8002d5c <scpiLex_NondecimalNumericData>
 800482a:	0003      	movs	r3, r0
 800482c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (result == 0) result = scpiLex_CharacterProgramData(state, token);
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	2b00      	cmp	r3, #0
 8004832:	d107      	bne.n	8004844 <scpiParser_parseProgramData+0x54>
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0011      	movs	r1, r2
 800483a:	0018      	movs	r0, r3
 800483c:	f7fe f8ec 	bl	8002a18 <scpiLex_CharacterProgramData>
 8004840:	0003      	movs	r3, r0
 8004842:	627b      	str	r3, [r7, #36]	@ 0x24
    if (result == 0) {
 8004844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004846:	2b00      	cmp	r3, #0
 8004848:	d12c      	bne.n	80048a4 <scpiParser_parseProgramData+0xb4>
        result = scpiLex_DecimalNumericProgramData(state, token);
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	0011      	movs	r1, r2
 8004850:	0018      	movs	r0, r3
 8004852:	f7fe f98b 	bl	8002b6c <scpiLex_DecimalNumericProgramData>
 8004856:	0003      	movs	r3, r0
 8004858:	627b      	str	r3, [r7, #36]	@ 0x24
        if (result != 0) {
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	2b00      	cmp	r3, #0
 800485e:	d021      	beq.n	80048a4 <scpiParser_parseProgramData+0xb4>
            wsLen = scpiLex_WhiteSpace(state, &tmp);
 8004860:	240c      	movs	r4, #12
 8004862:	193a      	adds	r2, r7, r4
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	0011      	movs	r1, r2
 8004868:	0018      	movs	r0, r3
 800486a:	f7fd ffdf 	bl	800282c <scpiLex_WhiteSpace>
 800486e:	0003      	movs	r3, r0
 8004870:	61fb      	str	r3, [r7, #28]
            suffixLen = scpiLex_SuffixProgramData(state, &tmp);
 8004872:	193a      	adds	r2, r7, r4
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	0011      	movs	r1, r2
 8004878:	0018      	movs	r0, r3
 800487a:	f7fe f9b3 	bl	8002be4 <scpiLex_SuffixProgramData>
 800487e:	0003      	movs	r3, r0
 8004880:	61bb      	str	r3, [r7, #24]
            if (suffixLen > 0) {
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	dd0d      	ble.n	80048a4 <scpiParser_parseProgramData+0xb4>
                token->len += wsLen + suffixLen;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	69f9      	ldr	r1, [r7, #28]
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	18cb      	adds	r3, r1, r3
 8004892:	18d2      	adds	r2, r2, r3
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	609a      	str	r2, [r3, #8]
                token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	220b      	movs	r2, #11
 800489c:	701a      	strb	r2, [r3, #0]
                result = token->len;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    if (result == 0) result = scpiLex_StringProgramData(state, token);
 80048a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d107      	bne.n	80048ba <scpiParser_parseProgramData+0xca>
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	0011      	movs	r1, r2
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7fe fb55 	bl	8002f60 <scpiLex_StringProgramData>
 80048b6:	0003      	movs	r3, r0
 80048b8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (result == 0) result = scpiLex_ArbitraryBlockProgramData(state, token);
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d107      	bne.n	80048d0 <scpiParser_parseProgramData+0xe0>
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	0011      	movs	r1, r2
 80048c6:	0018      	movs	r0, r3
 80048c8:	f7fe fbf4 	bl	80030b4 <scpiLex_ArbitraryBlockProgramData>
 80048cc:	0003      	movs	r3, r0
 80048ce:	627b      	str	r3, [r7, #36]	@ 0x24
    if (result == 0) result = scpiLex_ProgramExpression(state, token);
 80048d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d107      	bne.n	80048e6 <scpiParser_parseProgramData+0xf6>
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	0011      	movs	r1, r2
 80048dc:	0018      	movs	r0, r3
 80048de:	f7fe fce8 	bl	80032b2 <scpiLex_ProgramExpression>
 80048e2:	0003      	movs	r3, r0
 80048e4:	627b      	str	r3, [r7, #36]	@ 0x24

    realLen += scpiLex_WhiteSpace(state, &tmp);
 80048e6:	230c      	movs	r3, #12
 80048e8:	18fa      	adds	r2, r7, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	0011      	movs	r1, r2
 80048ee:	0018      	movs	r0, r3
 80048f0:	f7fd ff9c 	bl	800282c <scpiLex_WhiteSpace>
 80048f4:	0002      	movs	r2, r0
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	189b      	adds	r3, r3, r2
 80048fa:	623b      	str	r3, [r7, #32]

    return result + realLen;
 80048fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	18d3      	adds	r3, r2, r3
}
 8004902:	0018      	movs	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	b00b      	add	sp, #44	@ 0x2c
 8004908:	bd90      	pop	{r4, r7, pc}

0800490a <scpiParser_parseAllProgramData>:
 * @param state
 * @param token
 * @param numberOfParameters
 * @return
 */
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 800490a:	b590      	push	{r4, r7, lr}
 800490c:	b08b      	sub	sp, #44	@ 0x2c
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]

    int result;
    scpi_token_t tmp;
    int paramCount = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	623b      	str	r3, [r7, #32]

    token->len = -1;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2201      	movs	r2, #1
 800491e:	4252      	negs	r2, r2
 8004920:	609a      	str	r2, [r3, #8]
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2218      	movs	r2, #24
 8004926:	701a      	strb	r2, [r3, #0]
    token->ptr = state->pos;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	605a      	str	r2, [r3, #4]


    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 8004930:	2301      	movs	r3, #1
 8004932:	627b      	str	r3, [r7, #36]	@ 0x24
 8004934:	e03c      	b.n	80049b0 <scpiParser_parseAllProgramData+0xa6>
        token->len += result;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493c:	18d2      	adds	r2, r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	609a      	str	r2, [r3, #8]

        if (result == 0) {
 8004942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <scpiParser_parseAllProgramData+0x52>
            token->type = SCPI_TOKEN_UNKNOWN;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	221a      	movs	r2, #26
 800494c:	701a      	strb	r2, [r3, #0]
            token->len = 0;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2200      	movs	r2, #0
 8004952:	609a      	str	r2, [r3, #8]
            paramCount = -1;
 8004954:	2301      	movs	r3, #1
 8004956:	425b      	negs	r3, r3
 8004958:	623b      	str	r3, [r7, #32]
            break;
 800495a:	e02c      	b.n	80049b6 <scpiParser_parseAllProgramData+0xac>
        }

        result = scpiParser_parseProgramData(state, &tmp);
 800495c:	2414      	movs	r4, #20
 800495e:	193a      	adds	r2, r7, r4
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	0011      	movs	r1, r2
 8004964:	0018      	movs	r0, r3
 8004966:	f7ff ff43 	bl	80047f0 <scpiParser_parseProgramData>
 800496a:	0003      	movs	r3, r0
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24
        if (tmp.type != SCPI_TOKEN_UNKNOWN) {
 800496e:	193b      	adds	r3, r7, r4
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b1a      	cmp	r3, #26
 8004974:	d006      	beq.n	8004984 <scpiParser_parseAllProgramData+0x7a>
            token->len += result;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497c:	18d2      	adds	r2, r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	609a      	str	r2, [r3, #8]
 8004982:	e009      	b.n	8004998 <scpiParser_parseAllProgramData+0x8e>
        } else {
            token->type = SCPI_TOKEN_UNKNOWN;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	221a      	movs	r2, #26
 8004988:	701a      	strb	r2, [r3, #0]
            token->len = 0;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2200      	movs	r2, #0
 800498e:	609a      	str	r2, [r3, #8]
            paramCount = -1;
 8004990:	2301      	movs	r3, #1
 8004992:	425b      	negs	r3, r3
 8004994:	623b      	str	r3, [r7, #32]
            break;
 8004996:	e00e      	b.n	80049b6 <scpiParser_parseAllProgramData+0xac>
        }
        paramCount++;
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	3301      	adds	r3, #1
 800499c:	623b      	str	r3, [r7, #32]
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 800499e:	2314      	movs	r3, #20
 80049a0:	18fa      	adds	r2, r7, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	0011      	movs	r1, r2
 80049a6:	0018      	movs	r0, r3
 80049a8:	f7fe fcd7 	bl	800335a <scpiLex_Comma>
 80049ac:	0003      	movs	r3, r0
 80049ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80049b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1bf      	bne.n	8004936 <scpiParser_parseAllProgramData+0x2c>
    }

    if (token->len == -1) {
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	3301      	adds	r3, #1
 80049bc:	d102      	bne.n	80049c4 <scpiParser_parseAllProgramData+0xba>
        token->len = 0;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2200      	movs	r2, #0
 80049c2:	609a      	str	r2, [r3, #8]
    }

    if (numberOfParameters != NULL) {
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <scpiParser_parseAllProgramData+0xc6>
        *numberOfParameters = paramCount;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a3a      	ldr	r2, [r7, #32]
 80049ce:	601a      	str	r2, [r3, #0]
    }
    return token->len;
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	689b      	ldr	r3, [r3, #8]
}
 80049d4:	0018      	movs	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	b00b      	add	sp, #44	@ 0x2c
 80049da:	bd90      	pop	{r4, r7, pc}

080049dc <scpiParser_detectProgramMessageUnit>:
 * @param state
 * @param buffer
 * @param len
 * @return
 */
int scpiParser_detectProgramMessageUnit(scpi_parser_state_t * state, char * buffer, int len) {
 80049dc:	b5b0      	push	{r4, r5, r7, lr}
 80049de:	b08c      	sub	sp, #48	@ 0x30
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
    lex_state_t lex_state;
    scpi_token_t tmp;
    int result = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

    lex_state.buffer = lex_state.pos = buffer;
 80049ec:	2420      	movs	r4, #32
 80049ee:	193b      	adds	r3, r7, r4
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	605a      	str	r2, [r3, #4]
 80049f4:	193b      	adds	r3, r7, r4
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	193b      	adds	r3, r7, r4
 80049fa:	601a      	str	r2, [r3, #0]
    lex_state.len = len;
 80049fc:	193b      	adds	r3, r7, r4
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	609a      	str	r2, [r3, #8]
    state->numberOfParameters = 0;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	619a      	str	r2, [r3, #24]

    /* ignore whitespace at the begginig */
    scpiLex_WhiteSpace(&lex_state, &tmp);
 8004a08:	2514      	movs	r5, #20
 8004a0a:	197a      	adds	r2, r7, r5
 8004a0c:	193b      	adds	r3, r7, r4
 8004a0e:	0011      	movs	r1, r2
 8004a10:	0018      	movs	r0, r3
 8004a12:	f7fd ff0b 	bl	800282c <scpiLex_WhiteSpace>

    if (scpiLex_ProgramHeader(&lex_state, &state->programHeader) >= 0) {
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	193b      	adds	r3, r7, r4
 8004a1a:	0011      	movs	r1, r2
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7fd ff95 	bl	800294c <scpiLex_ProgramHeader>
 8004a22:	1e03      	subs	r3, r0, #0
 8004a24:	db1d      	blt.n	8004a62 <scpiParser_detectProgramMessageUnit+0x86>
        if (scpiLex_WhiteSpace(&lex_state, &tmp) > 0) {
 8004a26:	197a      	adds	r2, r7, r5
 8004a28:	193b      	adds	r3, r7, r4
 8004a2a:	0011      	movs	r1, r2
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f7fd fefd 	bl	800282c <scpiLex_WhiteSpace>
 8004a32:	1e03      	subs	r3, r0, #0
 8004a34:	dd0a      	ble.n	8004a4c <scpiParser_detectProgramMessageUnit+0x70>
            scpiParser_parseAllProgramData(&lex_state, &state->programData, &state->numberOfParameters);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	330c      	adds	r3, #12
 8004a3a:	0019      	movs	r1, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	3318      	adds	r3, #24
 8004a40:	001a      	movs	r2, r3
 8004a42:	193b      	adds	r3, r7, r4
 8004a44:	0018      	movs	r0, r3
 8004a46:	f7ff ff60 	bl	800490a <scpiParser_parseAllProgramData>
 8004a4a:	e01b      	b.n	8004a84 <scpiParser_detectProgramMessageUnit+0xa8>
        } else {
            invalidateToken(&state->programData, lex_state.pos);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	330c      	adds	r3, #12
 8004a50:	001a      	movs	r2, r3
 8004a52:	2320      	movs	r3, #32
 8004a54:	18fb      	adds	r3, r7, r3
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	0019      	movs	r1, r3
 8004a5a:	0010      	movs	r0, r2
 8004a5c:	f7ff fb29 	bl	80040b2 <invalidateToken>
 8004a60:	e010      	b.n	8004a84 <scpiParser_detectProgramMessageUnit+0xa8>
        }
    } else {
        invalidateToken(&state->programHeader, lex_state.buffer);
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	2420      	movs	r4, #32
 8004a66:	193b      	adds	r3, r7, r4
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	0019      	movs	r1, r3
 8004a6c:	0010      	movs	r0, r2
 8004a6e:	f7ff fb20 	bl	80040b2 <invalidateToken>
        invalidateToken(&state->programData, lex_state.buffer);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	330c      	adds	r3, #12
 8004a76:	001a      	movs	r2, r3
 8004a78:	193b      	adds	r3, r7, r4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	0019      	movs	r1, r3
 8004a7e:	0010      	movs	r0, r2
 8004a80:	f7ff fb17 	bl	80040b2 <invalidateToken>
    }

    if (result == 0) result = scpiLex_NewLine(&lex_state, &tmp);
 8004a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <scpiParser_detectProgramMessageUnit+0xc2>
 8004a8a:	2314      	movs	r3, #20
 8004a8c:	18fa      	adds	r2, r7, r3
 8004a8e:	2320      	movs	r3, #32
 8004a90:	18fb      	adds	r3, r7, r3
 8004a92:	0011      	movs	r1, r2
 8004a94:	0018      	movs	r0, r3
 8004a96:	f7fe fcf0 	bl	800347a <scpiLex_NewLine>
 8004a9a:	0003      	movs	r3, r0
 8004a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (result == 0) result = scpiLex_Semicolon(&lex_state, &tmp);
 8004a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d109      	bne.n	8004ab8 <scpiParser_detectProgramMessageUnit+0xdc>
 8004aa4:	2314      	movs	r3, #20
 8004aa6:	18fa      	adds	r2, r7, r3
 8004aa8:	2320      	movs	r3, #32
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	0011      	movs	r1, r2
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f7fe fc76 	bl	80033a0 <scpiLex_Semicolon>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (!scpiLex_IsEos(&lex_state) && (result == 0)) {
 8004ab8:	2420      	movs	r4, #32
 8004aba:	193b      	adds	r3, r7, r4
 8004abc:	0018      	movs	r0, r3
 8004abe:	f7fd fcbb 	bl	8002438 <scpiLex_IsEos>
 8004ac2:	1e03      	subs	r3, r0, #0
 8004ac4:	d117      	bne.n	8004af6 <scpiParser_detectProgramMessageUnit+0x11a>
 8004ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d114      	bne.n	8004af6 <scpiParser_detectProgramMessageUnit+0x11a>
        lex_state.pos++;
 8004acc:	0021      	movs	r1, r4
 8004ace:	187b      	adds	r3, r7, r1
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	187b      	adds	r3, r7, r1
 8004ad6:	605a      	str	r2, [r3, #4]

        state->programHeader.len = 1;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2201      	movs	r2, #1
 8004adc:	609a      	str	r2, [r3, #8]
        state->programHeader.type = SCPI_TOKEN_INVALID;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2219      	movs	r2, #25
 8004ae2:	701a      	strb	r2, [r3, #0]

        invalidateToken(&state->programData, lex_state.buffer);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	330c      	adds	r3, #12
 8004ae8:	001a      	movs	r2, r3
 8004aea:	187b      	adds	r3, r7, r1
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	0019      	movs	r1, r3
 8004af0:	0010      	movs	r0, r2
 8004af2:	f7ff fade 	bl	80040b2 <invalidateToken>
    }

    if (SCPI_TOKEN_SEMICOLON == tmp.type) {
 8004af6:	2314      	movs	r3, #20
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d103      	bne.n	8004b08 <scpiParser_detectProgramMessageUnit+0x12c>
        state->termination = SCPI_MESSAGE_TERMINATION_SEMICOLON;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2202      	movs	r2, #2
 8004b04:	771a      	strb	r2, [r3, #28]
 8004b06:	e00b      	b.n	8004b20 <scpiParser_detectProgramMessageUnit+0x144>
    } else if (SCPI_TOKEN_NL == tmp.type) {
 8004b08:	2314      	movs	r3, #20
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b05      	cmp	r3, #5
 8004b10:	d103      	bne.n	8004b1a <scpiParser_detectProgramMessageUnit+0x13e>
        state->termination = SCPI_MESSAGE_TERMINATION_NL;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	771a      	strb	r2, [r3, #28]
 8004b18:	e002      	b.n	8004b20 <scpiParser_detectProgramMessageUnit+0x144>
    } else {
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	771a      	strb	r2, [r3, #28]
    }

    return lex_state.pos - lex_state.buffer;
 8004b20:	2120      	movs	r1, #32
 8004b22:	187b      	adds	r3, r7, r1
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	187b      	adds	r3, r7, r1
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	1ad3      	subs	r3, r2, r3
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b00c      	add	sp, #48	@ 0x30
 8004b32:	bdb0      	pop	{r4, r5, r7, pc}

08004b34 <SCPI_CommandNumbers>:

scpi_bool_t SCPI_Match(const char * pattern, const char * value, size_t len) {
    return matchCommand(pattern, value, len, NULL, 0, 0);
}

scpi_bool_t SCPI_CommandNumbers(scpi_t * context, int32_t * numbers, size_t len, int32_t default_value) {
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
    return matchCommand(context->param_list.cmd->pattern, context->param_list.cmd_raw.data, context->param_list.cmd_raw.length, numbers, len, default_value);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a1a      	ldr	r2, [r3, #32]
 8004b50:	68bc      	ldr	r4, [r7, #8]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	0023      	movs	r3, r4
 8004b5c:	f000 fa89 	bl	8005072 <matchCommand>
 8004b60:	0003      	movs	r3, r0
}
 8004b62:	0018      	movs	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b005      	add	sp, #20
 8004b68:	bd90      	pop	{r4, r7, pc}

08004b6a <strnpbrk>:
 * @param str
 * @param size
 * @param set
 * @return
 */
char * strnpbrk(const char *str, size_t size, const char *set) {
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b088      	sub	sp, #32
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	607a      	str	r2, [r7, #4]
    const char *scanp;
    long c, sc;
    const char * strend = str + size;
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	18d3      	adds	r3, r2, r3
 8004b7c:	61bb      	str	r3, [r7, #24]

    while ((strend != str) && ((c = *str++) != 0)) {
 8004b7e:	e011      	b.n	8004ba4 <strnpbrk+0x3a>
        for (scanp = set; (sc = *scanp++) != '\0';)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	61fb      	str	r3, [r7, #28]
 8004b84:	e006      	b.n	8004b94 <strnpbrk+0x2a>
            if (sc == c)
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d102      	bne.n	8004b94 <strnpbrk+0x2a>
                return ((char *) (str - 1));
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	e014      	b.n	8004bbe <strnpbrk+0x54>
        for (scanp = set; (sc = *scanp++) != '\0';)
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	61fa      	str	r2, [r7, #28]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1f0      	bne.n	8004b86 <strnpbrk+0x1c>
    while ((strend != str) && ((c = *str++) != 0)) {
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d007      	beq.n	8004bbc <strnpbrk+0x52>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	60fa      	str	r2, [r7, #12]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e1      	bne.n	8004b80 <strnpbrk+0x16>
    }
    return (NULL);
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b008      	add	sp, #32
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <UInt32ToStrBaseSign>:
 * @param len   string buffer length
 * @param base  output base
 * @param sign
 * @return number of bytes written to str (without '\0')
 */
size_t UInt32ToStrBaseSign(uint32_t val, char * str, size_t len, int8_t base, scpi_bool_t sign) {
 8004bc8:	b590      	push	{r4, r7, lr}
 8004bca:	b08f      	sub	sp, #60	@ 0x3c
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	001a      	movs	r2, r3
 8004bd6:	1cfb      	adds	r3, r7, #3
 8004bd8:	701a      	strb	r2, [r3, #0]
    const char digits[] = "0123456789ABCDEF";
 8004bda:	2314      	movs	r3, #20
 8004bdc:	18fb      	adds	r3, r7, r3
 8004bde:	4a4e      	ldr	r2, [pc, #312]	@ (8004d18 <UInt32ToStrBaseSign+0x150>)
 8004be0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004be2:	c313      	stmia	r3!, {r0, r1, r4}
 8004be4:	6811      	ldr	r1, [r2, #0]
 8004be6:	6019      	str	r1, [r3, #0]
 8004be8:	7912      	ldrb	r2, [r2, #4]
 8004bea:	711a      	strb	r2, [r3, #4]

#define ADD_CHAR(c) if (pos < len) str[pos++] = (c)
    uint32_t x = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	637b      	str	r3, [r7, #52]	@ 0x34
    int_fast8_t digit;
    size_t pos = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t uval = val;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (uval == 0) {
 8004bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10c      	bne.n	8004c18 <UInt32ToStrBaseSign+0x50>
        ADD_CHAR('0');
 8004bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d300      	bcc.n	8004c08 <UInt32ToStrBaseSign+0x40>
 8004c06:	e079      	b.n	8004cfc <UInt32ToStrBaseSign+0x134>
 8004c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	18d3      	adds	r3, r2, r3
 8004c12:	2230      	movs	r2, #48	@ 0x30
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	e071      	b.n	8004cfc <UInt32ToStrBaseSign+0x134>
    } else {

        switch (base) {
 8004c18:	1cfb      	adds	r3, r7, #3
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	b25b      	sxtb	r3, r3
 8004c1e:	2b10      	cmp	r3, #16
 8004c20:	d013      	beq.n	8004c4a <UInt32ToStrBaseSign+0x82>
 8004c22:	dc0c      	bgt.n	8004c3e <UInt32ToStrBaseSign+0x76>
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d002      	beq.n	8004c2e <UInt32ToStrBaseSign+0x66>
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d004      	beq.n	8004c36 <UInt32ToStrBaseSign+0x6e>
 8004c2c:	e007      	b.n	8004c3e <UInt32ToStrBaseSign+0x76>
            case 2:
                x = 0x80000000L;
 8004c2e:	2380      	movs	r3, #128	@ 0x80
 8004c30:	061b      	lsls	r3, r3, #24
 8004c32:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 8004c34:	e00d      	b.n	8004c52 <UInt32ToStrBaseSign+0x8a>
            case 8:
                x = 0x40000000L;
 8004c36:	2380      	movs	r3, #128	@ 0x80
 8004c38:	05db      	lsls	r3, r3, #23
 8004c3a:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 8004c3c:	e009      	b.n	8004c52 <UInt32ToStrBaseSign+0x8a>
            default:
            case 10:
                base = 10;
 8004c3e:	1cfb      	adds	r3, r7, #3
 8004c40:	220a      	movs	r2, #10
 8004c42:	701a      	strb	r2, [r3, #0]
                x = 1000000000L;
 8004c44:	4b35      	ldr	r3, [pc, #212]	@ (8004d1c <UInt32ToStrBaseSign+0x154>)
 8004c46:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 8004c48:	e003      	b.n	8004c52 <UInt32ToStrBaseSign+0x8a>
            case 16:
                x = 0x10000000L;
 8004c4a:	2380      	movs	r3, #128	@ 0x80
 8004c4c:	055b      	lsls	r3, r3, #21
 8004c4e:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 8004c50:	46c0      	nop			@ (mov r8, r8)
        }

        /* add sign for numbers in base 10 */
        if (sign && ((int32_t) val < 0) && (base == 10)) {
 8004c52:	2348      	movs	r3, #72	@ 0x48
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01f      	beq.n	8004c9c <UInt32ToStrBaseSign+0xd4>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	da1c      	bge.n	8004c9c <UInt32ToStrBaseSign+0xd4>
 8004c62:	1cfb      	adds	r3, r7, #3
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	b25b      	sxtb	r3, r3
 8004c68:	2b0a      	cmp	r3, #10
 8004c6a:	d117      	bne.n	8004c9c <UInt32ToStrBaseSign+0xd4>
            uval = -val;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	425b      	negs	r3, r3
 8004c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
            ADD_CHAR('-');
 8004c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d210      	bcs.n	8004c9c <UInt32ToStrBaseSign+0xd4>
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	18d3      	adds	r3, r2, r3
 8004c84:	222d      	movs	r2, #45	@ 0x2d
 8004c86:	701a      	strb	r2, [r3, #0]
        }

        /* remove leading zeros */
        while ((uval / x) == 0) {
 8004c88:	e008      	b.n	8004c9c <UInt32ToStrBaseSign+0xd4>
            x /= base;
 8004c8a:	1cfb      	adds	r3, r7, #3
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	b25b      	sxtb	r3, r3
 8004c90:	0019      	movs	r1, r3
 8004c92:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004c94:	f7fb fa4a 	bl	800012c <__udivsi3>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	637b      	str	r3, [r7, #52]	@ 0x34
        while ((uval / x) == 0) {
 8004c9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d3f2      	bcc.n	8004c8a <UInt32ToStrBaseSign+0xc2>
        }

        do {
            digit = (uint8_t) (uval / x);
 8004ca4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004ca6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ca8:	f7fb fa40 	bl	800012c <__udivsi3>
 8004cac:	0003      	movs	r3, r0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
            ADD_CHAR(digits[digit]);
 8004cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d20a      	bcs.n	8004cd0 <UInt32ToStrBaseSign+0x108>
 8004cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	18d3      	adds	r3, r2, r3
 8004cc4:	2214      	movs	r2, #20
 8004cc6:	18b9      	adds	r1, r7, r2
 8004cc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cca:	188a      	adds	r2, r1, r2
 8004ccc:	7812      	ldrb	r2, [r2, #0]
 8004cce:	701a      	strb	r2, [r3, #0]
            uval -= digit * x;
 8004cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cd4:	4353      	muls	r3, r2
 8004cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
            x /= base;
 8004cdc:	1cfb      	adds	r3, r7, #3
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	b25b      	sxtb	r3, r3
 8004ce2:	0019      	movs	r1, r3
 8004ce4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004ce6:	f7fb fa21 	bl	800012c <__udivsi3>
 8004cea:	0003      	movs	r3, r0
 8004cec:	637b      	str	r3, [r7, #52]	@ 0x34
        } while (x && (pos < len));
 8004cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <UInt32ToStrBaseSign+0x134>
 8004cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d3d3      	bcc.n	8004ca4 <UInt32ToStrBaseSign+0xdc>
    }

    if (pos < len) str[pos] = 0;
 8004cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d204      	bcs.n	8004d0e <UInt32ToStrBaseSign+0x146>
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d08:	18d3      	adds	r3, r2, r3
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]
    return pos;
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
#undef ADD_CHAR
}
 8004d10:	0018      	movs	r0, r3
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b00f      	add	sp, #60	@ 0x3c
 8004d16:	bd90      	pop	{r4, r7, pc}
 8004d18:	0800e690 	.word	0x0800e690
 8004d1c:	3b9aca00 	.word	0x3b9aca00

08004d20 <SCPI_UInt32ToStrBase>:
 * @param str   converted textual representation
 * @param len   string buffer length
 * @param base  output base
 * @return number of bytes written to str (without '\0')
 */
size_t SCPI_UInt32ToStrBase(uint32_t val, char * str, size_t len, int8_t base) {
 8004d20:	b590      	push	{r4, r7, lr}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	1cfb      	adds	r3, r7, #3
 8004d30:	701a      	strb	r2, [r3, #0]
    return UInt32ToStrBaseSign(val, str, len, base, FALSE);
 8004d32:	1cfb      	adds	r3, r7, #3
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	b25b      	sxtb	r3, r3
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	68b9      	ldr	r1, [r7, #8]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	2400      	movs	r4, #0
 8004d40:	9400      	str	r4, [sp, #0]
 8004d42:	f7ff ff41 	bl	8004bc8 <UInt32ToStrBaseSign>
 8004d46:	0003      	movs	r3, r0
}
 8004d48:	0018      	movs	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	b005      	add	sp, #20
 8004d4e:	bd90      	pop	{r4, r7, pc}

08004d50 <SCPI_DoubleToStr>:
 * @param val   double value
 * @param str   converted textual representation
 * @param len   string buffer length
 * @return number of bytes written to str (without '\0')
 */
size_t SCPI_DoubleToStr(double val, char * str, size_t len) {
 8004d50:	b590      	push	{r4, r7, lr}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	60b8      	str	r0, [r7, #8]
 8004d58:	60f9      	str	r1, [r7, #12]
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	603b      	str	r3, [r7, #0]
    SCPIDEFINE_doubleToStr(val, str, len);
 8004d5e:	4c09      	ldr	r4, [pc, #36]	@ (8004d84 <SCPI_DoubleToStr+0x34>)
 8004d60:	6839      	ldr	r1, [r7, #0]
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	9200      	str	r2, [sp, #0]
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	0022      	movs	r2, r4
 8004d6e:	f008 fccd 	bl	800d70c <sniprintf>
    return strlen(str);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	0018      	movs	r0, r3
 8004d76:	f7fb f9c7 	bl	8000108 <strlen>
 8004d7a:	0003      	movs	r3, r0
}
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	b005      	add	sp, #20
 8004d82:	bd90      	pop	{r4, r7, pc}
 8004d84:	0800e6a8 	.word	0x0800e6a8

08004d88 <strBaseToInt32>:
 * Converts string to signed 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToInt32(const char * str, int32_t * val, int8_t base) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	1dfb      	adds	r3, r7, #7
 8004d94:	701a      	strb	r2, [r3, #0]
    char * endptr;
    *val = strtol(str, &endptr, base);
 8004d96:	1dfb      	adds	r3, r7, #7
 8004d98:	2200      	movs	r2, #0
 8004d9a:	569a      	ldrsb	r2, [r3, r2]
 8004d9c:	2314      	movs	r3, #20
 8004d9e:	18f9      	adds	r1, r7, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	0018      	movs	r0, r3
 8004da4:	f008 fc18 	bl	800d5d8 <strtol>
 8004da8:	0002      	movs	r2, r0
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	601a      	str	r2, [r3, #0]
    return endptr - str;
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	1ad3      	subs	r3, r2, r3
}
 8004db4:	0018      	movs	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b006      	add	sp, #24
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <strBaseToUInt32>:
 * Converts string to unsigned 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToUInt32(const char * str, uint32_t * val, int8_t base) {
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	1dfb      	adds	r3, r7, #7
 8004dc8:	701a      	strb	r2, [r3, #0]
    char * endptr;
    *val = strtoul(str, &endptr, base);
 8004dca:	1dfb      	adds	r3, r7, #7
 8004dcc:	2200      	movs	r2, #0
 8004dce:	569a      	ldrsb	r2, [r3, r2]
 8004dd0:	2314      	movs	r3, #20
 8004dd2:	18f9      	adds	r1, r7, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f008 fc8c 	bl	800d6f4 <strtoul>
 8004ddc:	0002      	movs	r2, r0
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	601a      	str	r2, [r3, #0]
    return endptr - str;
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	1ad3      	subs	r3, r2, r3
}
 8004de8:	0018      	movs	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b006      	add	sp, #24
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <compareStr>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
scpi_bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
    if (len1 != len2) {
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d001      	beq.n	8004e0a <compareStr+0x1a>
        return FALSE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	e00a      	b.n	8004e20 <compareStr+0x30>
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len2) == 0) {
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	0018      	movs	r0, r3
 8004e12:	f008 fceb 	bl	800d7ec <strncasecmp>
 8004e16:	1e03      	subs	r3, r0, #0
 8004e18:	d101      	bne.n	8004e1e <compareStr+0x2e>
        return TRUE;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <compareStr+0x30>
    }

    return FALSE;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	0018      	movs	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b004      	add	sp, #16
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <compareStrAndNum>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if strings match
 */
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
 8004e28:	b590      	push	{r4, r7, lr}
 8004e2a:	b089      	sub	sp, #36	@ 0x24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
    scpi_bool_t result = FALSE;
 8004e36:	231f      	movs	r3, #31
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
    size_t i;

    if (len2 < len1) {
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d201      	bcs.n	8004e4a <compareStrAndNum+0x22>
        return FALSE;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e049      	b.n	8004ede <compareStrAndNum+0xb6>
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	0018      	movs	r0, r3
 8004e52:	f008 fccb 	bl	800d7ec <strncasecmp>
 8004e56:	1e03      	subs	r3, r0, #0
 8004e58:	d13e      	bne.n	8004ed8 <compareStrAndNum+0xb0>
        result = TRUE;
 8004e5a:	241f      	movs	r4, #31
 8004e5c:	193b      	adds	r3, r7, r4
 8004e5e:	2201      	movs	r2, #1
 8004e60:	701a      	strb	r2, [r3, #0]

        if (num) {
 8004e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01c      	beq.n	8004ea2 <compareStrAndNum+0x7a>
            if (len1 == len2) {
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d033      	beq.n	8004ed8 <compareStrAndNum+0xb0>
                /* *num = 1; */
            } else {
                int32_t tmpNum;
                i = len1 + strBaseToInt32(str2 + len1, &tmpNum, 10);
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	18d3      	adds	r3, r2, r3
 8004e76:	2214      	movs	r2, #20
 8004e78:	18b9      	adds	r1, r7, r2
 8004e7a:	220a      	movs	r2, #10
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f7ff ff83 	bl	8004d88 <strBaseToInt32>
 8004e82:	0002      	movs	r2, r0
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	189b      	adds	r3, r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
                if (i != len2) {
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d003      	beq.n	8004e9a <compareStrAndNum+0x72>
                    result = FALSE;
 8004e92:	193b      	adds	r3, r7, r4
 8004e94:	2200      	movs	r2, #0
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	e01e      	b.n	8004ed8 <compareStrAndNum+0xb0>
                } else {
                    *num = tmpNum;
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	e01a      	b.n	8004ed8 <compareStrAndNum+0xb0>
                }
            }
        } else {
            for (i = len1; i < len2; i++) {
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	61bb      	str	r3, [r7, #24]
 8004ea6:	e013      	b.n	8004ed0 <compareStrAndNum+0xa8>
                if (!isdigit((int) str2[i])) {
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	18d3      	adds	r3, r2, r3
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee8 <compareStrAndNum+0xc0>)
 8004eb4:	18d3      	adds	r3, r2, r3
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	001a      	movs	r2, r3
 8004eba:	2304      	movs	r3, #4
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d104      	bne.n	8004eca <compareStrAndNum+0xa2>
                    result = FALSE;
 8004ec0:	231f      	movs	r3, #31
 8004ec2:	18fb      	adds	r3, r7, r3
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
                    break;
 8004ec8:	e006      	b.n	8004ed8 <compareStrAndNum+0xb0>
            for (i = len1; i < len2; i++) {
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	61bb      	str	r3, [r7, #24]
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d3e7      	bcc.n	8004ea8 <compareStrAndNum+0x80>
                }
            }
        }
    }

    return result;
 8004ed8:	231f      	movs	r3, #31
 8004eda:	18fb      	adds	r3, r7, r3
 8004edc:	781b      	ldrb	r3, [r3, #0]
}
 8004ede:	0018      	movs	r0, r3
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b009      	add	sp, #36	@ 0x24
 8004ee4:	bd90      	pop	{r4, r7, pc}
 8004ee6:	46c0      	nop			@ (mov r8, r8)
 8004ee8:	0800ed18 	.word	0x0800ed18

08004eec <patternSeparatorShortPos>:
 * search the first lowercase letter
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorShortPos(const char * pattern, size_t len) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	e011      	b.n	8004f20 <patternSeparatorShortPos+0x34>
        if (islower((unsigned char) pattern[i])) {
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	18d3      	adds	r3, r2, r3
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	4b0e      	ldr	r3, [pc, #56]	@ (8004f40 <patternSeparatorShortPos+0x54>)
 8004f08:	18d3      	adds	r3, r2, r3
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	001a      	movs	r2, r3
 8004f0e:	2303      	movs	r3, #3
 8004f10:	4013      	ands	r3, r2
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d101      	bne.n	8004f1a <patternSeparatorShortPos+0x2e>
            return i;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	e00d      	b.n	8004f36 <patternSeparatorShortPos+0x4a>
    for (i = 0; (i < len) && pattern[i]; i++) {
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d205      	bcs.n	8004f34 <patternSeparatorShortPos+0x48>
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	18d3      	adds	r3, r2, r3
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e3      	bne.n	8004efc <patternSeparatorShortPos+0x10>
        }
    }
    return i;
 8004f34:	68fb      	ldr	r3, [r7, #12]
}
 8004f36:	0018      	movs	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b004      	add	sp, #16
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	0800ed18 	.word	0x0800ed18

08004f44 <patternSeparatorPos>:
 * Find pattern separator position
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorPos(const char * pattern, size_t len) {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]

    char * separator = strnpbrk(pattern, len, "?:[]");
 8004f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f78 <patternSeparatorPos+0x34>)
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	0018      	movs	r0, r3
 8004f56:	f7ff fe08 	bl	8004b6a <strnpbrk>
 8004f5a:	0003      	movs	r3, r0
 8004f5c:	60fb      	str	r3, [r7, #12]
    if (separator == NULL) {
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <patternSeparatorPos+0x24>
        return len;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	e002      	b.n	8004f6e <patternSeparatorPos+0x2a>
    } else {
        return separator - pattern;
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	1ad3      	subs	r3, r2, r3
    }
}
 8004f6e:	0018      	movs	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b004      	add	sp, #16
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	46c0      	nop			@ (mov r8, r8)
 8004f78:	0800e6b0 	.word	0x0800e6b0

08004f7c <cmdSeparatorPos>:
 * Find command separator position
 * @param cmd - input command
 * @param len - max search length
 * @return position of separator or len
 */
static size_t cmdSeparatorPos(const char * cmd, size_t len) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
    char * separator = strnpbrk(cmd, len, ":?");
 8004f86:	4a0b      	ldr	r2, [pc, #44]	@ (8004fb4 <cmdSeparatorPos+0x38>)
 8004f88:	6839      	ldr	r1, [r7, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f7ff fdec 	bl	8004b6a <strnpbrk>
 8004f92:	0003      	movs	r3, r0
 8004f94:	60bb      	str	r3, [r7, #8]
    size_t result;
    if (separator == NULL) {
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d102      	bne.n	8004fa2 <cmdSeparatorPos+0x26>
        result = len;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e003      	b.n	8004faa <cmdSeparatorPos+0x2e>
    } else {
        result = separator - cmd;
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	60fb      	str	r3, [r7, #12]
    }

    return result;
 8004faa:	68fb      	ldr	r3, [r7, #12]
}
 8004fac:	0018      	movs	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b004      	add	sp, #16
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	0800e6b8 	.word	0x0800e6b8

08004fb8 <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return
 */
scpi_bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len, int32_t * num) {
 8004fb8:	b590      	push	{r4, r7, lr}
 8004fba:	b089      	sub	sp, #36	@ 0x24
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	603b      	str	r3, [r7, #0]
    int pattern_sep_pos_short;

    if ((pattern_len > 0) && pattern[pattern_len - 1] == '#') {
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d02f      	beq.n	800502c <matchPattern+0x74>
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	18d3      	adds	r3, r2, r3
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b23      	cmp	r3, #35	@ 0x23
 8004fd8:	d128      	bne.n	800502c <matchPattern+0x74>
        size_t new_pattern_len = pattern_len - 1;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	617b      	str	r3, [r7, #20]

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	0011      	movs	r1, r2
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f7ff ff80 	bl	8004eec <patternSeparatorShortPos>
 8004fec:	0003      	movs	r3, r0
 8004fee:	613b      	str	r3, [r7, #16]

        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 8004ff0:	683c      	ldr	r4, [r7, #0]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6979      	ldr	r1, [r7, #20]
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	0023      	movs	r3, r4
 8004ffe:	f7ff ff13 	bl	8004e28 <compareStrAndNum>
 8005002:	1e03      	subs	r3, r0, #0
 8005004:	d10a      	bne.n	800501c <matchPattern+0x64>
                compareStrAndNum(pattern, pattern_sep_pos_short, str, str_len, num);
 8005006:	6939      	ldr	r1, [r7, #16]
 8005008:	683c      	ldr	r4, [r7, #0]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	0023      	movs	r3, r4
 8005014:	f7ff ff08 	bl	8004e28 <compareStrAndNum>
 8005018:	1e03      	subs	r3, r0, #0
        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 800501a:	d001      	beq.n	8005020 <matchPattern+0x68>
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <matchPattern+0x6a>
 8005020:	2300      	movs	r3, #0
 8005022:	1c1a      	adds	r2, r3, #0
 8005024:	2301      	movs	r3, #1
 8005026:	4013      	ands	r3, r2
 8005028:	b2db      	uxtb	r3, r3
 800502a:	e01e      	b.n	800506a <matchPattern+0xb2>
    } else {

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	0011      	movs	r1, r2
 8005032:	0018      	movs	r0, r3
 8005034:	f7ff ff5a 	bl	8004eec <patternSeparatorShortPos>
 8005038:	0003      	movs	r3, r0
 800503a:	613b      	str	r3, [r7, #16]

        return compareStr(pattern, pattern_len, str, str_len) ||
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f7ff fed4 	bl	8004df0 <compareStr>
 8005048:	1e03      	subs	r3, r0, #0
 800504a:	d107      	bne.n	800505c <matchPattern+0xa4>
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
 800504c:	6939      	ldr	r1, [r7, #16]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff fecc 	bl	8004df0 <compareStr>
 8005058:	1e03      	subs	r3, r0, #0
        return compareStr(pattern, pattern_len, str, str_len) ||
 800505a:	d001      	beq.n	8005060 <matchPattern+0xa8>
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <matchPattern+0xaa>
 8005060:	2300      	movs	r3, #0
 8005062:	1c1a      	adds	r2, r3, #0
 8005064:	2301      	movs	r3, #1
 8005066:	4013      	ands	r3, r2
 8005068:	b2db      	uxtb	r3, r3
    }
}
 800506a:	0018      	movs	r0, r3
 800506c:	46bd      	mov	sp, r7
 800506e:	b007      	add	sp, #28
 8005070:	bd90      	pop	{r4, r7, pc}

08005072 <matchCommand>:
 * @param pattern eg. [:MEASure]:VOLTage:DC?
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
scpi_bool_t matchCommand(const char * pattern, const char * cmd, size_t len, int32_t *numbers, size_t numbers_len, int32_t default_value) {
 8005072:	b590      	push	{r4, r7, lr}
 8005074:	b091      	sub	sp, #68	@ 0x44
 8005076:	af02      	add	r7, sp, #8
 8005078:	60f8      	str	r0, [r7, #12]
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	607a      	str	r2, [r7, #4]
 800507e:	603b      	str	r3, [r7, #0]
#define SKIP_PATTERN(n) do {pattern_ptr += (n);  pattern_len -= (n);} while(0)
#define SKIP_CMD(n) do {cmd_ptr += (n);  cmd_len -= (n);} while(0)

    scpi_bool_t result = FALSE;
 8005080:	2337      	movs	r3, #55	@ 0x37
 8005082:	18fb      	adds	r3, r7, r3
 8005084:	2200      	movs	r2, #0
 8005086:	701a      	strb	r2, [r3, #0]
    int brackets = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	633b      	str	r3, [r7, #48]	@ 0x30
    int cmd_sep_pos = 0;
 800508c:	2300      	movs	r3, #0
 800508e:	617b      	str	r3, [r7, #20]

    size_t numbers_idx = 0;
 8005090:	2300      	movs	r3, #0
 8005092:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t *number_ptr = NULL;
 8005094:	2300      	movs	r3, #0
 8005096:	62bb      	str	r3, [r7, #40]	@ 0x28

    const char * pattern_ptr = pattern;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	627b      	str	r3, [r7, #36]	@ 0x24
    int pattern_len = strlen(pattern);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	0018      	movs	r0, r3
 80050a0:	f7fb f832 	bl	8000108 <strlen>
 80050a4:	0003      	movs	r3, r0
 80050a6:	623b      	str	r3, [r7, #32]

    const char * cmd_ptr = cmd;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	61fb      	str	r3, [r7, #28]
    size_t cmd_len = SCPIDEFINE_strnlen(cmd, len);
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	0011      	movs	r1, r2
 80050b2:	0018      	movs	r0, r3
 80050b4:	f008 fbbe 	bl	800d834 <strnlen>
 80050b8:	0003      	movs	r3, r0
 80050ba:	61bb      	str	r3, [r7, #24]

    /* both commands are query commands? */
    if (pattern_ptr[pattern_len - 1] == '?') {
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	3b01      	subs	r3, #1
 80050c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c2:	18d3      	adds	r3, r2, r3
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80050c8:	d10f      	bne.n	80050ea <matchCommand+0x78>
        if (cmd_ptr[cmd_len - 1] == '?') {
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	69fa      	ldr	r2, [r7, #28]
 80050d0:	18d3      	adds	r3, r2, r3
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80050d6:	d106      	bne.n	80050e6 <matchCommand+0x74>
            cmd_len -= 1;
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	3b01      	subs	r3, #1
 80050dc:	61bb      	str	r3, [r7, #24]
            pattern_len -= 1;
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	3b01      	subs	r3, #1
 80050e2:	623b      	str	r3, [r7, #32]
 80050e4:	e001      	b.n	80050ea <matchCommand+0x78>
        } else {
            return FALSE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e196      	b.n	8005418 <matchCommand+0x3a6>
        }
    }

    /* now support optional keywords in pattern style, e.g. [:MEASure]:VOLTage:DC? */
    if (pattern_ptr[0] == '[') { /* skip first '[' */
 80050ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b5b      	cmp	r3, #91	@ 0x5b
 80050f0:	d108      	bne.n	8005104 <matchCommand+0x92>
        SKIP_PATTERN(1);
 80050f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f4:	3301      	adds	r3, #1
 80050f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	623b      	str	r3, [r7, #32]
        brackets++;
 80050fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005100:	3301      	adds	r3, #1
 8005102:	633b      	str	r3, [r7, #48]	@ 0x30
    }
    if (pattern_ptr[0] == ':') { /* skip first ':' */
 8005104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b3a      	cmp	r3, #58	@ 0x3a
 800510a:	d105      	bne.n	8005118 <matchCommand+0xa6>
        SKIP_PATTERN(1);
 800510c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510e:	3301      	adds	r3, #1
 8005110:	627b      	str	r3, [r7, #36]	@ 0x24
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	3b01      	subs	r3, #1
 8005116:	623b      	str	r3, [r7, #32]
    }

    if (cmd_ptr[0] == ':') {
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b3a      	cmp	r3, #58	@ 0x3a
 800511e:	d110      	bne.n	8005142 <matchCommand+0xd0>
        /* handle errornouse ":*IDN?" */
        if (cmd_len >= 2) {
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d90d      	bls.n	8005142 <matchCommand+0xd0>
            if (cmd_ptr[1] != '*') {
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	3301      	adds	r3, #1
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b2a      	cmp	r3, #42	@ 0x2a
 800512e:	d006      	beq.n	800513e <matchCommand+0xcc>
                SKIP_CMD(1);
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	3301      	adds	r3, #1
 8005134:	61fb      	str	r3, [r7, #28]
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	3b01      	subs	r3, #1
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	e001      	b.n	8005142 <matchCommand+0xd0>
            } else {
                return FALSE;
 800513e:	2300      	movs	r3, #0
 8005140:	e16a      	b.n	8005418 <matchCommand+0x3a6>
            }
        }
    }

    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 8005142:	6a3a      	ldr	r2, [r7, #32]
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	0011      	movs	r1, r2
 8005148:	0018      	movs	r0, r3
 800514a:	f7ff fefb 	bl	8004f44 <patternSeparatorPos>
 800514e:	0003      	movs	r3, r0
 8005150:	613b      	str	r3, [r7, #16]

        cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_len);
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	0011      	movs	r1, r2
 8005158:	0018      	movs	r0, r3
 800515a:	f7ff ff0f 	bl	8004f7c <cmdSeparatorPos>
 800515e:	0003      	movs	r3, r0
 8005160:	617b      	str	r3, [r7, #20]

        if ((pattern_sep_pos > 0) && pattern_ptr[pattern_sep_pos - 1] == '#') {
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	dd1c      	ble.n	80051a2 <matchCommand+0x130>
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	3b01      	subs	r3, #1
 800516c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800516e:	18d3      	adds	r3, r2, r3
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	2b23      	cmp	r3, #35	@ 0x23
 8005174:	d115      	bne.n	80051a2 <matchCommand+0x130>
            if (numbers && (numbers_idx < numbers_len)) {
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00c      	beq.n	8005196 <matchCommand+0x124>
 800517c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800517e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005180:	429a      	cmp	r2, r3
 8005182:	d208      	bcs.n	8005196 <matchCommand+0x124>
                number_ptr = numbers + numbers_idx;
 8005184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	18d3      	adds	r3, r2, r3
 800518c:	62bb      	str	r3, [r7, #40]	@ 0x28
                *number_ptr = default_value; /* default value */
 800518e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005190:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	e001      	b.n	800519a <matchCommand+0x128>
            } else {
                number_ptr = NULL;
 8005196:	2300      	movs	r3, #0
 8005198:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
            numbers_idx++;
 800519a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519c:	3301      	adds	r3, #1
 800519e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051a0:	e001      	b.n	80051a6 <matchCommand+0x134>
        } else {
            number_ptr = NULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos, number_ptr)) {
 80051a6:	6939      	ldr	r1, [r7, #16]
 80051a8:	697c      	ldr	r4, [r7, #20]
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	0023      	movs	r3, r4
 80051b4:	f7ff ff00 	bl	8004fb8 <matchPattern>
 80051b8:	1e03      	subs	r3, r0, #0
 80051ba:	d100      	bne.n	80051be <matchCommand+0x14c>
 80051bc:	e0ed      	b.n	800539a <matchCommand+0x328>
            SKIP_PATTERN(pattern_sep_pos);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051c2:	18d3      	adds	r3, r2, r3
 80051c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051c6:	6a3a      	ldr	r2, [r7, #32]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	623b      	str	r3, [r7, #32]
            SKIP_CMD(cmd_sep_pos);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	18d3      	adds	r3, r2, r3
 80051d4:	61fb      	str	r3, [r7, #28]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	61bb      	str	r3, [r7, #24]
            result = TRUE;
 80051de:	2337      	movs	r3, #55	@ 0x37
 80051e0:	18fb      	adds	r3, r7, r3
 80051e2:	2201      	movs	r2, #1
 80051e4:	701a      	strb	r2, [r3, #0]

            /* command is complete */
            if ((pattern_len == 0) && (cmd_len == 0)) {
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d103      	bne.n	80051f4 <matchCommand+0x182>
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d100      	bne.n	80051f4 <matchCommand+0x182>
 80051f2:	e10b      	b.n	800540c <matchCommand+0x39a>
                break;
            }

            /* pattern complete, but command not */
            if ((pattern_len == 0) && (cmd_len > 0)) {
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d107      	bne.n	800520a <matchCommand+0x198>
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d004      	beq.n	800520a <matchCommand+0x198>
                result = FALSE;
 8005200:	2337      	movs	r3, #55	@ 0x37
 8005202:	18fb      	adds	r3, r7, r3
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
                break;
 8005208:	e103      	b.n	8005412 <matchCommand+0x3a0>
            }

            /* command complete, but pattern not */
            if (cmd_len == 0) {
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d13a      	bne.n	8005286 <matchCommand+0x214>
                /* verify all subsequent pattern parts are also optional */
                while (pattern_len) {
 8005210:	e02d      	b.n	800526e <matchCommand+0x1fc>
                    pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 8005212:	6a3a      	ldr	r2, [r7, #32]
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	0011      	movs	r1, r2
 8005218:	0018      	movs	r0, r3
 800521a:	f7ff fe93 	bl	8004f44 <patternSeparatorPos>
 800521e:	0003      	movs	r3, r0
 8005220:	613b      	str	r3, [r7, #16]
                    switch (pattern_ptr[pattern_sep_pos]) {
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005226:	18d3      	adds	r3, r2, r3
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b5b      	cmp	r3, #91	@ 0x5b
 800522c:	d002      	beq.n	8005234 <matchCommand+0x1c2>
 800522e:	2b5d      	cmp	r3, #93	@ 0x5d
 8005230:	d004      	beq.n	800523c <matchCommand+0x1ca>
                            break;
                        case ']':
                            brackets--;
                            break;
                        default:
                            break;
 8005232:	e007      	b.n	8005244 <matchCommand+0x1d2>
                            brackets++;
 8005234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005236:	3301      	adds	r3, #1
 8005238:	633b      	str	r3, [r7, #48]	@ 0x30
                            break;
 800523a:	e003      	b.n	8005244 <matchCommand+0x1d2>
                            brackets--;
 800523c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523e:	3b01      	subs	r3, #1
 8005240:	633b      	str	r3, [r7, #48]	@ 0x30
                            break;
 8005242:	46c0      	nop			@ (mov r8, r8)
                    }
                    SKIP_PATTERN(pattern_sep_pos + 1);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	3301      	adds	r3, #1
 8005248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800524a:	18d3      	adds	r3, r2, r3
 800524c:	627b      	str	r3, [r7, #36]	@ 0x24
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	3301      	adds	r3, #1
 8005252:	6a3a      	ldr	r2, [r7, #32]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	623b      	str	r3, [r7, #32]
                    if (brackets == 0) {
 8005258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525a:	2b00      	cmp	r3, #0
 800525c:	d107      	bne.n	800526e <matchCommand+0x1fc>
                        if ((pattern_len > 0) && (pattern_ptr[0] == '[')) {
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	2b00      	cmp	r3, #0
 8005262:	dd07      	ble.n	8005274 <matchCommand+0x202>
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b5b      	cmp	r3, #91	@ 0x5b
 800526a:	d103      	bne.n	8005274 <matchCommand+0x202>
                            continue;
 800526c:	46c0      	nop			@ (mov r8, r8)
                while (pattern_len) {
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1ce      	bne.n	8005212 <matchCommand+0x1a0>
                        } else {
                            break;
                        }
                    }
                }
                if (pattern_len != 0) {
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d100      	bne.n	800527c <matchCommand+0x20a>
 800527a:	e0c9      	b.n	8005410 <matchCommand+0x39e>
                    result = FALSE;
 800527c:	2337      	movs	r3, #55	@ 0x37
 800527e:	18fb      	adds	r3, r7, r3
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]
                }
                break; /* exist optional keyword, command is complete */
 8005284:	e0c4      	b.n	8005410 <matchCommand+0x39e>
            }

            /* both command and patter contains command separator at this position */
            if ((pattern_len > 0)
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	2b00      	cmp	r3, #0
 800528a:	dd16      	ble.n	80052ba <matchCommand+0x248>
                    && ((pattern_ptr[0] == cmd_ptr[0])
 800528c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528e:	781a      	ldrb	r2, [r3, #0]
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d110      	bne.n	80052ba <matchCommand+0x248>
                    && (pattern_ptr[0] == ':'))) {
 8005298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b3a      	cmp	r3, #58	@ 0x3a
 800529e:	d10c      	bne.n	80052ba <matchCommand+0x248>
                SKIP_PATTERN(1);
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	3301      	adds	r3, #1
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	3301      	adds	r3, #1
 80052b0:	61fb      	str	r3, [r7, #28]
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	61bb      	str	r3, [r7, #24]
 80052b8:	e0a7      	b.n	800540a <matchCommand+0x398>
            } else if ((pattern_len > 1)
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	dd1f      	ble.n	8005300 <matchCommand+0x28e>
                    && (pattern_ptr[1] == cmd_ptr[0])
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c2:	3301      	adds	r3, #1
 80052c4:	781a      	ldrb	r2, [r3, #0]
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d118      	bne.n	8005300 <matchCommand+0x28e>
                    && (pattern_ptr[0] == '[')
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b5b      	cmp	r3, #91	@ 0x5b
 80052d4:	d114      	bne.n	8005300 <matchCommand+0x28e>
                    && (pattern_ptr[1] == ':')) {
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	3301      	adds	r3, #1
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b3a      	cmp	r3, #58	@ 0x3a
 80052de:	d10f      	bne.n	8005300 <matchCommand+0x28e>
                SKIP_PATTERN(2); /* for skip '[' in "[:" */
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	3302      	adds	r3, #2
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	3b02      	subs	r3, #2
 80052ea:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	3301      	adds	r3, #1
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	61bb      	str	r3, [r7, #24]
                brackets++;
 80052f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fa:	3301      	adds	r3, #1
 80052fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80052fe:	e084      	b.n	800540a <matchCommand+0x398>
            } else if ((pattern_len > 1)
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	2b01      	cmp	r3, #1
 8005304:	dd1f      	ble.n	8005346 <matchCommand+0x2d4>
                    && (pattern_ptr[1] == cmd_ptr[0])
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	3301      	adds	r3, #1
 800530a:	781a      	ldrb	r2, [r3, #0]
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d118      	bne.n	8005346 <matchCommand+0x2d4>
                    && (pattern_ptr[0] == ']')
 8005314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b5d      	cmp	r3, #93	@ 0x5d
 800531a:	d114      	bne.n	8005346 <matchCommand+0x2d4>
                    && (pattern_ptr[1] == ':')) {
 800531c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531e:	3301      	adds	r3, #1
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b3a      	cmp	r3, #58	@ 0x3a
 8005324:	d10f      	bne.n	8005346 <matchCommand+0x2d4>
                SKIP_PATTERN(2); /* for skip ']' in "]:" */
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	3302      	adds	r3, #2
 800532a:	627b      	str	r3, [r7, #36]	@ 0x24
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	3b02      	subs	r3, #2
 8005330:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	3301      	adds	r3, #1
 8005336:	61fb      	str	r3, [r7, #28]
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	3b01      	subs	r3, #1
 800533c:	61bb      	str	r3, [r7, #24]
                brackets--;
 800533e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005340:	3b01      	subs	r3, #1
 8005342:	633b      	str	r3, [r7, #48]	@ 0x30
 8005344:	e061      	b.n	800540a <matchCommand+0x398>
            } else if ((pattern_len > 2)
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	2b02      	cmp	r3, #2
 800534a:	dd21      	ble.n	8005390 <matchCommand+0x31e>
                    && (pattern_ptr[2] == cmd_ptr[0])
 800534c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534e:	3302      	adds	r3, #2
 8005350:	781a      	ldrb	r2, [r3, #0]
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d11a      	bne.n	8005390 <matchCommand+0x31e>
                    && (pattern_ptr[0] == ']')
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b5d      	cmp	r3, #93	@ 0x5d
 8005360:	d116      	bne.n	8005390 <matchCommand+0x31e>
                    && (pattern_ptr[1] == '[')
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	3301      	adds	r3, #1
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2b5b      	cmp	r3, #91	@ 0x5b
 800536a:	d111      	bne.n	8005390 <matchCommand+0x31e>
                    && (pattern_ptr[2] == ':')) {
 800536c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536e:	3302      	adds	r3, #2
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b3a      	cmp	r3, #58	@ 0x3a
 8005374:	d10c      	bne.n	8005390 <matchCommand+0x31e>
                SKIP_PATTERN(3); /* for skip '][' in "][:" */
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	3303      	adds	r3, #3
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	3b03      	subs	r3, #3
 8005380:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	3301      	adds	r3, #1
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	3b01      	subs	r3, #1
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	e03c      	b.n	800540a <matchCommand+0x398>
                /* brackets++; */
                /* brackets--; */
            } else {
                result = FALSE;
 8005390:	2337      	movs	r3, #55	@ 0x37
 8005392:	18fb      	adds	r3, r7, r3
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
                break;
 8005398:	e03b      	b.n	8005412 <matchCommand+0x3a0>
            }
        } else {
            SKIP_PATTERN(pattern_sep_pos);
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800539e:	18d3      	adds	r3, r2, r3
 80053a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053a2:	6a3a      	ldr	r2, [r7, #32]
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	623b      	str	r3, [r7, #32]
            if ((pattern_ptr[0] == ']') && (pattern_ptr[1] == ':')) {
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b5d      	cmp	r3, #93	@ 0x5d
 80053b0:	d10e      	bne.n	80053d0 <matchCommand+0x35e>
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	3301      	adds	r3, #1
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b3a      	cmp	r3, #58	@ 0x3a
 80053ba:	d109      	bne.n	80053d0 <matchCommand+0x35e>
                SKIP_PATTERN(2); /* for skip ']' in "]:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	3302      	adds	r3, #2
 80053c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	3b02      	subs	r3, #2
 80053c6:	623b      	str	r3, [r7, #32]
                brackets--;
 80053c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ca:	3b01      	subs	r3, #1
 80053cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ce:	e01c      	b.n	800540a <matchCommand+0x398>
            } else if ((pattern_len > 2) && (pattern_ptr[0] == ']')
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	dd14      	ble.n	8005400 <matchCommand+0x38e>
 80053d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b5d      	cmp	r3, #93	@ 0x5d
 80053dc:	d110      	bne.n	8005400 <matchCommand+0x38e>
                    && (pattern_ptr[1] == '[')
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	3301      	adds	r3, #1
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b5b      	cmp	r3, #91	@ 0x5b
 80053e6:	d10b      	bne.n	8005400 <matchCommand+0x38e>
                    && (pattern_ptr[2] == ':')) {
 80053e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ea:	3302      	adds	r3, #2
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2b3a      	cmp	r3, #58	@ 0x3a
 80053f0:	d106      	bne.n	8005400 <matchCommand+0x38e>
                SKIP_PATTERN(3); /* for skip ']' in "][:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	3303      	adds	r3, #3
 80053f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	3b03      	subs	r3, #3
 80053fc:	623b      	str	r3, [r7, #32]
 80053fe:	e004      	b.n	800540a <matchCommand+0x398>
                /* brackets++; */
                /* brackets--; */
            } else {
                result = FALSE;
 8005400:	2337      	movs	r3, #55	@ 0x37
 8005402:	18fb      	adds	r3, r7, r3
 8005404:	2200      	movs	r2, #0
 8005406:	701a      	strb	r2, [r3, #0]
                break;
 8005408:	e003      	b.n	8005412 <matchCommand+0x3a0>
    while (1) {
 800540a:	e69a      	b.n	8005142 <matchCommand+0xd0>
                break;
 800540c:	46c0      	nop			@ (mov r8, r8)
 800540e:	e000      	b.n	8005412 <matchCommand+0x3a0>
                break; /* exist optional keyword, command is complete */
 8005410:	46c0      	nop			@ (mov r8, r8)
            }
        }
    }

    return result;
 8005412:	2337      	movs	r3, #55	@ 0x37
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	781b      	ldrb	r3, [r3, #0]
#undef SKIP_PATTERN
#undef SKIP_CMD
}
 8005418:	0018      	movs	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	b00f      	add	sp, #60	@ 0x3c
 800541e:	bd90      	pop	{r4, r7, pc}

08005420 <composeCompoundCommand>:
 * @param prev pointer to previous command
 * @param current pointer of current command
 *
 * prev and current should be in the same memory buffer
 */
scpi_bool_t composeCompoundCommand(const scpi_token_t * prev, scpi_token_t * current) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
    size_t i;

    /* Invalid input */
    if (current == NULL || current->ptr == NULL || current->len == 0)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <composeCompoundCommand+0x20>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <composeCompoundCommand+0x20>
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <composeCompoundCommand+0x24>
        return FALSE;
 8005440:	2300      	movs	r3, #0
 8005442:	e04d      	b.n	80054e0 <composeCompoundCommand+0xc0>

    /* no previous command - nothing to do*/
    if (prev->ptr == NULL || prev->len == 0)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <composeCompoundCommand+0x34>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <composeCompoundCommand+0x38>
        return TRUE;
 8005454:	2301      	movs	r3, #1
 8005456:	e043      	b.n	80054e0 <composeCompoundCommand+0xc0>

    /* Common command or command root - nothing to do */
    if (current->ptr[0] == '*' || current->ptr[0] == ':')
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005460:	d004      	beq.n	800546c <composeCompoundCommand+0x4c>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b3a      	cmp	r3, #58	@ 0x3a
 800546a:	d101      	bne.n	8005470 <composeCompoundCommand+0x50>
        return TRUE;
 800546c:	2301      	movs	r3, #1
 800546e:	e037      	b.n	80054e0 <composeCompoundCommand+0xc0>

    /* Previsou command was common command - nothing to do */
    if (prev->ptr[0] == '*')
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b2a      	cmp	r3, #42	@ 0x2a
 8005478:	d101      	bne.n	800547e <composeCompoundCommand+0x5e>
        return TRUE;
 800547a:	2301      	movs	r3, #1
 800547c:	e030      	b.n	80054e0 <composeCompoundCommand+0xc0>

    /* Find last occurence of ':' */
    for (i = prev->len; i > 0; i--) {
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	e00a      	b.n	800549c <composeCompoundCommand+0x7c>
        if (prev->ptr[i - 1] == ':') {
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	3b01      	subs	r3, #1
 800548e:	18d3      	adds	r3, r2, r3
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b3a      	cmp	r3, #58	@ 0x3a
 8005494:	d006      	beq.n	80054a4 <composeCompoundCommand+0x84>
    for (i = prev->len; i > 0; i--) {
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3b01      	subs	r3, #1
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f1      	bne.n	8005486 <composeCompoundCommand+0x66>
 80054a2:	e000      	b.n	80054a6 <composeCompoundCommand+0x86>
            break;
 80054a4:	46c0      	nop			@ (mov r8, r8)
        }
    }

    /* Previous command was simple command - nothing to do*/
    if (i == 0)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <composeCompoundCommand+0x90>
        return TRUE;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e017      	b.n	80054e0 <composeCompoundCommand+0xc0>

    current->ptr -= i;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	425b      	negs	r3, r3
 80054b8:	18d2      	adds	r2, r2, r3
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	605a      	str	r2, [r3, #4]
    current->len += i;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	001a      	movs	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	18d3      	adds	r3, r2, r3
 80054c8:	001a      	movs	r2, r3
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	609a      	str	r2, [r3, #8]
    memmove(current->ptr, prev->ptr, i);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6858      	ldr	r0, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	0019      	movs	r1, r3
 80054da:	f008 f96b 	bl	800d7b4 <memmove>
    return TRUE;
 80054de:	2301      	movs	r3, #1
}
 80054e0:	0018      	movs	r0, r3
 80054e2:	46bd      	mov	sp, r7
 80054e4:	b004      	add	sp, #16
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80054ee:	1dfb      	adds	r3, r7, #7
 80054f0:	2200      	movs	r2, #0
 80054f2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80054f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005524 <HAL_Init+0x3c>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005524 <HAL_Init+0x3c>)
 80054fa:	2140      	movs	r1, #64	@ 0x40
 80054fc:	430a      	orrs	r2, r1
 80054fe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005500:	2000      	movs	r0, #0
 8005502:	f000 f811 	bl	8005528 <HAL_InitTick>
 8005506:	1e03      	subs	r3, r0, #0
 8005508:	d003      	beq.n	8005512 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800550a:	1dfb      	adds	r3, r7, #7
 800550c:	2201      	movs	r2, #1
 800550e:	701a      	strb	r2, [r3, #0]
 8005510:	e001      	b.n	8005516 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005512:	f7fb feaf 	bl	8001274 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005516:	1dfb      	adds	r3, r7, #7
 8005518:	781b      	ldrb	r3, [r3, #0]
}
 800551a:	0018      	movs	r0, r3
 800551c:	46bd      	mov	sp, r7
 800551e:	b002      	add	sp, #8
 8005520:	bd80      	pop	{r7, pc}
 8005522:	46c0      	nop			@ (mov r8, r8)
 8005524:	40022000 	.word	0x40022000

08005528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005528:	b590      	push	{r4, r7, lr}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005530:	4b14      	ldr	r3, [pc, #80]	@ (8005584 <HAL_InitTick+0x5c>)
 8005532:	681c      	ldr	r4, [r3, #0]
 8005534:	4b14      	ldr	r3, [pc, #80]	@ (8005588 <HAL_InitTick+0x60>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	0019      	movs	r1, r3
 800553a:	23fa      	movs	r3, #250	@ 0xfa
 800553c:	0098      	lsls	r0, r3, #2
 800553e:	f7fa fdf5 	bl	800012c <__udivsi3>
 8005542:	0003      	movs	r3, r0
 8005544:	0019      	movs	r1, r3
 8005546:	0020      	movs	r0, r4
 8005548:	f7fa fdf0 	bl	800012c <__udivsi3>
 800554c:	0003      	movs	r3, r0
 800554e:	0018      	movs	r0, r3
 8005550:	f000 f92f 	bl	80057b2 <HAL_SYSTICK_Config>
 8005554:	1e03      	subs	r3, r0, #0
 8005556:	d001      	beq.n	800555c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e00f      	b.n	800557c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b03      	cmp	r3, #3
 8005560:	d80b      	bhi.n	800557a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	2301      	movs	r3, #1
 8005566:	425b      	negs	r3, r3
 8005568:	2200      	movs	r2, #0
 800556a:	0018      	movs	r0, r3
 800556c:	f000 f8fc 	bl	8005768 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005570:	4b06      	ldr	r3, [pc, #24]	@ (800558c <HAL_InitTick+0x64>)
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	e000      	b.n	800557c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
}
 800557c:	0018      	movs	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	b003      	add	sp, #12
 8005582:	bd90      	pop	{r4, r7, pc}
 8005584:	20000044 	.word	0x20000044
 8005588:	2000004c 	.word	0x2000004c
 800558c:	20000048 	.word	0x20000048

08005590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005594:	4b05      	ldr	r3, [pc, #20]	@ (80055ac <HAL_IncTick+0x1c>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	001a      	movs	r2, r3
 800559a:	4b05      	ldr	r3, [pc, #20]	@ (80055b0 <HAL_IncTick+0x20>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	18d2      	adds	r2, r2, r3
 80055a0:	4b03      	ldr	r3, [pc, #12]	@ (80055b0 <HAL_IncTick+0x20>)
 80055a2:	601a      	str	r2, [r3, #0]
}
 80055a4:	46c0      	nop			@ (mov r8, r8)
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	46c0      	nop			@ (mov r8, r8)
 80055ac:	2000004c 	.word	0x2000004c
 80055b0:	2000048c 	.word	0x2000048c

080055b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  return uwTick;
 80055b8:	4b02      	ldr	r3, [pc, #8]	@ (80055c4 <HAL_GetTick+0x10>)
 80055ba:	681b      	ldr	r3, [r3, #0]
}
 80055bc:	0018      	movs	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	46c0      	nop			@ (mov r8, r8)
 80055c4:	2000048c 	.word	0x2000048c

080055c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055d0:	f7ff fff0 	bl	80055b4 <HAL_GetTick>
 80055d4:	0003      	movs	r3, r0
 80055d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3301      	adds	r3, #1
 80055e0:	d005      	beq.n	80055ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055e2:	4b0a      	ldr	r3, [pc, #40]	@ (800560c <HAL_Delay+0x44>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	001a      	movs	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	189b      	adds	r3, r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80055ee:	46c0      	nop			@ (mov r8, r8)
 80055f0:	f7ff ffe0 	bl	80055b4 <HAL_GetTick>
 80055f4:	0002      	movs	r2, r0
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d8f7      	bhi.n	80055f0 <HAL_Delay+0x28>
  {
  }
}
 8005600:	46c0      	nop			@ (mov r8, r8)
 8005602:	46c0      	nop			@ (mov r8, r8)
 8005604:	46bd      	mov	sp, r7
 8005606:	b004      	add	sp, #16
 8005608:	bd80      	pop	{r7, pc}
 800560a:	46c0      	nop			@ (mov r8, r8)
 800560c:	2000004c 	.word	0x2000004c

08005610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	0002      	movs	r2, r0
 8005618:	1dfb      	adds	r3, r7, #7
 800561a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800561c:	1dfb      	adds	r3, r7, #7
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b7f      	cmp	r3, #127	@ 0x7f
 8005622:	d809      	bhi.n	8005638 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005624:	1dfb      	adds	r3, r7, #7
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	001a      	movs	r2, r3
 800562a:	231f      	movs	r3, #31
 800562c:	401a      	ands	r2, r3
 800562e:	4b04      	ldr	r3, [pc, #16]	@ (8005640 <__NVIC_EnableIRQ+0x30>)
 8005630:	2101      	movs	r1, #1
 8005632:	4091      	lsls	r1, r2
 8005634:	000a      	movs	r2, r1
 8005636:	601a      	str	r2, [r3, #0]
  }
}
 8005638:	46c0      	nop			@ (mov r8, r8)
 800563a:	46bd      	mov	sp, r7
 800563c:	b002      	add	sp, #8
 800563e:	bd80      	pop	{r7, pc}
 8005640:	e000e100 	.word	0xe000e100

08005644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005644:	b590      	push	{r4, r7, lr}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	0002      	movs	r2, r0
 800564c:	6039      	str	r1, [r7, #0]
 800564e:	1dfb      	adds	r3, r7, #7
 8005650:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005652:	1dfb      	adds	r3, r7, #7
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b7f      	cmp	r3, #127	@ 0x7f
 8005658:	d828      	bhi.n	80056ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800565a:	4a2f      	ldr	r2, [pc, #188]	@ (8005718 <__NVIC_SetPriority+0xd4>)
 800565c:	1dfb      	adds	r3, r7, #7
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	b25b      	sxtb	r3, r3
 8005662:	089b      	lsrs	r3, r3, #2
 8005664:	33c0      	adds	r3, #192	@ 0xc0
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	589b      	ldr	r3, [r3, r2]
 800566a:	1dfa      	adds	r2, r7, #7
 800566c:	7812      	ldrb	r2, [r2, #0]
 800566e:	0011      	movs	r1, r2
 8005670:	2203      	movs	r2, #3
 8005672:	400a      	ands	r2, r1
 8005674:	00d2      	lsls	r2, r2, #3
 8005676:	21ff      	movs	r1, #255	@ 0xff
 8005678:	4091      	lsls	r1, r2
 800567a:	000a      	movs	r2, r1
 800567c:	43d2      	mvns	r2, r2
 800567e:	401a      	ands	r2, r3
 8005680:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	019b      	lsls	r3, r3, #6
 8005686:	22ff      	movs	r2, #255	@ 0xff
 8005688:	401a      	ands	r2, r3
 800568a:	1dfb      	adds	r3, r7, #7
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	0018      	movs	r0, r3
 8005690:	2303      	movs	r3, #3
 8005692:	4003      	ands	r3, r0
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005698:	481f      	ldr	r0, [pc, #124]	@ (8005718 <__NVIC_SetPriority+0xd4>)
 800569a:	1dfb      	adds	r3, r7, #7
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	b25b      	sxtb	r3, r3
 80056a0:	089b      	lsrs	r3, r3, #2
 80056a2:	430a      	orrs	r2, r1
 80056a4:	33c0      	adds	r3, #192	@ 0xc0
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80056aa:	e031      	b.n	8005710 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80056ac:	4a1b      	ldr	r2, [pc, #108]	@ (800571c <__NVIC_SetPriority+0xd8>)
 80056ae:	1dfb      	adds	r3, r7, #7
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	0019      	movs	r1, r3
 80056b4:	230f      	movs	r3, #15
 80056b6:	400b      	ands	r3, r1
 80056b8:	3b08      	subs	r3, #8
 80056ba:	089b      	lsrs	r3, r3, #2
 80056bc:	3306      	adds	r3, #6
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	18d3      	adds	r3, r2, r3
 80056c2:	3304      	adds	r3, #4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	1dfa      	adds	r2, r7, #7
 80056c8:	7812      	ldrb	r2, [r2, #0]
 80056ca:	0011      	movs	r1, r2
 80056cc:	2203      	movs	r2, #3
 80056ce:	400a      	ands	r2, r1
 80056d0:	00d2      	lsls	r2, r2, #3
 80056d2:	21ff      	movs	r1, #255	@ 0xff
 80056d4:	4091      	lsls	r1, r2
 80056d6:	000a      	movs	r2, r1
 80056d8:	43d2      	mvns	r2, r2
 80056da:	401a      	ands	r2, r3
 80056dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	019b      	lsls	r3, r3, #6
 80056e2:	22ff      	movs	r2, #255	@ 0xff
 80056e4:	401a      	ands	r2, r3
 80056e6:	1dfb      	adds	r3, r7, #7
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	0018      	movs	r0, r3
 80056ec:	2303      	movs	r3, #3
 80056ee:	4003      	ands	r3, r0
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80056f4:	4809      	ldr	r0, [pc, #36]	@ (800571c <__NVIC_SetPriority+0xd8>)
 80056f6:	1dfb      	adds	r3, r7, #7
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	001c      	movs	r4, r3
 80056fc:	230f      	movs	r3, #15
 80056fe:	4023      	ands	r3, r4
 8005700:	3b08      	subs	r3, #8
 8005702:	089b      	lsrs	r3, r3, #2
 8005704:	430a      	orrs	r2, r1
 8005706:	3306      	adds	r3, #6
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	18c3      	adds	r3, r0, r3
 800570c:	3304      	adds	r3, #4
 800570e:	601a      	str	r2, [r3, #0]
}
 8005710:	46c0      	nop			@ (mov r8, r8)
 8005712:	46bd      	mov	sp, r7
 8005714:	b003      	add	sp, #12
 8005716:	bd90      	pop	{r4, r7, pc}
 8005718:	e000e100 	.word	0xe000e100
 800571c:	e000ed00 	.word	0xe000ed00

08005720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	1e5a      	subs	r2, r3, #1
 800572c:	2380      	movs	r3, #128	@ 0x80
 800572e:	045b      	lsls	r3, r3, #17
 8005730:	429a      	cmp	r2, r3
 8005732:	d301      	bcc.n	8005738 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005734:	2301      	movs	r3, #1
 8005736:	e010      	b.n	800575a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005738:	4b0a      	ldr	r3, [pc, #40]	@ (8005764 <SysTick_Config+0x44>)
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	3a01      	subs	r2, #1
 800573e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005740:	2301      	movs	r3, #1
 8005742:	425b      	negs	r3, r3
 8005744:	2103      	movs	r1, #3
 8005746:	0018      	movs	r0, r3
 8005748:	f7ff ff7c 	bl	8005644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800574c:	4b05      	ldr	r3, [pc, #20]	@ (8005764 <SysTick_Config+0x44>)
 800574e:	2200      	movs	r2, #0
 8005750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005752:	4b04      	ldr	r3, [pc, #16]	@ (8005764 <SysTick_Config+0x44>)
 8005754:	2207      	movs	r2, #7
 8005756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005758:	2300      	movs	r3, #0
}
 800575a:	0018      	movs	r0, r3
 800575c:	46bd      	mov	sp, r7
 800575e:	b002      	add	sp, #8
 8005760:	bd80      	pop	{r7, pc}
 8005762:	46c0      	nop			@ (mov r8, r8)
 8005764:	e000e010 	.word	0xe000e010

08005768 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	607a      	str	r2, [r7, #4]
 8005772:	210f      	movs	r1, #15
 8005774:	187b      	adds	r3, r7, r1
 8005776:	1c02      	adds	r2, r0, #0
 8005778:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	187b      	adds	r3, r7, r1
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	b25b      	sxtb	r3, r3
 8005782:	0011      	movs	r1, r2
 8005784:	0018      	movs	r0, r3
 8005786:	f7ff ff5d 	bl	8005644 <__NVIC_SetPriority>
}
 800578a:	46c0      	nop			@ (mov r8, r8)
 800578c:	46bd      	mov	sp, r7
 800578e:	b004      	add	sp, #16
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	0002      	movs	r2, r0
 800579a:	1dfb      	adds	r3, r7, #7
 800579c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800579e:	1dfb      	adds	r3, r7, #7
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	b25b      	sxtb	r3, r3
 80057a4:	0018      	movs	r0, r3
 80057a6:	f7ff ff33 	bl	8005610 <__NVIC_EnableIRQ>
}
 80057aa:	46c0      	nop			@ (mov r8, r8)
 80057ac:	46bd      	mov	sp, r7
 80057ae:	b002      	add	sp, #8
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	0018      	movs	r0, r3
 80057be:	f7ff ffaf 	bl	8005720 <SysTick_Config>
 80057c2:	0003      	movs	r3, r0
}
 80057c4:	0018      	movs	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	b002      	add	sp, #8
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80057de:	2300      	movs	r3, #0
 80057e0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80057e2:	e155      	b.n	8005a90 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2101      	movs	r1, #1
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4091      	lsls	r1, r2
 80057ee:	000a      	movs	r2, r1
 80057f0:	4013      	ands	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d100      	bne.n	80057fc <HAL_GPIO_Init+0x30>
 80057fa:	e146      	b.n	8005a8a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2203      	movs	r2, #3
 8005802:	4013      	ands	r3, r2
 8005804:	2b01      	cmp	r3, #1
 8005806:	d005      	beq.n	8005814 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2203      	movs	r2, #3
 800580e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005810:	2b02      	cmp	r3, #2
 8005812:	d130      	bne.n	8005876 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	2203      	movs	r2, #3
 8005820:	409a      	lsls	r2, r3
 8005822:	0013      	movs	r3, r2
 8005824:	43da      	mvns	r2, r3
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	4013      	ands	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	409a      	lsls	r2, r3
 8005836:	0013      	movs	r3, r2
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800584a:	2201      	movs	r2, #1
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	409a      	lsls	r2, r3
 8005850:	0013      	movs	r3, r2
 8005852:	43da      	mvns	r2, r3
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	4013      	ands	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	091b      	lsrs	r3, r3, #4
 8005860:	2201      	movs	r2, #1
 8005862:	401a      	ands	r2, r3
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	409a      	lsls	r2, r3
 8005868:	0013      	movs	r3, r2
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2203      	movs	r2, #3
 800587c:	4013      	ands	r3, r2
 800587e:	2b03      	cmp	r3, #3
 8005880:	d017      	beq.n	80058b2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	2203      	movs	r2, #3
 800588e:	409a      	lsls	r2, r3
 8005890:	0013      	movs	r3, r2
 8005892:	43da      	mvns	r2, r3
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	4013      	ands	r3, r2
 8005898:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	409a      	lsls	r2, r3
 80058a4:	0013      	movs	r3, r2
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	2203      	movs	r2, #3
 80058b8:	4013      	ands	r3, r2
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d123      	bne.n	8005906 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	08da      	lsrs	r2, r3, #3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	3208      	adds	r2, #8
 80058c6:	0092      	lsls	r2, r2, #2
 80058c8:	58d3      	ldr	r3, [r2, r3]
 80058ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2207      	movs	r2, #7
 80058d0:	4013      	ands	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	220f      	movs	r2, #15
 80058d6:	409a      	lsls	r2, r3
 80058d8:	0013      	movs	r3, r2
 80058da:	43da      	mvns	r2, r3
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	4013      	ands	r3, r2
 80058e0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2107      	movs	r1, #7
 80058ea:	400b      	ands	r3, r1
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	409a      	lsls	r2, r3
 80058f0:	0013      	movs	r3, r2
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	08da      	lsrs	r2, r3, #3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3208      	adds	r2, #8
 8005900:	0092      	lsls	r2, r2, #2
 8005902:	6939      	ldr	r1, [r7, #16]
 8005904:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	2203      	movs	r2, #3
 8005912:	409a      	lsls	r2, r3
 8005914:	0013      	movs	r3, r2
 8005916:	43da      	mvns	r2, r3
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	4013      	ands	r3, r2
 800591c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2203      	movs	r2, #3
 8005924:	401a      	ands	r2, r3
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	409a      	lsls	r2, r3
 800592c:	0013      	movs	r3, r2
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	4313      	orrs	r3, r2
 8005932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	23c0      	movs	r3, #192	@ 0xc0
 8005940:	029b      	lsls	r3, r3, #10
 8005942:	4013      	ands	r3, r2
 8005944:	d100      	bne.n	8005948 <HAL_GPIO_Init+0x17c>
 8005946:	e0a0      	b.n	8005a8a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005948:	4b57      	ldr	r3, [pc, #348]	@ (8005aa8 <HAL_GPIO_Init+0x2dc>)
 800594a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800594c:	4b56      	ldr	r3, [pc, #344]	@ (8005aa8 <HAL_GPIO_Init+0x2dc>)
 800594e:	2101      	movs	r1, #1
 8005950:	430a      	orrs	r2, r1
 8005952:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8005954:	4a55      	ldr	r2, [pc, #340]	@ (8005aac <HAL_GPIO_Init+0x2e0>)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	089b      	lsrs	r3, r3, #2
 800595a:	3302      	adds	r3, #2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	589b      	ldr	r3, [r3, r2]
 8005960:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2203      	movs	r2, #3
 8005966:	4013      	ands	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	220f      	movs	r2, #15
 800596c:	409a      	lsls	r2, r3
 800596e:	0013      	movs	r3, r2
 8005970:	43da      	mvns	r2, r3
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	4013      	ands	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	23a0      	movs	r3, #160	@ 0xa0
 800597c:	05db      	lsls	r3, r3, #23
 800597e:	429a      	cmp	r2, r3
 8005980:	d01f      	beq.n	80059c2 <HAL_GPIO_Init+0x1f6>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a4a      	ldr	r2, [pc, #296]	@ (8005ab0 <HAL_GPIO_Init+0x2e4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d019      	beq.n	80059be <HAL_GPIO_Init+0x1f2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a49      	ldr	r2, [pc, #292]	@ (8005ab4 <HAL_GPIO_Init+0x2e8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <HAL_GPIO_Init+0x1ee>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a48      	ldr	r2, [pc, #288]	@ (8005ab8 <HAL_GPIO_Init+0x2ec>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00d      	beq.n	80059b6 <HAL_GPIO_Init+0x1ea>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a47      	ldr	r2, [pc, #284]	@ (8005abc <HAL_GPIO_Init+0x2f0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d007      	beq.n	80059b2 <HAL_GPIO_Init+0x1e6>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a46      	ldr	r2, [pc, #280]	@ (8005ac0 <HAL_GPIO_Init+0x2f4>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d101      	bne.n	80059ae <HAL_GPIO_Init+0x1e2>
 80059aa:	2305      	movs	r3, #5
 80059ac:	e00a      	b.n	80059c4 <HAL_GPIO_Init+0x1f8>
 80059ae:	2306      	movs	r3, #6
 80059b0:	e008      	b.n	80059c4 <HAL_GPIO_Init+0x1f8>
 80059b2:	2304      	movs	r3, #4
 80059b4:	e006      	b.n	80059c4 <HAL_GPIO_Init+0x1f8>
 80059b6:	2303      	movs	r3, #3
 80059b8:	e004      	b.n	80059c4 <HAL_GPIO_Init+0x1f8>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e002      	b.n	80059c4 <HAL_GPIO_Init+0x1f8>
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <HAL_GPIO_Init+0x1f8>
 80059c2:	2300      	movs	r3, #0
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	2103      	movs	r1, #3
 80059c8:	400a      	ands	r2, r1
 80059ca:	0092      	lsls	r2, r2, #2
 80059cc:	4093      	lsls	r3, r2
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059d4:	4935      	ldr	r1, [pc, #212]	@ (8005aac <HAL_GPIO_Init+0x2e0>)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	089b      	lsrs	r3, r3, #2
 80059da:	3302      	adds	r3, #2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059e2:	4b38      	ldr	r3, [pc, #224]	@ (8005ac4 <HAL_GPIO_Init+0x2f8>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	43da      	mvns	r2, r3
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	4013      	ands	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	2380      	movs	r3, #128	@ 0x80
 80059f8:	035b      	lsls	r3, r3, #13
 80059fa:	4013      	ands	r3, r2
 80059fc:	d003      	beq.n	8005a06 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005a06:	4b2f      	ldr	r3, [pc, #188]	@ (8005ac4 <HAL_GPIO_Init+0x2f8>)
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8005ac4 <HAL_GPIO_Init+0x2f8>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	43da      	mvns	r2, r3
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	2380      	movs	r3, #128	@ 0x80
 8005a22:	039b      	lsls	r3, r3, #14
 8005a24:	4013      	ands	r3, r2
 8005a26:	d003      	beq.n	8005a30 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005a30:	4b24      	ldr	r3, [pc, #144]	@ (8005ac4 <HAL_GPIO_Init+0x2f8>)
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8005a36:	4b23      	ldr	r3, [pc, #140]	@ (8005ac4 <HAL_GPIO_Init+0x2f8>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	43da      	mvns	r2, r3
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	4013      	ands	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	2380      	movs	r3, #128	@ 0x80
 8005a4c:	029b      	lsls	r3, r3, #10
 8005a4e:	4013      	ands	r3, r2
 8005a50:	d003      	beq.n	8005a5a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ac4 <HAL_GPIO_Init+0x2f8>)
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a60:	4b18      	ldr	r3, [pc, #96]	@ (8005ac4 <HAL_GPIO_Init+0x2f8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	43da      	mvns	r2, r3
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	2380      	movs	r3, #128	@ 0x80
 8005a76:	025b      	lsls	r3, r3, #9
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d003      	beq.n	8005a84 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005a84:	4b0f      	ldr	r3, [pc, #60]	@ (8005ac4 <HAL_GPIO_Init+0x2f8>)
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	40da      	lsrs	r2, r3
 8005a98:	1e13      	subs	r3, r2, #0
 8005a9a:	d000      	beq.n	8005a9e <HAL_GPIO_Init+0x2d2>
 8005a9c:	e6a2      	b.n	80057e4 <HAL_GPIO_Init+0x18>
  }
}
 8005a9e:	46c0      	nop			@ (mov r8, r8)
 8005aa0:	46c0      	nop			@ (mov r8, r8)
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	b006      	add	sp, #24
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	40010000 	.word	0x40010000
 8005ab0:	50000400 	.word	0x50000400
 8005ab4:	50000800 	.word	0x50000800
 8005ab8:	50000c00 	.word	0x50000c00
 8005abc:	50001000 	.word	0x50001000
 8005ac0:	50001c00 	.word	0x50001c00
 8005ac4:	40010400 	.word	0x40010400

08005ac8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	0008      	movs	r0, r1
 8005ad2:	0011      	movs	r1, r2
 8005ad4:	1cbb      	adds	r3, r7, #2
 8005ad6:	1c02      	adds	r2, r0, #0
 8005ad8:	801a      	strh	r2, [r3, #0]
 8005ada:	1c7b      	adds	r3, r7, #1
 8005adc:	1c0a      	adds	r2, r1, #0
 8005ade:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ae0:	1c7b      	adds	r3, r7, #1
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d004      	beq.n	8005af2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ae8:	1cbb      	adds	r3, r7, #2
 8005aea:	881a      	ldrh	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005af0:	e003      	b.n	8005afa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005af2:	1cbb      	adds	r3, r7, #2
 8005af4:	881a      	ldrh	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005afa:	46c0      	nop			@ (mov r8, r8)
 8005afc:	46bd      	mov	sp, r7
 8005afe:	b002      	add	sp, #8
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b06:	b08b      	sub	sp, #44	@ 0x2c
 8005b08:	af06      	add	r7, sp, #24
 8005b0a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e0f0      	b.n	8005cf8 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a79      	ldr	r2, [pc, #484]	@ (8005d00 <HAL_PCD_Init+0x1fc>)
 8005b1a:	5c9b      	ldrb	r3, [r3, r2]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d108      	bne.n	8005b34 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	23aa      	movs	r3, #170	@ 0xaa
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	2100      	movs	r1, #0
 8005b2a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f007 f972 	bl	800ce18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a72      	ldr	r2, [pc, #456]	@ (8005d00 <HAL_PCD_Init+0x1fc>)
 8005b38:	2103      	movs	r1, #3
 8005b3a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	0018      	movs	r0, r3
 8005b42:	f003 f973 	bl	8008e2c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b46:	230f      	movs	r3, #15
 8005b48:	18fb      	adds	r3, r7, r3
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	e049      	b.n	8005be4 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b50:	200f      	movs	r0, #15
 8005b52:	183b      	adds	r3, r7, r0
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	0013      	movs	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	189b      	adds	r3, r3, r2
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	18cb      	adds	r3, r1, r3
 8005b64:	3301      	adds	r3, #1
 8005b66:	2201      	movs	r2, #1
 8005b68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b6a:	183b      	adds	r3, r7, r0
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	0013      	movs	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	189b      	adds	r3, r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	183a      	adds	r2, r7, r0
 8005b7c:	7812      	ldrb	r2, [r2, #0]
 8005b7e:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b80:	183b      	adds	r3, r7, r0
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	0013      	movs	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	189b      	adds	r3, r3, r2
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	18cb      	adds	r3, r1, r3
 8005b92:	3303      	adds	r3, #3
 8005b94:	2200      	movs	r2, #0
 8005b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b98:	183b      	adds	r3, r7, r0
 8005b9a:	781a      	ldrb	r2, [r3, #0]
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	0013      	movs	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	189b      	adds	r3, r3, r2
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	18cb      	adds	r3, r1, r3
 8005ba8:	3338      	adds	r3, #56	@ 0x38
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005bae:	183b      	adds	r3, r7, r0
 8005bb0:	781a      	ldrb	r2, [r3, #0]
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	0013      	movs	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	189b      	adds	r3, r3, r2
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	18cb      	adds	r3, r1, r3
 8005bbe:	333c      	adds	r3, #60	@ 0x3c
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005bc4:	183b      	adds	r3, r7, r0
 8005bc6:	781a      	ldrb	r2, [r3, #0]
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	0013      	movs	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	189b      	adds	r3, r3, r2
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	18cb      	adds	r3, r1, r3
 8005bd4:	3340      	adds	r3, #64	@ 0x40
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bda:	183b      	adds	r3, r7, r0
 8005bdc:	781a      	ldrb	r2, [r3, #0]
 8005bde:	183b      	adds	r3, r7, r0
 8005be0:	3201      	adds	r2, #1
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	210f      	movs	r1, #15
 8005be6:	187b      	adds	r3, r7, r1
 8005be8:	781a      	ldrb	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d3ae      	bcc.n	8005b50 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bf2:	187b      	adds	r3, r7, r1
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	701a      	strb	r2, [r3, #0]
 8005bf8:	e056      	b.n	8005ca8 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005bfa:	240f      	movs	r4, #15
 8005bfc:	193b      	adds	r3, r7, r4
 8005bfe:	781a      	ldrb	r2, [r3, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	236a      	movs	r3, #106	@ 0x6a
 8005c04:	33ff      	adds	r3, #255	@ 0xff
 8005c06:	0019      	movs	r1, r3
 8005c08:	0013      	movs	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	189b      	adds	r3, r3, r2
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	18c3      	adds	r3, r0, r3
 8005c12:	185b      	adds	r3, r3, r1
 8005c14:	2200      	movs	r2, #0
 8005c16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c18:	193b      	adds	r3, r7, r4
 8005c1a:	781a      	ldrb	r2, [r3, #0]
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	23b4      	movs	r3, #180	@ 0xb4
 8005c20:	0059      	lsls	r1, r3, #1
 8005c22:	0013      	movs	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	189b      	adds	r3, r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	18c3      	adds	r3, r0, r3
 8005c2c:	185b      	adds	r3, r3, r1
 8005c2e:	193a      	adds	r2, r7, r4
 8005c30:	7812      	ldrb	r2, [r2, #0]
 8005c32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c34:	193b      	adds	r3, r7, r4
 8005c36:	781a      	ldrb	r2, [r3, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	236c      	movs	r3, #108	@ 0x6c
 8005c3c:	33ff      	adds	r3, #255	@ 0xff
 8005c3e:	0019      	movs	r1, r3
 8005c40:	0013      	movs	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	189b      	adds	r3, r3, r2
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	18c3      	adds	r3, r0, r3
 8005c4a:	185b      	adds	r3, r3, r1
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c50:	193b      	adds	r3, r7, r4
 8005c52:	781a      	ldrb	r2, [r3, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	23bc      	movs	r3, #188	@ 0xbc
 8005c58:	0059      	lsls	r1, r3, #1
 8005c5a:	0013      	movs	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	189b      	adds	r3, r3, r2
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	18c3      	adds	r3, r0, r3
 8005c64:	185b      	adds	r3, r3, r1
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c6a:	193b      	adds	r3, r7, r4
 8005c6c:	781a      	ldrb	r2, [r3, #0]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	23be      	movs	r3, #190	@ 0xbe
 8005c72:	0059      	lsls	r1, r3, #1
 8005c74:	0013      	movs	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	189b      	adds	r3, r3, r2
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	18c3      	adds	r3, r0, r3
 8005c7e:	185b      	adds	r3, r3, r1
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c84:	193b      	adds	r3, r7, r4
 8005c86:	781a      	ldrb	r2, [r3, #0]
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	23c0      	movs	r3, #192	@ 0xc0
 8005c8c:	0059      	lsls	r1, r3, #1
 8005c8e:	0013      	movs	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	189b      	adds	r3, r3, r2
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	18c3      	adds	r3, r0, r3
 8005c98:	185b      	adds	r3, r3, r1
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c9e:	193b      	adds	r3, r7, r4
 8005ca0:	781a      	ldrb	r2, [r3, #0]
 8005ca2:	193b      	adds	r3, r7, r4
 8005ca4:	3201      	adds	r2, #1
 8005ca6:	701a      	strb	r2, [r3, #0]
 8005ca8:	230f      	movs	r3, #15
 8005caa:	18fb      	adds	r3, r7, r3
 8005cac:	781a      	ldrb	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d3a1      	bcc.n	8005bfa <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6818      	ldr	r0, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	466a      	mov	r2, sp
 8005cbe:	0011      	movs	r1, r2
 8005cc0:	001a      	movs	r2, r3
 8005cc2:	3210      	adds	r2, #16
 8005cc4:	ca70      	ldmia	r2!, {r4, r5, r6}
 8005cc6:	c170      	stmia	r1!, {r4, r5, r6}
 8005cc8:	ca30      	ldmia	r2!, {r4, r5}
 8005cca:	c130      	stmia	r1!, {r4, r5}
 8005ccc:	6859      	ldr	r1, [r3, #4]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f003 f8c5 	bl	8008e60 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2224      	movs	r2, #36	@ 0x24
 8005cda:	2100      	movs	r1, #0
 8005cdc:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a07      	ldr	r2, [pc, #28]	@ (8005d00 <HAL_PCD_Init+0x1fc>)
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d103      	bne.n	8005cf6 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f001 fd23 	bl	800773c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	b005      	add	sp, #20
 8005cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d00:	000002a9 	.word	0x000002a9

08005d04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	23aa      	movs	r3, #170	@ 0xaa
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	5cd3      	ldrb	r3, [r2, r3]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d101      	bne.n	8005d1c <HAL_PCD_Start+0x18>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	e014      	b.n	8005d46 <HAL_PCD_Start+0x42>
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	23aa      	movs	r3, #170	@ 0xaa
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	2101      	movs	r1, #1
 8005d24:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	f003 f868 	bl	8008e00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	0018      	movs	r0, r3
 8005d36:	f005 f86b 	bl	800ae10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	23aa      	movs	r3, #170	@ 0xaa
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	2100      	movs	r1, #0
 8005d42:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	0018      	movs	r0, r3
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	b002      	add	sp, #8
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f005 f86d 	bl	800ae3c <USB_ReadInterrupts>
 8005d62:	0003      	movs	r3, r0
 8005d64:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	2380      	movs	r3, #128	@ 0x80
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	d004      	beq.n	8005d7a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	0018      	movs	r0, r3
 8005d74:	f000 fb62 	bl	800643c <PCD_EP_ISR_Handler>

    return;
 8005d78:	e11d      	b.n	8005fb6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	2380      	movs	r3, #128	@ 0x80
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	4013      	ands	r3, r2
 8005d82:	d015      	beq.n	8005db0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2244      	movs	r2, #68	@ 0x44
 8005d8a:	5a9b      	ldrh	r3, [r3, r2]
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	498a      	ldr	r1, [pc, #552]	@ (8005fbc <HAL_PCD_IRQHandler+0x26c>)
 8005d94:	400a      	ands	r2, r1
 8005d96:	b291      	uxth	r1, r2
 8005d98:	2244      	movs	r2, #68	@ 0x44
 8005d9a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	0018      	movs	r0, r3
 8005da0:	f007 f8bd 	bl	800cf1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2100      	movs	r1, #0
 8005da8:	0018      	movs	r0, r3
 8005daa:	f000 f915 	bl	8005fd8 <HAL_PCD_SetAddress>

    return;
 8005dae:	e102      	b.n	8005fb6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	2380      	movs	r3, #128	@ 0x80
 8005db4:	01db      	lsls	r3, r3, #7
 8005db6:	4013      	ands	r3, r2
 8005db8:	d00c      	beq.n	8005dd4 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2244      	movs	r2, #68	@ 0x44
 8005dc0:	5a9b      	ldrh	r3, [r3, r2]
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	497d      	ldr	r1, [pc, #500]	@ (8005fc0 <HAL_PCD_IRQHandler+0x270>)
 8005dca:	400a      	ands	r2, r1
 8005dcc:	b291      	uxth	r1, r2
 8005dce:	2244      	movs	r2, #68	@ 0x44
 8005dd0:	5299      	strh	r1, [r3, r2]

    return;
 8005dd2:	e0f0      	b.n	8005fb6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	2380      	movs	r3, #128	@ 0x80
 8005dd8:	019b      	lsls	r3, r3, #6
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d00c      	beq.n	8005df8 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2244      	movs	r2, #68	@ 0x44
 8005de4:	5a9b      	ldrh	r3, [r3, r2]
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4975      	ldr	r1, [pc, #468]	@ (8005fc4 <HAL_PCD_IRQHandler+0x274>)
 8005dee:	400a      	ands	r2, r1
 8005df0:	b291      	uxth	r1, r2
 8005df2:	2244      	movs	r2, #68	@ 0x44
 8005df4:	5299      	strh	r1, [r3, r2]

    return;
 8005df6:	e0de      	b.n	8005fb6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	2380      	movs	r3, #128	@ 0x80
 8005dfc:	015b      	lsls	r3, r3, #5
 8005dfe:	4013      	ands	r3, r2
 8005e00:	d038      	beq.n	8005e74 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2240      	movs	r2, #64	@ 0x40
 8005e08:	5a9b      	ldrh	r3, [r3, r2]
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2104      	movs	r1, #4
 8005e12:	438a      	bics	r2, r1
 8005e14:	b291      	uxth	r1, r2
 8005e16:	2240      	movs	r2, #64	@ 0x40
 8005e18:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2240      	movs	r2, #64	@ 0x40
 8005e20:	5a9b      	ldrh	r3, [r3, r2]
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2108      	movs	r1, #8
 8005e2a:	438a      	bics	r2, r1
 8005e2c:	b291      	uxth	r1, r2
 8005e2e:	2240      	movs	r2, #64	@ 0x40
 8005e30:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	23b8      	movs	r3, #184	@ 0xb8
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	5cd3      	ldrb	r3, [r2, r3]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d109      	bne.n	8005e52 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	23b8      	movs	r3, #184	@ 0xb8
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	2100      	movs	r1, #0
 8005e46:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f001 fc9f 	bl	8007790 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	0018      	movs	r0, r3
 8005e56:	f007 f8a3 	bl	800cfa0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2244      	movs	r2, #68	@ 0x44
 8005e60:	5a9b      	ldrh	r3, [r3, r2]
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4957      	ldr	r1, [pc, #348]	@ (8005fc8 <HAL_PCD_IRQHandler+0x278>)
 8005e6a:	400a      	ands	r2, r1
 8005e6c:	b291      	uxth	r1, r2
 8005e6e:	2244      	movs	r2, #68	@ 0x44
 8005e70:	5299      	strh	r1, [r3, r2]

    return;
 8005e72:	e0a0      	b.n	8005fb6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	2380      	movs	r3, #128	@ 0x80
 8005e78:	011b      	lsls	r3, r3, #4
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d028      	beq.n	8005ed0 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2240      	movs	r2, #64	@ 0x40
 8005e84:	5a9b      	ldrh	r3, [r3, r2]
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2108      	movs	r1, #8
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	b291      	uxth	r1, r2
 8005e92:	2240      	movs	r2, #64	@ 0x40
 8005e94:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2244      	movs	r2, #68	@ 0x44
 8005e9c:	5a9b      	ldrh	r3, [r3, r2]
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4949      	ldr	r1, [pc, #292]	@ (8005fcc <HAL_PCD_IRQHandler+0x27c>)
 8005ea6:	400a      	ands	r2, r1
 8005ea8:	b291      	uxth	r1, r2
 8005eaa:	2244      	movs	r2, #68	@ 0x44
 8005eac:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2240      	movs	r2, #64	@ 0x40
 8005eb4:	5a9b      	ldrh	r3, [r3, r2]
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2104      	movs	r1, #4
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	b291      	uxth	r1, r2
 8005ec2:	2240      	movs	r2, #64	@ 0x40
 8005ec4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f007 f84d 	bl	800cf68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005ece:	e072      	b.n	8005fb6 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2280      	movs	r2, #128	@ 0x80
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	d046      	beq.n	8005f66 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2244      	movs	r2, #68	@ 0x44
 8005ede:	5a9b      	ldrh	r3, [r3, r2]
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2180      	movs	r1, #128	@ 0x80
 8005ee8:	438a      	bics	r2, r1
 8005eea:	b291      	uxth	r1, r2
 8005eec:	2244      	movs	r2, #68	@ 0x44
 8005eee:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	23b8      	movs	r3, #184	@ 0xb8
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	5cd3      	ldrb	r3, [r2, r3]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d12f      	bne.n	8005f5c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2240      	movs	r2, #64	@ 0x40
 8005f02:	5a9b      	ldrh	r3, [r3, r2]
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2104      	movs	r1, #4
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	b291      	uxth	r1, r2
 8005f10:	2240      	movs	r2, #64	@ 0x40
 8005f12:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2240      	movs	r2, #64	@ 0x40
 8005f1a:	5a9b      	ldrh	r3, [r3, r2]
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2108      	movs	r1, #8
 8005f24:	430a      	orrs	r2, r1
 8005f26:	b291      	uxth	r1, r2
 8005f28:	2240      	movs	r2, #64	@ 0x40
 8005f2a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	23b8      	movs	r3, #184	@ 0xb8
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	2101      	movs	r1, #1
 8005f34:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2254      	movs	r2, #84	@ 0x54
 8005f3c:	5a9b      	ldrh	r3, [r3, r2]
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	089b      	lsrs	r3, r3, #2
 8005f42:	223c      	movs	r2, #60	@ 0x3c
 8005f44:	4013      	ands	r3, r2
 8005f46:	0019      	movs	r1, r3
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	23b9      	movs	r3, #185	@ 0xb9
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2101      	movs	r1, #1
 8005f54:	0018      	movs	r0, r3
 8005f56:	f001 fc1b 	bl	8007790 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005f5a:	e02c      	b.n	8005fb6 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	0018      	movs	r0, r3
 8005f60:	f007 f802 	bl	800cf68 <HAL_PCD_SuspendCallback>
    return;
 8005f64:	e027      	b.n	8005fb6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	2380      	movs	r3, #128	@ 0x80
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	d010      	beq.n	8005f92 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2244      	movs	r2, #68	@ 0x44
 8005f76:	5a9b      	ldrh	r3, [r3, r2]
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4914      	ldr	r1, [pc, #80]	@ (8005fd0 <HAL_PCD_IRQHandler+0x280>)
 8005f80:	400a      	ands	r2, r1
 8005f82:	b291      	uxth	r1, r2
 8005f84:	2244      	movs	r2, #68	@ 0x44
 8005f86:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f006 ffb8 	bl	800cf00 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005f90:	e011      	b.n	8005fb6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	2380      	movs	r3, #128	@ 0x80
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	4013      	ands	r3, r2
 8005f9a:	d00c      	beq.n	8005fb6 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2244      	movs	r2, #68	@ 0x44
 8005fa2:	5a9b      	ldrh	r3, [r3, r2]
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	490a      	ldr	r1, [pc, #40]	@ (8005fd4 <HAL_PCD_IRQHandler+0x284>)
 8005fac:	400a      	ands	r2, r1
 8005fae:	b291      	uxth	r1, r2
 8005fb0:	2244      	movs	r2, #68	@ 0x44
 8005fb2:	5299      	strh	r1, [r3, r2]

    return;
 8005fb4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b004      	add	sp, #16
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	fffffbff 	.word	0xfffffbff
 8005fc0:	ffffbfff 	.word	0xffffbfff
 8005fc4:	ffffdfff 	.word	0xffffdfff
 8005fc8:	ffffefff 	.word	0xffffefff
 8005fcc:	fffff7ff 	.word	0xfffff7ff
 8005fd0:	fffffdff 	.word	0xfffffdff
 8005fd4:	fffffeff 	.word	0xfffffeff

08005fd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	000a      	movs	r2, r1
 8005fe2:	1cfb      	adds	r3, r7, #3
 8005fe4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	23aa      	movs	r3, #170	@ 0xaa
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	5cd3      	ldrb	r3, [r2, r3]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_PCD_SetAddress+0x1e>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	e017      	b.n	8006026 <HAL_PCD_SetAddress+0x4e>
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	23aa      	movs	r3, #170	@ 0xaa
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	1cfa      	adds	r2, r7, #3
 8006004:	2124      	movs	r1, #36	@ 0x24
 8006006:	7812      	ldrb	r2, [r2, #0]
 8006008:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	1cfb      	adds	r3, r7, #3
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	0019      	movs	r1, r3
 8006014:	0010      	movs	r0, r2
 8006016:	f004 fee7 	bl	800ade8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	23aa      	movs	r3, #170	@ 0xaa
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	2100      	movs	r1, #0
 8006022:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	0018      	movs	r0, r3
 8006028:	46bd      	mov	sp, r7
 800602a:	b002      	add	sp, #8
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800602e:	b590      	push	{r4, r7, lr}
 8006030:	b085      	sub	sp, #20
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	000c      	movs	r4, r1
 8006038:	0010      	movs	r0, r2
 800603a:	0019      	movs	r1, r3
 800603c:	1cfb      	adds	r3, r7, #3
 800603e:	1c22      	adds	r2, r4, #0
 8006040:	701a      	strb	r2, [r3, #0]
 8006042:	003b      	movs	r3, r7
 8006044:	1c02      	adds	r2, r0, #0
 8006046:	801a      	strh	r2, [r3, #0]
 8006048:	1cbb      	adds	r3, r7, #2
 800604a:	1c0a      	adds	r2, r1, #0
 800604c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800604e:	230b      	movs	r3, #11
 8006050:	18fb      	adds	r3, r7, r3
 8006052:	2200      	movs	r2, #0
 8006054:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006056:	1cfb      	adds	r3, r7, #3
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	b25b      	sxtb	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	da0f      	bge.n	8006080 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006060:	1cfb      	adds	r3, r7, #3
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2207      	movs	r2, #7
 8006066:	4013      	ands	r3, r2
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	0013      	movs	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	189b      	adds	r3, r3, r2
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	18d3      	adds	r3, r2, r3
 8006076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	705a      	strb	r2, [r3, #1]
 800607e:	e00f      	b.n	80060a0 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006080:	1cfb      	adds	r3, r7, #3
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2207      	movs	r2, #7
 8006086:	401a      	ands	r2, r3
 8006088:	0013      	movs	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	189b      	adds	r3, r3, r2
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	3369      	adds	r3, #105	@ 0x69
 8006092:	33ff      	adds	r3, #255	@ 0xff
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	18d3      	adds	r3, r2, r3
 8006098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80060a0:	1cfb      	adds	r3, r7, #3
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2207      	movs	r2, #7
 80060a6:	4013      	ands	r3, r2
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80060ae:	003b      	movs	r3, r7
 80060b0:	881a      	ldrh	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	1cba      	adds	r2, r7, #2
 80060ba:	7812      	ldrb	r2, [r2, #0]
 80060bc:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80060be:	1cbb      	adds	r3, r7, #2
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d102      	bne.n	80060cc <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	23aa      	movs	r3, #170	@ 0xaa
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	5cd3      	ldrb	r3, [r2, r3]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_PCD_EP_Open+0xae>
 80060d8:	2302      	movs	r3, #2
 80060da:	e013      	b.n	8006104 <HAL_PCD_EP_Open+0xd6>
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	23aa      	movs	r3, #170	@ 0xaa
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	2101      	movs	r1, #1
 80060e4:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	0011      	movs	r1, r2
 80060ee:	0018      	movs	r0, r3
 80060f0:	f002 fede 	bl	8008eb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	23aa      	movs	r3, #170	@ 0xaa
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	2100      	movs	r1, #0
 80060fc:	54d1      	strb	r1, [r2, r3]

  return ret;
 80060fe:	230b      	movs	r3, #11
 8006100:	18fb      	adds	r3, r7, r3
 8006102:	781b      	ldrb	r3, [r3, #0]
}
 8006104:	0018      	movs	r0, r3
 8006106:	46bd      	mov	sp, r7
 8006108:	b005      	add	sp, #20
 800610a:	bd90      	pop	{r4, r7, pc}

0800610c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	000a      	movs	r2, r1
 8006116:	1cfb      	adds	r3, r7, #3
 8006118:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800611a:	1cfb      	adds	r3, r7, #3
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	b25b      	sxtb	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	da0f      	bge.n	8006144 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006124:	1cfb      	adds	r3, r7, #3
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2207      	movs	r2, #7
 800612a:	4013      	ands	r3, r2
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	0013      	movs	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	189b      	adds	r3, r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	18d3      	adds	r3, r2, r3
 800613a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	705a      	strb	r2, [r3, #1]
 8006142:	e00f      	b.n	8006164 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006144:	1cfb      	adds	r3, r7, #3
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2207      	movs	r2, #7
 800614a:	401a      	ands	r2, r3
 800614c:	0013      	movs	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	189b      	adds	r3, r3, r2
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	3369      	adds	r3, #105	@ 0x69
 8006156:	33ff      	adds	r3, #255	@ 0xff
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	18d3      	adds	r3, r2, r3
 800615c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006164:	1cfb      	adds	r3, r7, #3
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2207      	movs	r2, #7
 800616a:	4013      	ands	r3, r2
 800616c:	b2da      	uxtb	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	23aa      	movs	r3, #170	@ 0xaa
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	5cd3      	ldrb	r3, [r2, r3]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_PCD_EP_Close+0x76>
 800617e:	2302      	movs	r3, #2
 8006180:	e011      	b.n	80061a6 <HAL_PCD_EP_Close+0x9a>
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	23aa      	movs	r3, #170	@ 0xaa
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	2101      	movs	r1, #1
 800618a:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	0011      	movs	r1, r2
 8006194:	0018      	movs	r0, r3
 8006196:	f003 fa2d 	bl	80095f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	23aa      	movs	r3, #170	@ 0xaa
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	2100      	movs	r1, #0
 80061a2:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	0018      	movs	r0, r3
 80061a8:	46bd      	mov	sp, r7
 80061aa:	b004      	add	sp, #16
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b086      	sub	sp, #24
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
 80061ba:	200b      	movs	r0, #11
 80061bc:	183b      	adds	r3, r7, r0
 80061be:	1c0a      	adds	r2, r1, #0
 80061c0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061c2:	0001      	movs	r1, r0
 80061c4:	187b      	adds	r3, r7, r1
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2207      	movs	r2, #7
 80061ca:	401a      	ands	r2, r3
 80061cc:	0013      	movs	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	189b      	adds	r3, r3, r2
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	3369      	adds	r3, #105	@ 0x69
 80061d6:	33ff      	adds	r3, #255	@ 0xff
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	18d3      	adds	r3, r2, r3
 80061dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2200      	movs	r2, #0
 80061ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	2200      	movs	r2, #0
 80061f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061f6:	187b      	adds	r3, r7, r1
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2207      	movs	r2, #7
 80061fc:	4013      	ands	r3, r2
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	0011      	movs	r1, r2
 800620c:	0018      	movs	r0, r3
 800620e:	f003 fbb1 	bl	8009974 <USB_EPStartXfer>

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	0018      	movs	r0, r3
 8006216:	46bd      	mov	sp, r7
 8006218:	b006      	add	sp, #24
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	000a      	movs	r2, r1
 8006226:	1cfb      	adds	r3, r7, #3
 8006228:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800622a:	1cfb      	adds	r3, r7, #3
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2207      	movs	r2, #7
 8006230:	401a      	ands	r2, r3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	23c2      	movs	r3, #194	@ 0xc2
 8006236:	0059      	lsls	r1, r3, #1
 8006238:	0013      	movs	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	189b      	adds	r3, r3, r2
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	18c3      	adds	r3, r0, r3
 8006242:	185b      	adds	r3, r3, r1
 8006244:	681b      	ldr	r3, [r3, #0]
}
 8006246:	0018      	movs	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	b002      	add	sp, #8
 800624c:	bd80      	pop	{r7, pc}

0800624e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b086      	sub	sp, #24
 8006252:	af00      	add	r7, sp, #0
 8006254:	60f8      	str	r0, [r7, #12]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
 800625a:	200b      	movs	r0, #11
 800625c:	183b      	adds	r3, r7, r0
 800625e:	1c0a      	adds	r2, r1, #0
 8006260:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006262:	183b      	adds	r3, r7, r0
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2207      	movs	r2, #7
 8006268:	4013      	ands	r3, r2
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	0013      	movs	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	189b      	adds	r3, r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	18d3      	adds	r3, r2, r3
 8006278:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2224      	movs	r2, #36	@ 0x24
 800628a:	2101      	movs	r1, #1
 800628c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2200      	movs	r2, #0
 8006298:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2201      	movs	r2, #1
 800629e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062a0:	183b      	adds	r3, r7, r0
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2207      	movs	r2, #7
 80062a6:	4013      	ands	r3, r2
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	0011      	movs	r1, r2
 80062b6:	0018      	movs	r0, r3
 80062b8:	f003 fb5c 	bl	8009974 <USB_EPStartXfer>

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	0018      	movs	r0, r3
 80062c0:	46bd      	mov	sp, r7
 80062c2:	b006      	add	sp, #24
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	000a      	movs	r2, r1
 80062d0:	1cfb      	adds	r3, r7, #3
 80062d2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80062d4:	1cfb      	adds	r3, r7, #3
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2207      	movs	r2, #7
 80062da:	401a      	ands	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d901      	bls.n	80062e8 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e046      	b.n	8006376 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80062e8:	1cfb      	adds	r3, r7, #3
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	b25b      	sxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	da0f      	bge.n	8006312 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062f2:	1cfb      	adds	r3, r7, #3
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	2207      	movs	r2, #7
 80062f8:	4013      	ands	r3, r2
 80062fa:	1c5a      	adds	r2, r3, #1
 80062fc:	0013      	movs	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	189b      	adds	r3, r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	18d3      	adds	r3, r2, r3
 8006308:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	705a      	strb	r2, [r3, #1]
 8006310:	e00d      	b.n	800632e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006312:	1cfb      	adds	r3, r7, #3
 8006314:	781a      	ldrb	r2, [r3, #0]
 8006316:	0013      	movs	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	189b      	adds	r3, r3, r2
 800631c:	00db      	lsls	r3, r3, #3
 800631e:	3369      	adds	r3, #105	@ 0x69
 8006320:	33ff      	adds	r3, #255	@ 0xff
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	18d3      	adds	r3, r2, r3
 8006326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006334:	1cfb      	adds	r3, r7, #3
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2207      	movs	r2, #7
 800633a:	4013      	ands	r3, r2
 800633c:	b2da      	uxtb	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	23aa      	movs	r3, #170	@ 0xaa
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	5cd3      	ldrb	r3, [r2, r3]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_PCD_EP_SetStall+0x8c>
 800634e:	2302      	movs	r3, #2
 8006350:	e011      	b.n	8006376 <HAL_PCD_EP_SetStall+0xb0>
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	23aa      	movs	r3, #170	@ 0xaa
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	2101      	movs	r1, #1
 800635a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	0011      	movs	r1, r2
 8006364:	0018      	movs	r0, r3
 8006366:	f004 fc3d 	bl	800abe4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	23aa      	movs	r3, #170	@ 0xaa
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	2100      	movs	r1, #0
 8006372:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	0018      	movs	r0, r3
 8006378:	46bd      	mov	sp, r7
 800637a:	b004      	add	sp, #16
 800637c:	bd80      	pop	{r7, pc}

0800637e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	000a      	movs	r2, r1
 8006388:	1cfb      	adds	r3, r7, #3
 800638a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800638c:	1cfb      	adds	r3, r7, #3
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	220f      	movs	r2, #15
 8006392:	401a      	ands	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	429a      	cmp	r2, r3
 800639a:	d901      	bls.n	80063a0 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e048      	b.n	8006432 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80063a0:	1cfb      	adds	r3, r7, #3
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	b25b      	sxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	da0f      	bge.n	80063ca <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063aa:	1cfb      	adds	r3, r7, #3
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2207      	movs	r2, #7
 80063b0:	4013      	ands	r3, r2
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	0013      	movs	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	189b      	adds	r3, r3, r2
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	18d3      	adds	r3, r2, r3
 80063c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2201      	movs	r2, #1
 80063c6:	705a      	strb	r2, [r3, #1]
 80063c8:	e00f      	b.n	80063ea <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063ca:	1cfb      	adds	r3, r7, #3
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2207      	movs	r2, #7
 80063d0:	401a      	ands	r2, r3
 80063d2:	0013      	movs	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	189b      	adds	r3, r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	3369      	adds	r3, #105	@ 0x69
 80063dc:	33ff      	adds	r3, #255	@ 0xff
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	18d3      	adds	r3, r2, r3
 80063e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063f0:	1cfb      	adds	r3, r7, #3
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2207      	movs	r2, #7
 80063f6:	4013      	ands	r3, r2
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	23aa      	movs	r3, #170	@ 0xaa
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	5cd3      	ldrb	r3, [r2, r3]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d101      	bne.n	800640e <HAL_PCD_EP_ClrStall+0x90>
 800640a:	2302      	movs	r3, #2
 800640c:	e011      	b.n	8006432 <HAL_PCD_EP_ClrStall+0xb4>
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	23aa      	movs	r3, #170	@ 0xaa
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	2101      	movs	r1, #1
 8006416:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	0011      	movs	r1, r2
 8006420:	0018      	movs	r0, r3
 8006422:	f004 fc2f 	bl	800ac84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	23aa      	movs	r3, #170	@ 0xaa
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	2100      	movs	r1, #0
 800642e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	0018      	movs	r0, r3
 8006434:	46bd      	mov	sp, r7
 8006436:	b004      	add	sp, #16
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800643c:	b5b0      	push	{r4, r5, r7, lr}
 800643e:	b096      	sub	sp, #88	@ 0x58
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006444:	f000 fbec 	bl	8006c20 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	204e      	movs	r0, #78	@ 0x4e
 800644e:	183b      	adds	r3, r7, r0
 8006450:	2144      	movs	r1, #68	@ 0x44
 8006452:	5a52      	ldrh	r2, [r2, r1]
 8006454:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006456:	183b      	adds	r3, r7, r0
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	b2da      	uxtb	r2, r3
 800645c:	244d      	movs	r4, #77	@ 0x4d
 800645e:	193b      	adds	r3, r7, r4
 8006460:	210f      	movs	r1, #15
 8006462:	400a      	ands	r2, r1
 8006464:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8006466:	193b      	adds	r3, r7, r4
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d000      	beq.n	8006470 <PCD_EP_ISR_Handler+0x34>
 800646e:	e18f      	b.n	8006790 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006470:	183b      	adds	r3, r7, r0
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	2210      	movs	r2, #16
 8006476:	4013      	ands	r3, r2
 8006478:	d155      	bne.n	8006526 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	b29a      	uxth	r2, r3
 8006482:	200e      	movs	r0, #14
 8006484:	183b      	adds	r3, r7, r0
 8006486:	49bb      	ldr	r1, [pc, #748]	@ (8006774 <PCD_EP_ISR_Handler+0x338>)
 8006488:	400a      	ands	r2, r1
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	183a      	adds	r2, r7, r0
 8006492:	8812      	ldrh	r2, [r2, #0]
 8006494:	49b8      	ldr	r1, [pc, #736]	@ (8006778 <PCD_EP_ISR_Handler+0x33c>)
 8006496:	430a      	orrs	r2, r1
 8006498:	b292      	uxth	r2, r2
 800649a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	3328      	adds	r3, #40	@ 0x28
 80064a0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2250      	movs	r2, #80	@ 0x50
 80064a8:	5a9b      	ldrh	r3, [r3, r2]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	001a      	movs	r2, r3
 80064ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	18d2      	adds	r2, r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	18d3      	adds	r3, r2, r3
 80064bc:	4aaf      	ldr	r2, [pc, #700]	@ (800677c <PCD_EP_ISR_Handler+0x340>)
 80064be:	4694      	mov	ip, r2
 80064c0:	4463      	add	r3, ip
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	059b      	lsls	r3, r3, #22
 80064c6:	0d9a      	lsrs	r2, r3, #22
 80064c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80064cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ce:	695a      	ldr	r2, [r3, #20]
 80064d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	18d2      	adds	r2, r2, r3
 80064d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064d8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2100      	movs	r1, #0
 80064de:	0018      	movs	r0, r3
 80064e0:	f006 fcf0 	bl	800cec4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2224      	movs	r2, #36	@ 0x24
 80064e8:	5c9b      	ldrb	r3, [r3, r2]
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <PCD_EP_ISR_Handler+0xb8>
 80064f0:	f000 fb96 	bl	8006c20 <PCD_EP_ISR_Handler+0x7e4>
 80064f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <PCD_EP_ISR_Handler+0xc4>
 80064fc:	f000 fb90 	bl	8006c20 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2224      	movs	r2, #36	@ 0x24
 8006504:	5c9b      	ldrb	r3, [r3, r2]
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2280      	movs	r2, #128	@ 0x80
 800650a:	4252      	negs	r2, r2
 800650c:	4313      	orrs	r3, r2
 800650e:	b2da      	uxtb	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	0011      	movs	r1, r2
 8006516:	224c      	movs	r2, #76	@ 0x4c
 8006518:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2224      	movs	r2, #36	@ 0x24
 800651e:	2100      	movs	r1, #0
 8006520:	5499      	strb	r1, [r3, r2]
 8006522:	f000 fb7d 	bl	8006c20 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	3369      	adds	r3, #105	@ 0x69
 800652a:	33ff      	adds	r3, #255	@ 0xff
 800652c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	214a      	movs	r1, #74	@ 0x4a
 8006534:	187b      	adds	r3, r7, r1
 8006536:	8812      	ldrh	r2, [r2, #0]
 8006538:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800653a:	187b      	adds	r3, r7, r1
 800653c:	881a      	ldrh	r2, [r3, #0]
 800653e:	2380      	movs	r3, #128	@ 0x80
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	4013      	ands	r3, r2
 8006544:	d037      	beq.n	80065b6 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2250      	movs	r2, #80	@ 0x50
 800654c:	5a9b      	ldrh	r3, [r3, r2]
 800654e:	b29b      	uxth	r3, r3
 8006550:	001a      	movs	r2, r3
 8006552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	18d2      	adds	r2, r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	18d3      	adds	r3, r2, r3
 8006560:	4a87      	ldr	r2, [pc, #540]	@ (8006780 <PCD_EP_ISR_Handler+0x344>)
 8006562:	4694      	mov	ip, r2
 8006564:	4463      	add	r3, ip
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	059b      	lsls	r3, r3, #22
 800656a:	0d9a      	lsrs	r2, r3, #22
 800656c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800656e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6818      	ldr	r0, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	22ac      	movs	r2, #172	@ 0xac
 8006578:	0092      	lsls	r2, r2, #2
 800657a:	1899      	adds	r1, r3, r2
 800657c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800657e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006582:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006584:	b29b      	uxth	r3, r3
 8006586:	f004 fcb0 	bl	800aeea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29a      	uxth	r2, r3
 8006592:	2010      	movs	r0, #16
 8006594:	183b      	adds	r3, r7, r0
 8006596:	497b      	ldr	r1, [pc, #492]	@ (8006784 <PCD_EP_ISR_Handler+0x348>)
 8006598:	400a      	ands	r2, r1
 800659a:	801a      	strh	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	183a      	adds	r2, r7, r0
 80065a2:	8812      	ldrh	r2, [r2, #0]
 80065a4:	2180      	movs	r1, #128	@ 0x80
 80065a6:	430a      	orrs	r2, r1
 80065a8:	b292      	uxth	r2, r2
 80065aa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	0018      	movs	r0, r3
 80065b0:	f006 fc52 	bl	800ce58 <HAL_PCD_SetupStageCallback>
 80065b4:	e334      	b.n	8006c20 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80065b6:	234a      	movs	r3, #74	@ 0x4a
 80065b8:	18fb      	adds	r3, r7, r3
 80065ba:	2200      	movs	r2, #0
 80065bc:	5e9b      	ldrsh	r3, [r3, r2]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	db00      	blt.n	80065c4 <PCD_EP_ISR_Handler+0x188>
 80065c2:	e32d      	b.n	8006c20 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	201e      	movs	r0, #30
 80065ce:	183b      	adds	r3, r7, r0
 80065d0:	496c      	ldr	r1, [pc, #432]	@ (8006784 <PCD_EP_ISR_Handler+0x348>)
 80065d2:	400a      	ands	r2, r1
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	183a      	adds	r2, r7, r0
 80065dc:	8812      	ldrh	r2, [r2, #0]
 80065de:	2180      	movs	r1, #128	@ 0x80
 80065e0:	430a      	orrs	r2, r1
 80065e2:	b292      	uxth	r2, r2
 80065e4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2250      	movs	r2, #80	@ 0x50
 80065ec:	5a9b      	ldrh	r3, [r3, r2]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	001a      	movs	r2, r3
 80065f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	18d2      	adds	r2, r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	18d3      	adds	r3, r2, r3
 8006600:	4a5f      	ldr	r2, [pc, #380]	@ (8006780 <PCD_EP_ISR_Handler+0x344>)
 8006602:	4694      	mov	ip, r2
 8006604:	4463      	add	r3, ip
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	059b      	lsls	r3, r3, #22
 800660a:	0d9a      	lsrs	r2, r3, #22
 800660c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800660e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d01a      	beq.n	800664e <PCD_EP_ISR_Handler+0x212>
 8006618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d016      	beq.n	800664e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6818      	ldr	r0, [r3, #0]
 8006624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006626:	6959      	ldr	r1, [r3, #20]
 8006628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800662a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800662c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800662e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006630:	b29b      	uxth	r3, r3
 8006632:	f004 fc5a 	bl	800aeea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006638:	695a      	ldr	r2, [r3, #20]
 800663a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	18d2      	adds	r2, r2, r3
 8006640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006642:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2100      	movs	r1, #0
 8006648:	0018      	movs	r0, r3
 800664a:	f006 fc1a 	bl	800ce82 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	214a      	movs	r1, #74	@ 0x4a
 8006654:	187b      	adds	r3, r7, r1
 8006656:	8812      	ldrh	r2, [r2, #0]
 8006658:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800665a:	187b      	adds	r3, r7, r1
 800665c:	881a      	ldrh	r2, [r3, #0]
 800665e:	2380      	movs	r3, #128	@ 0x80
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	4013      	ands	r3, r2
 8006664:	d000      	beq.n	8006668 <PCD_EP_ISR_Handler+0x22c>
 8006666:	e2db      	b.n	8006c20 <PCD_EP_ISR_Handler+0x7e4>
 8006668:	187b      	adds	r3, r7, r1
 800666a:	881a      	ldrh	r2, [r3, #0]
 800666c:	23c0      	movs	r3, #192	@ 0xc0
 800666e:	019b      	lsls	r3, r3, #6
 8006670:	401a      	ands	r2, r3
 8006672:	23c0      	movs	r3, #192	@ 0xc0
 8006674:	019b      	lsls	r3, r3, #6
 8006676:	429a      	cmp	r2, r3
 8006678:	d100      	bne.n	800667c <PCD_EP_ISR_Handler+0x240>
 800667a:	e2d1      	b.n	8006c20 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	61bb      	str	r3, [r7, #24]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2250      	movs	r2, #80	@ 0x50
 8006688:	5a9b      	ldrh	r3, [r3, r2]
 800668a:	b29b      	uxth	r3, r3
 800668c:	001a      	movs	r2, r3
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	189b      	adds	r3, r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	4a3a      	ldr	r2, [pc, #232]	@ (8006780 <PCD_EP_ISR_Handler+0x344>)
 8006698:	4694      	mov	ip, r2
 800669a:	4463      	add	r3, ip
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	059b      	lsls	r3, r3, #22
 80066a6:	0d9b      	lsrs	r3, r3, #22
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	801a      	strh	r2, [r3, #0]
 80066ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80066b4:	d91a      	bls.n	80066ec <PCD_EP_ISR_Handler+0x2b0>
 80066b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80066be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	221f      	movs	r2, #31
 80066c4:	4013      	ands	r3, r2
 80066c6:	d102      	bne.n	80066ce <PCD_EP_ISR_Handler+0x292>
 80066c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ca:	3b01      	subs	r3, #1
 80066cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	029b      	lsls	r3, r3, #10
 80066da:	b29b      	uxth	r3, r3
 80066dc:	4313      	orrs	r3, r2
 80066de:	b29b      	uxth	r3, r3
 80066e0:	4a25      	ldr	r2, [pc, #148]	@ (8006778 <PCD_EP_ISR_Handler+0x33c>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	801a      	strh	r2, [r3, #0]
 80066ea:	e023      	b.n	8006734 <PCD_EP_ISR_Handler+0x2f8>
 80066ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d108      	bne.n	8006706 <PCD_EP_ISR_Handler+0x2ca>
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006778 <PCD_EP_ISR_Handler+0x33c>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	b29a      	uxth	r2, r3
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	801a      	strh	r2, [r3, #0]
 8006704:	e016      	b.n	8006734 <PCD_EP_ISR_Handler+0x2f8>
 8006706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	085b      	lsrs	r3, r3, #1
 800670c:	647b      	str	r3, [r7, #68]	@ 0x44
 800670e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	2201      	movs	r2, #1
 8006714:	4013      	ands	r3, r2
 8006716:	d002      	beq.n	800671e <PCD_EP_ISR_Handler+0x2e2>
 8006718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800671a:	3301      	adds	r3, #1
 800671c:	647b      	str	r3, [r7, #68]	@ 0x44
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	b29a      	uxth	r2, r3
 8006724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006726:	b29b      	uxth	r3, r3
 8006728:	029b      	lsls	r3, r3, #10
 800672a:	b29b      	uxth	r3, r3
 800672c:	4313      	orrs	r3, r2
 800672e:	b29a      	uxth	r2, r3
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	b29a      	uxth	r2, r3
 800673c:	2012      	movs	r0, #18
 800673e:	183b      	adds	r3, r7, r0
 8006740:	4911      	ldr	r1, [pc, #68]	@ (8006788 <PCD_EP_ISR_Handler+0x34c>)
 8006742:	400a      	ands	r2, r1
 8006744:	801a      	strh	r2, [r3, #0]
 8006746:	183b      	adds	r3, r7, r0
 8006748:	183a      	adds	r2, r7, r0
 800674a:	8812      	ldrh	r2, [r2, #0]
 800674c:	2180      	movs	r1, #128	@ 0x80
 800674e:	0149      	lsls	r1, r1, #5
 8006750:	404a      	eors	r2, r1
 8006752:	801a      	strh	r2, [r3, #0]
 8006754:	183b      	adds	r3, r7, r0
 8006756:	183a      	adds	r2, r7, r0
 8006758:	8812      	ldrh	r2, [r2, #0]
 800675a:	2180      	movs	r1, #128	@ 0x80
 800675c:	0189      	lsls	r1, r1, #6
 800675e:	404a      	eors	r2, r1
 8006760:	801a      	strh	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	183a      	adds	r2, r7, r0
 8006768:	8812      	ldrh	r2, [r2, #0]
 800676a:	4908      	ldr	r1, [pc, #32]	@ (800678c <PCD_EP_ISR_Handler+0x350>)
 800676c:	430a      	orrs	r2, r1
 800676e:	b292      	uxth	r2, r2
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	e255      	b.n	8006c20 <PCD_EP_ISR_Handler+0x7e4>
 8006774:	ffff8f0f 	.word	0xffff8f0f
 8006778:	ffff8000 	.word	0xffff8000
 800677c:	00000402 	.word	0x00000402
 8006780:	00000406 	.word	0x00000406
 8006784:	00000f8f 	.word	0x00000f8f
 8006788:	ffffbf8f 	.word	0xffffbf8f
 800678c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	001a      	movs	r2, r3
 8006796:	204d      	movs	r0, #77	@ 0x4d
 8006798:	183b      	adds	r3, r7, r0
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	18d2      	adds	r2, r2, r3
 80067a0:	214a      	movs	r1, #74	@ 0x4a
 80067a2:	187b      	adds	r3, r7, r1
 80067a4:	8812      	ldrh	r2, [r2, #0]
 80067a6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80067a8:	187b      	adds	r3, r7, r1
 80067aa:	2200      	movs	r2, #0
 80067ac:	5e9b      	ldrsh	r3, [r3, r2]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	db00      	blt.n	80067b4 <PCD_EP_ISR_Handler+0x378>
 80067b2:	e0fa      	b.n	80069aa <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	001a      	movs	r2, r3
 80067ba:	183b      	adds	r3, r7, r0
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	18d3      	adds	r3, r2, r3
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	2448      	movs	r4, #72	@ 0x48
 80067c8:	193b      	adds	r3, r7, r4
 80067ca:	49d1      	ldr	r1, [pc, #836]	@ (8006b10 <PCD_EP_ISR_Handler+0x6d4>)
 80067cc:	400a      	ands	r2, r1
 80067ce:	801a      	strh	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	001a      	movs	r2, r3
 80067d6:	183b      	adds	r3, r7, r0
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	18d3      	adds	r3, r2, r3
 80067de:	193a      	adds	r2, r7, r4
 80067e0:	8812      	ldrh	r2, [r2, #0]
 80067e2:	2180      	movs	r1, #128	@ 0x80
 80067e4:	430a      	orrs	r2, r1
 80067e6:	b292      	uxth	r2, r2
 80067e8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80067ea:	183b      	adds	r3, r7, r0
 80067ec:	781a      	ldrb	r2, [r3, #0]
 80067ee:	0013      	movs	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	189b      	adds	r3, r3, r2
 80067f4:	00db      	lsls	r3, r3, #3
 80067f6:	3369      	adds	r3, #105	@ 0x69
 80067f8:	33ff      	adds	r3, #255	@ 0xff
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	18d3      	adds	r3, r2, r3
 80067fe:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006802:	7b1b      	ldrb	r3, [r3, #12]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d125      	bne.n	8006854 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2250      	movs	r2, #80	@ 0x50
 800680e:	5a9b      	ldrh	r3, [r3, r2]
 8006810:	b29b      	uxth	r3, r3
 8006812:	001a      	movs	r2, r3
 8006814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	18d2      	adds	r2, r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	18d3      	adds	r3, r2, r3
 8006822:	4abc      	ldr	r2, [pc, #752]	@ (8006b14 <PCD_EP_ISR_Handler+0x6d8>)
 8006824:	4694      	mov	ip, r2
 8006826:	4463      	add	r3, ip
 8006828:	881a      	ldrh	r2, [r3, #0]
 800682a:	2450      	movs	r4, #80	@ 0x50
 800682c:	193b      	adds	r3, r7, r4
 800682e:	0592      	lsls	r2, r2, #22
 8006830:	0d92      	lsrs	r2, r2, #22
 8006832:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8006834:	193b      	adds	r3, r7, r4
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d100      	bne.n	800683e <PCD_EP_ISR_Handler+0x402>
 800683c:	e08d      	b.n	800695a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006844:	6959      	ldr	r1, [r3, #20]
 8006846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006848:	88da      	ldrh	r2, [r3, #6]
 800684a:	193b      	adds	r3, r7, r4
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	f004 fb4c 	bl	800aeea <USB_ReadPMA>
 8006852:	e082      	b.n	800695a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006856:	78db      	ldrb	r3, [r3, #3]
 8006858:	2b02      	cmp	r3, #2
 800685a:	d10c      	bne.n	8006876 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800685c:	2350      	movs	r3, #80	@ 0x50
 800685e:	18fc      	adds	r4, r7, r3
 8006860:	234a      	movs	r3, #74	@ 0x4a
 8006862:	18fb      	adds	r3, r7, r3
 8006864:	881a      	ldrh	r2, [r3, #0]
 8006866:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	0018      	movs	r0, r3
 800686c:	f000 f9ec 	bl	8006c48 <HAL_PCD_EP_DB_Receive>
 8006870:	0003      	movs	r3, r0
 8006872:	8023      	strh	r3, [r4, #0]
 8006874:	e071      	b.n	800695a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	001a      	movs	r2, r3
 800687c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	18d3      	adds	r3, r2, r3
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	b29a      	uxth	r2, r3
 8006888:	2052      	movs	r0, #82	@ 0x52
 800688a:	183b      	adds	r3, r7, r0
 800688c:	49a2      	ldr	r1, [pc, #648]	@ (8006b18 <PCD_EP_ISR_Handler+0x6dc>)
 800688e:	400a      	ands	r2, r1
 8006890:	801a      	strh	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	001a      	movs	r2, r3
 8006898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	18d3      	adds	r3, r2, r3
 80068a0:	183a      	adds	r2, r7, r0
 80068a2:	8812      	ldrh	r2, [r2, #0]
 80068a4:	499d      	ldr	r1, [pc, #628]	@ (8006b1c <PCD_EP_ISR_Handler+0x6e0>)
 80068a6:	430a      	orrs	r2, r1
 80068a8:	b292      	uxth	r2, r2
 80068aa:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	001a      	movs	r2, r3
 80068b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	18d3      	adds	r3, r2, r3
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	001a      	movs	r2, r3
 80068c0:	2380      	movs	r3, #128	@ 0x80
 80068c2:	01db      	lsls	r3, r3, #7
 80068c4:	4013      	ands	r3, r2
 80068c6:	d024      	beq.n	8006912 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2250      	movs	r2, #80	@ 0x50
 80068ce:	5a9b      	ldrh	r3, [r3, r2]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	001a      	movs	r2, r3
 80068d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	18d2      	adds	r2, r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	18d3      	adds	r3, r2, r3
 80068e2:	4a8f      	ldr	r2, [pc, #572]	@ (8006b20 <PCD_EP_ISR_Handler+0x6e4>)
 80068e4:	4694      	mov	ip, r2
 80068e6:	4463      	add	r3, ip
 80068e8:	881a      	ldrh	r2, [r3, #0]
 80068ea:	2450      	movs	r4, #80	@ 0x50
 80068ec:	193b      	adds	r3, r7, r4
 80068ee:	0592      	lsls	r2, r2, #22
 80068f0:	0d92      	lsrs	r2, r2, #22
 80068f2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80068f4:	193b      	adds	r3, r7, r4
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d02e      	beq.n	800695a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6818      	ldr	r0, [r3, #0]
 8006900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006902:	6959      	ldr	r1, [r3, #20]
 8006904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006906:	891a      	ldrh	r2, [r3, #8]
 8006908:	193b      	adds	r3, r7, r4
 800690a:	881b      	ldrh	r3, [r3, #0]
 800690c:	f004 faed 	bl	800aeea <USB_ReadPMA>
 8006910:	e023      	b.n	800695a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2250      	movs	r2, #80	@ 0x50
 8006918:	5a9b      	ldrh	r3, [r3, r2]
 800691a:	b29b      	uxth	r3, r3
 800691c:	001a      	movs	r2, r3
 800691e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	00db      	lsls	r3, r3, #3
 8006924:	18d2      	adds	r2, r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	18d3      	adds	r3, r2, r3
 800692c:	4a79      	ldr	r2, [pc, #484]	@ (8006b14 <PCD_EP_ISR_Handler+0x6d8>)
 800692e:	4694      	mov	ip, r2
 8006930:	4463      	add	r3, ip
 8006932:	881a      	ldrh	r2, [r3, #0]
 8006934:	2450      	movs	r4, #80	@ 0x50
 8006936:	193b      	adds	r3, r7, r4
 8006938:	0592      	lsls	r2, r2, #22
 800693a:	0d92      	lsrs	r2, r2, #22
 800693c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800693e:	193b      	adds	r3, r7, r4
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d009      	beq.n	800695a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800694c:	6959      	ldr	r1, [r3, #20]
 800694e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006950:	895a      	ldrh	r2, [r3, #10]
 8006952:	193b      	adds	r3, r7, r4
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	f004 fac8 	bl	800aeea <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800695a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800695c:	69da      	ldr	r2, [r3, #28]
 800695e:	2150      	movs	r1, #80	@ 0x50
 8006960:	187b      	adds	r3, r7, r1
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	18d2      	adds	r2, r2, r3
 8006966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006968:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800696a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800696c:	695a      	ldr	r2, [r3, #20]
 800696e:	187b      	adds	r3, r7, r1
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	18d2      	adds	r2, r2, r3
 8006974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006976:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d005      	beq.n	800698c <PCD_EP_ISR_Handler+0x550>
 8006980:	187b      	adds	r3, r7, r1
 8006982:	881a      	ldrh	r2, [r3, #0]
 8006984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	429a      	cmp	r2, r3
 800698a:	d207      	bcs.n	800699c <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800698c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800698e:	781a      	ldrb	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	0011      	movs	r1, r2
 8006994:	0018      	movs	r0, r3
 8006996:	f006 fa74 	bl	800ce82 <HAL_PCD_DataOutStageCallback>
 800699a:	e006      	b.n	80069aa <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80069a2:	0011      	movs	r1, r2
 80069a4:	0018      	movs	r0, r3
 80069a6:	f002 ffe5 	bl	8009974 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80069aa:	244a      	movs	r4, #74	@ 0x4a
 80069ac:	193b      	adds	r3, r7, r4
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	2280      	movs	r2, #128	@ 0x80
 80069b2:	4013      	ands	r3, r2
 80069b4:	d100      	bne.n	80069b8 <PCD_EP_ISR_Handler+0x57c>
 80069b6:	e133      	b.n	8006c20 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80069b8:	204d      	movs	r0, #77	@ 0x4d
 80069ba:	183b      	adds	r3, r7, r0
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	0013      	movs	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	189b      	adds	r3, r3, r2
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	18d3      	adds	r3, r2, r3
 80069cc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	001a      	movs	r2, r3
 80069d4:	183b      	adds	r3, r7, r0
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	18d3      	adds	r3, r2, r3
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29a      	uxth	r2, r3
 80069e0:	2542      	movs	r5, #66	@ 0x42
 80069e2:	197b      	adds	r3, r7, r5
 80069e4:	494f      	ldr	r1, [pc, #316]	@ (8006b24 <PCD_EP_ISR_Handler+0x6e8>)
 80069e6:	400a      	ands	r2, r1
 80069e8:	801a      	strh	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	001a      	movs	r2, r3
 80069f0:	183b      	adds	r3, r7, r0
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	18d3      	adds	r3, r2, r3
 80069f8:	197a      	adds	r2, r7, r5
 80069fa:	8812      	ldrh	r2, [r2, #0]
 80069fc:	494a      	ldr	r1, [pc, #296]	@ (8006b28 <PCD_EP_ISR_Handler+0x6ec>)
 80069fe:	430a      	orrs	r2, r1
 8006a00:	b292      	uxth	r2, r2
 8006a02:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a06:	78db      	ldrb	r3, [r3, #3]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d000      	beq.n	8006a0e <PCD_EP_ISR_Handler+0x5d2>
 8006a0c:	e0af      	b.n	8006b6e <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8006a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a10:	2200      	movs	r2, #0
 8006a12:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a16:	7b1b      	ldrb	r3, [r3, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d100      	bne.n	8006a1e <PCD_EP_ISR_Handler+0x5e2>
 8006a1c:	e09f      	b.n	8006b5e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006a1e:	193b      	adds	r3, r7, r4
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	2240      	movs	r2, #64	@ 0x40
 8006a24:	4013      	ands	r3, r2
 8006a26:	d046      	beq.n	8006ab6 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d125      	bne.n	8006a7c <PCD_EP_ISR_Handler+0x640>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2250      	movs	r2, #80	@ 0x50
 8006a3c:	5a9b      	ldrh	r3, [r3, r2]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	001a      	movs	r2, r3
 8006a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a44:	189b      	adds	r3, r3, r2
 8006a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	00da      	lsls	r2, r3, #3
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a50:	18d3      	adds	r3, r2, r3
 8006a52:	4a33      	ldr	r2, [pc, #204]	@ (8006b20 <PCD_EP_ISR_Handler+0x6e4>)
 8006a54:	4694      	mov	ip, r2
 8006a56:	4463      	add	r3, ip
 8006a58:	623b      	str	r3, [r7, #32]
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	059b      	lsls	r3, r3, #22
 8006a62:	0d9b      	lsrs	r3, r3, #22
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	801a      	strh	r2, [r3, #0]
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	4a2d      	ldr	r2, [pc, #180]	@ (8006b28 <PCD_EP_ISR_Handler+0x6ec>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	801a      	strh	r2, [r3, #0]
 8006a7a:	e070      	b.n	8006b5e <PCD_EP_ISR_Handler+0x722>
 8006a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a7e:	785b      	ldrb	r3, [r3, #1]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d16c      	bne.n	8006b5e <PCD_EP_ISR_Handler+0x722>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2250      	movs	r2, #80	@ 0x50
 8006a90:	5a9b      	ldrh	r3, [r3, r2]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	001a      	movs	r2, r3
 8006a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a98:	189b      	adds	r3, r3, r2
 8006a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	00da      	lsls	r2, r3, #3
 8006aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa4:	18d3      	adds	r3, r2, r3
 8006aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8006b20 <PCD_EP_ISR_Handler+0x6e4>)
 8006aa8:	4694      	mov	ip, r2
 8006aaa:	4463      	add	r3, ip
 8006aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	801a      	strh	r2, [r3, #0]
 8006ab4:	e053      	b.n	8006b5e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006abe:	785b      	ldrb	r3, [r3, #1]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d133      	bne.n	8006b2c <PCD_EP_ISR_Handler+0x6f0>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2250      	movs	r2, #80	@ 0x50
 8006ad0:	5a9b      	ldrh	r3, [r3, r2]
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	001a      	movs	r2, r3
 8006ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ad8:	189b      	adds	r3, r3, r2
 8006ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8006adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	00da      	lsls	r2, r3, #3
 8006ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae4:	18d3      	adds	r3, r2, r3
 8006ae6:	4a0b      	ldr	r2, [pc, #44]	@ (8006b14 <PCD_EP_ISR_Handler+0x6d8>)
 8006ae8:	4694      	mov	ip, r2
 8006aea:	4463      	add	r3, ip
 8006aec:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	059b      	lsls	r3, r3, #22
 8006af6:	0d9b      	lsrs	r3, r3, #22
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afc:	801a      	strh	r2, [r3, #0]
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	4a08      	ldr	r2, [pc, #32]	@ (8006b28 <PCD_EP_ISR_Handler+0x6ec>)
 8006b06:	4313      	orrs	r3, r2
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0c:	801a      	strh	r2, [r3, #0]
 8006b0e:	e026      	b.n	8006b5e <PCD_EP_ISR_Handler+0x722>
 8006b10:	00000f8f 	.word	0x00000f8f
 8006b14:	00000406 	.word	0x00000406
 8006b18:	ffff8f8f 	.word	0xffff8f8f
 8006b1c:	ffff80c0 	.word	0xffff80c0
 8006b20:	00000402 	.word	0x00000402
 8006b24:	ffff8f0f 	.word	0xffff8f0f
 8006b28:	ffff8000 	.word	0xffff8000
 8006b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b2e:	785b      	ldrb	r3, [r3, #1]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d114      	bne.n	8006b5e <PCD_EP_ISR_Handler+0x722>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2250      	movs	r2, #80	@ 0x50
 8006b3a:	5a9b      	ldrh	r3, [r3, r2]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	001a      	movs	r2, r3
 8006b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b42:	189b      	adds	r3, r3, r2
 8006b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	00da      	lsls	r2, r3, #3
 8006b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b4e:	18d3      	adds	r3, r2, r3
 8006b50:	4a3b      	ldr	r2, [pc, #236]	@ (8006c40 <PCD_EP_ISR_Handler+0x804>)
 8006b52:	4694      	mov	ip, r2
 8006b54:	4463      	add	r3, ip
 8006b56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b60:	781a      	ldrb	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	0011      	movs	r1, r2
 8006b66:	0018      	movs	r0, r3
 8006b68:	f006 f9ac 	bl	800cec4 <HAL_PCD_DataInStageCallback>
 8006b6c:	e058      	b.n	8006c20 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006b6e:	234a      	movs	r3, #74	@ 0x4a
 8006b70:	18fb      	adds	r3, r7, r3
 8006b72:	881a      	ldrh	r2, [r3, #0]
 8006b74:	2380      	movs	r3, #128	@ 0x80
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	4013      	ands	r3, r2
 8006b7a:	d149      	bne.n	8006c10 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2250      	movs	r2, #80	@ 0x50
 8006b82:	5a9b      	ldrh	r3, [r3, r2]
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	001a      	movs	r2, r3
 8006b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	18d2      	adds	r2, r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	18d3      	adds	r3, r2, r3
 8006b96:	4a2b      	ldr	r2, [pc, #172]	@ (8006c44 <PCD_EP_ISR_Handler+0x808>)
 8006b98:	4694      	mov	ip, r2
 8006b9a:	4463      	add	r3, ip
 8006b9c:	881a      	ldrh	r2, [r3, #0]
 8006b9e:	2140      	movs	r1, #64	@ 0x40
 8006ba0:	187b      	adds	r3, r7, r1
 8006ba2:	0592      	lsls	r2, r2, #22
 8006ba4:	0d92      	lsrs	r2, r2, #22
 8006ba6:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8006ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006baa:	699a      	ldr	r2, [r3, #24]
 8006bac:	187b      	adds	r3, r7, r1
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d907      	bls.n	8006bc4 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8006bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bb6:	699a      	ldr	r2, [r3, #24]
 8006bb8:	187b      	adds	r3, r7, r1
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	1ad2      	subs	r2, r2, r3
 8006bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bc0:	619a      	str	r2, [r3, #24]
 8006bc2:	e002      	b.n	8006bca <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8006bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d107      	bne.n	8006be2 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bd4:	781a      	ldrb	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	0011      	movs	r1, r2
 8006bda:	0018      	movs	r0, r3
 8006bdc:	f006 f972 	bl	800cec4 <HAL_PCD_DataInStageCallback>
 8006be0:	e01e      	b.n	8006c20 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006be4:	695a      	ldr	r2, [r3, #20]
 8006be6:	2140      	movs	r1, #64	@ 0x40
 8006be8:	187b      	adds	r3, r7, r1
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	18d2      	adds	r2, r2, r3
 8006bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bf0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bf4:	69da      	ldr	r2, [r3, #28]
 8006bf6:	187b      	adds	r3, r7, r1
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	18d2      	adds	r2, r2, r3
 8006bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bfe:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006c06:	0011      	movs	r1, r2
 8006c08:	0018      	movs	r0, r3
 8006c0a:	f002 feb3 	bl	8009974 <USB_EPStartXfer>
 8006c0e:	e007      	b.n	8006c20 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006c10:	234a      	movs	r3, #74	@ 0x4a
 8006c12:	18fb      	adds	r3, r7, r3
 8006c14:	881a      	ldrh	r2, [r3, #0]
 8006c16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	0018      	movs	r0, r3
 8006c1c:	f000 f930 	bl	8006e80 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2244      	movs	r2, #68	@ 0x44
 8006c26:	5a9b      	ldrh	r3, [r3, r2]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	b21b      	sxth	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	da01      	bge.n	8006c34 <PCD_EP_ISR_Handler+0x7f8>
 8006c30:	f7ff fc0a 	bl	8006448 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	0018      	movs	r0, r3
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	b016      	add	sp, #88	@ 0x58
 8006c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8006c3e:	46c0      	nop			@ (mov r8, r8)
 8006c40:	00000406 	.word	0x00000406
 8006c44:	00000402 	.word	0x00000402

08006c48 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006c48:	b590      	push	{r4, r7, lr}
 8006c4a:	b089      	sub	sp, #36	@ 0x24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	1dbb      	adds	r3, r7, #6
 8006c54:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006c56:	1dbb      	adds	r3, r7, #6
 8006c58:	881a      	ldrh	r2, [r3, #0]
 8006c5a:	2380      	movs	r3, #128	@ 0x80
 8006c5c:	01db      	lsls	r3, r3, #7
 8006c5e:	4013      	ands	r3, r2
 8006c60:	d100      	bne.n	8006c64 <HAL_PCD_EP_DB_Receive+0x1c>
 8006c62:	e07d      	b.n	8006d60 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2250      	movs	r2, #80	@ 0x50
 8006c6a:	5a9b      	ldrh	r3, [r3, r2]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	001a      	movs	r2, r3
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	00db      	lsls	r3, r3, #3
 8006c76:	18d2      	adds	r2, r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	18d3      	adds	r3, r2, r3
 8006c7e:	4a7a      	ldr	r2, [pc, #488]	@ (8006e68 <HAL_PCD_EP_DB_Receive+0x220>)
 8006c80:	4694      	mov	ip, r2
 8006c82:	4463      	add	r3, ip
 8006c84:	881a      	ldrh	r2, [r3, #0]
 8006c86:	211a      	movs	r1, #26
 8006c88:	187b      	adds	r3, r7, r1
 8006c8a:	0592      	lsls	r2, r2, #22
 8006c8c:	0d92      	lsrs	r2, r2, #22
 8006c8e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	699a      	ldr	r2, [r3, #24]
 8006c94:	187b      	adds	r3, r7, r1
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d307      	bcc.n	8006cac <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	699a      	ldr	r2, [r3, #24]
 8006ca0:	187b      	adds	r3, r7, r1
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	1ad2      	subs	r2, r2, r3
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	619a      	str	r2, [r3, #24]
 8006caa:	e002      	b.n	8006cb2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d121      	bne.n	8006cfe <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	001a      	movs	r2, r3
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	18d3      	adds	r3, r2, r3
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	2018      	movs	r0, #24
 8006cce:	183b      	adds	r3, r7, r0
 8006cd0:	4966      	ldr	r1, [pc, #408]	@ (8006e6c <HAL_PCD_EP_DB_Receive+0x224>)
 8006cd2:	400a      	ands	r2, r1
 8006cd4:	801a      	strh	r2, [r3, #0]
 8006cd6:	183b      	adds	r3, r7, r0
 8006cd8:	183a      	adds	r2, r7, r0
 8006cda:	8812      	ldrh	r2, [r2, #0]
 8006cdc:	2180      	movs	r1, #128	@ 0x80
 8006cde:	0189      	lsls	r1, r1, #6
 8006ce0:	404a      	eors	r2, r1
 8006ce2:	801a      	strh	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	001a      	movs	r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	18d3      	adds	r3, r2, r3
 8006cf2:	183a      	adds	r2, r7, r0
 8006cf4:	8812      	ldrh	r2, [r2, #0]
 8006cf6:	495e      	ldr	r1, [pc, #376]	@ (8006e70 <HAL_PCD_EP_DB_Receive+0x228>)
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	b292      	uxth	r2, r2
 8006cfc:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006cfe:	1dbb      	adds	r3, r7, #6
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	2240      	movs	r2, #64	@ 0x40
 8006d04:	4013      	ands	r3, r2
 8006d06:	d01a      	beq.n	8006d3e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	001a      	movs	r2, r3
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	18d3      	adds	r3, r2, r3
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	2016      	movs	r0, #22
 8006d1c:	183b      	adds	r3, r7, r0
 8006d1e:	4955      	ldr	r1, [pc, #340]	@ (8006e74 <HAL_PCD_EP_DB_Receive+0x22c>)
 8006d20:	400a      	ands	r2, r1
 8006d22:	801a      	strh	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	001a      	movs	r2, r3
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	18d3      	adds	r3, r2, r3
 8006d32:	183a      	adds	r2, r7, r0
 8006d34:	8812      	ldrh	r2, [r2, #0]
 8006d36:	4950      	ldr	r1, [pc, #320]	@ (8006e78 <HAL_PCD_EP_DB_Receive+0x230>)
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	b292      	uxth	r2, r2
 8006d3c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8006d3e:	241a      	movs	r4, #26
 8006d40:	193b      	adds	r3, r7, r4
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d100      	bne.n	8006d4a <HAL_PCD_EP_DB_Receive+0x102>
 8006d48:	e086      	b.n	8006e58 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6818      	ldr	r0, [r3, #0]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	6959      	ldr	r1, [r3, #20]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	891a      	ldrh	r2, [r3, #8]
 8006d56:	193b      	adds	r3, r7, r4
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	f004 f8c6 	bl	800aeea <USB_ReadPMA>
 8006d5e:	e07b      	b.n	8006e58 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2250      	movs	r2, #80	@ 0x50
 8006d66:	5a9b      	ldrh	r3, [r3, r2]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	001a      	movs	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	00db      	lsls	r3, r3, #3
 8006d72:	18d2      	adds	r2, r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	18d3      	adds	r3, r2, r3
 8006d7a:	4a40      	ldr	r2, [pc, #256]	@ (8006e7c <HAL_PCD_EP_DB_Receive+0x234>)
 8006d7c:	4694      	mov	ip, r2
 8006d7e:	4463      	add	r3, ip
 8006d80:	881a      	ldrh	r2, [r3, #0]
 8006d82:	211a      	movs	r1, #26
 8006d84:	187b      	adds	r3, r7, r1
 8006d86:	0592      	lsls	r2, r2, #22
 8006d88:	0d92      	lsrs	r2, r2, #22
 8006d8a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	699a      	ldr	r2, [r3, #24]
 8006d90:	187b      	adds	r3, r7, r1
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d307      	bcc.n	8006da8 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	699a      	ldr	r2, [r3, #24]
 8006d9c:	187b      	adds	r3, r7, r1
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	1ad2      	subs	r2, r2, r3
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	619a      	str	r2, [r3, #24]
 8006da6:	e002      	b.n	8006dae <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2200      	movs	r2, #0
 8006dac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d121      	bne.n	8006dfa <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	001a      	movs	r2, r3
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	18d3      	adds	r3, r2, r3
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	201e      	movs	r0, #30
 8006dca:	183b      	adds	r3, r7, r0
 8006dcc:	4927      	ldr	r1, [pc, #156]	@ (8006e6c <HAL_PCD_EP_DB_Receive+0x224>)
 8006dce:	400a      	ands	r2, r1
 8006dd0:	801a      	strh	r2, [r3, #0]
 8006dd2:	183b      	adds	r3, r7, r0
 8006dd4:	183a      	adds	r2, r7, r0
 8006dd6:	8812      	ldrh	r2, [r2, #0]
 8006dd8:	2180      	movs	r1, #128	@ 0x80
 8006dda:	0189      	lsls	r1, r1, #6
 8006ddc:	404a      	eors	r2, r1
 8006dde:	801a      	strh	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	001a      	movs	r2, r3
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	18d3      	adds	r3, r2, r3
 8006dee:	183a      	adds	r2, r7, r0
 8006df0:	8812      	ldrh	r2, [r2, #0]
 8006df2:	491f      	ldr	r1, [pc, #124]	@ (8006e70 <HAL_PCD_EP_DB_Receive+0x228>)
 8006df4:	430a      	orrs	r2, r1
 8006df6:	b292      	uxth	r2, r2
 8006df8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006dfa:	1dbb      	adds	r3, r7, #6
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	2240      	movs	r2, #64	@ 0x40
 8006e00:	4013      	ands	r3, r2
 8006e02:	d11a      	bne.n	8006e3a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	001a      	movs	r2, r3
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	18d3      	adds	r3, r2, r3
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	201c      	movs	r0, #28
 8006e18:	183b      	adds	r3, r7, r0
 8006e1a:	4916      	ldr	r1, [pc, #88]	@ (8006e74 <HAL_PCD_EP_DB_Receive+0x22c>)
 8006e1c:	400a      	ands	r2, r1
 8006e1e:	801a      	strh	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	001a      	movs	r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	18d3      	adds	r3, r2, r3
 8006e2e:	183a      	adds	r2, r7, r0
 8006e30:	8812      	ldrh	r2, [r2, #0]
 8006e32:	4911      	ldr	r1, [pc, #68]	@ (8006e78 <HAL_PCD_EP_DB_Receive+0x230>)
 8006e34:	430a      	orrs	r2, r1
 8006e36:	b292      	uxth	r2, r2
 8006e38:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8006e3a:	241a      	movs	r4, #26
 8006e3c:	193b      	adds	r3, r7, r4
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d009      	beq.n	8006e58 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6818      	ldr	r0, [r3, #0]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	6959      	ldr	r1, [r3, #20]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	895a      	ldrh	r2, [r3, #10]
 8006e50:	193b      	adds	r3, r7, r4
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	f004 f849 	bl	800aeea <USB_ReadPMA>
    }
  }

  return count;
 8006e58:	231a      	movs	r3, #26
 8006e5a:	18fb      	adds	r3, r7, r3
 8006e5c:	881b      	ldrh	r3, [r3, #0]
}
 8006e5e:	0018      	movs	r0, r3
 8006e60:	46bd      	mov	sp, r7
 8006e62:	b009      	add	sp, #36	@ 0x24
 8006e64:	bd90      	pop	{r4, r7, pc}
 8006e66:	46c0      	nop			@ (mov r8, r8)
 8006e68:	00000402 	.word	0x00000402
 8006e6c:	ffffbf8f 	.word	0xffffbf8f
 8006e70:	ffff8080 	.word	0xffff8080
 8006e74:	ffff8f8f 	.word	0xffff8f8f
 8006e78:	ffff80c0 	.word	0xffff80c0
 8006e7c:	00000406 	.word	0x00000406

08006e80 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b0a4      	sub	sp, #144	@ 0x90
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	1dbb      	adds	r3, r7, #6
 8006e8c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006e8e:	1dbb      	adds	r3, r7, #6
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	2240      	movs	r2, #64	@ 0x40
 8006e94:	4013      	ands	r3, r2
 8006e96:	d100      	bne.n	8006e9a <HAL_PCD_EP_DB_Transmit+0x1a>
 8006e98:	e1e4      	b.n	8007264 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2250      	movs	r2, #80	@ 0x50
 8006ea0:	5a9b      	ldrh	r3, [r3, r2]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	001a      	movs	r2, r3
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	00db      	lsls	r3, r3, #3
 8006eac:	18d2      	adds	r2, r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	18d3      	adds	r3, r2, r3
 8006eb4:	4ad0      	ldr	r2, [pc, #832]	@ (80071f8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8006eb6:	4694      	mov	ip, r2
 8006eb8:	4463      	add	r3, ip
 8006eba:	881a      	ldrh	r2, [r3, #0]
 8006ebc:	2186      	movs	r1, #134	@ 0x86
 8006ebe:	187b      	adds	r3, r7, r1
 8006ec0:	0592      	lsls	r2, r2, #22
 8006ec2:	0d92      	lsrs	r2, r2, #22
 8006ec4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	699a      	ldr	r2, [r3, #24]
 8006eca:	187b      	adds	r3, r7, r1
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d907      	bls.n	8006ee2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	699a      	ldr	r2, [r3, #24]
 8006ed6:	187b      	adds	r3, r7, r1
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	1ad2      	subs	r2, r2, r3
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	619a      	str	r2, [r3, #24]
 8006ee0:	e002      	b.n	8006ee8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d000      	beq.n	8006ef2 <HAL_PCD_EP_DB_Transmit+0x72>
 8006ef0:	e0b5      	b.n	800705e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	785b      	ldrb	r3, [r3, #1]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d125      	bne.n	8006f46 <HAL_PCD_EP_DB_Transmit+0xc6>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2250      	movs	r2, #80	@ 0x50
 8006f06:	5a9b      	ldrh	r3, [r3, r2]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	001a      	movs	r2, r3
 8006f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0e:	189b      	adds	r3, r3, r2
 8006f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	00da      	lsls	r2, r3, #3
 8006f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f1a:	18d3      	adds	r3, r2, r3
 8006f1c:	4ab6      	ldr	r2, [pc, #728]	@ (80071f8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8006f1e:	4694      	mov	ip, r2
 8006f20:	4463      	add	r3, ip
 8006f22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	059b      	lsls	r3, r3, #22
 8006f2c:	0d9b      	lsrs	r3, r3, #22
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f32:	801a      	strh	r2, [r3, #0]
 8006f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	4ab0      	ldr	r2, [pc, #704]	@ (80071fc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f42:	801a      	strh	r2, [r3, #0]
 8006f44:	e01b      	b.n	8006f7e <HAL_PCD_EP_DB_Transmit+0xfe>
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	785b      	ldrb	r3, [r3, #1]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d117      	bne.n	8006f7e <HAL_PCD_EP_DB_Transmit+0xfe>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2250      	movs	r2, #80	@ 0x50
 8006f5a:	5a9b      	ldrh	r3, [r3, r2]
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	001a      	movs	r2, r3
 8006f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f62:	189b      	adds	r3, r3, r2
 8006f64:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	00da      	lsls	r2, r3, #3
 8006f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f6e:	18d3      	adds	r3, r2, r3
 8006f70:	4aa1      	ldr	r2, [pc, #644]	@ (80071f8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8006f72:	4694      	mov	ip, r2
 8006f74:	4463      	add	r3, ip
 8006f76:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	785b      	ldrb	r3, [r3, #1]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d125      	bne.n	8006fd8 <HAL_PCD_EP_DB_Transmit+0x158>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	61fb      	str	r3, [r7, #28]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2250      	movs	r2, #80	@ 0x50
 8006f98:	5a9b      	ldrh	r3, [r3, r2]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	001a      	movs	r2, r3
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	189b      	adds	r3, r3, r2
 8006fa2:	61fb      	str	r3, [r7, #28]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	00da      	lsls	r2, r3, #3
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	18d3      	adds	r3, r2, r3
 8006fae:	4a94      	ldr	r2, [pc, #592]	@ (8007200 <HAL_PCD_EP_DB_Transmit+0x380>)
 8006fb0:	4694      	mov	ip, r2
 8006fb2:	4463      	add	r3, ip
 8006fb4:	61bb      	str	r3, [r7, #24]
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	059b      	lsls	r3, r3, #22
 8006fbe:	0d9b      	lsrs	r3, r3, #22
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	801a      	strh	r2, [r3, #0]
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	881b      	ldrh	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	4a8b      	ldr	r2, [pc, #556]	@ (80071fc <HAL_PCD_EP_DB_Transmit+0x37c>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	801a      	strh	r2, [r3, #0]
 8006fd6:	e018      	b.n	800700a <HAL_PCD_EP_DB_Transmit+0x18a>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	785b      	ldrb	r3, [r3, #1]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d114      	bne.n	800700a <HAL_PCD_EP_DB_Transmit+0x18a>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2250      	movs	r2, #80	@ 0x50
 8006fe6:	5a9b      	ldrh	r3, [r3, r2]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	001a      	movs	r2, r3
 8006fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fee:	189b      	adds	r3, r3, r2
 8006ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	00da      	lsls	r2, r3, #3
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffa:	18d3      	adds	r3, r2, r3
 8006ffc:	4a80      	ldr	r2, [pc, #512]	@ (8007200 <HAL_PCD_EP_DB_Transmit+0x380>)
 8006ffe:	4694      	mov	ip, r2
 8007000:	4463      	add	r3, ip
 8007002:	623b      	str	r3, [r7, #32]
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	2200      	movs	r2, #0
 8007008:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	781a      	ldrb	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	0011      	movs	r1, r2
 8007012:	0018      	movs	r0, r3
 8007014:	f005 ff56 	bl	800cec4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007018:	1dbb      	adds	r3, r7, #6
 800701a:	881a      	ldrh	r2, [r3, #0]
 800701c:	2380      	movs	r3, #128	@ 0x80
 800701e:	01db      	lsls	r3, r3, #7
 8007020:	4013      	ands	r3, r2
 8007022:	d100      	bne.n	8007026 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8007024:	e309      	b.n	800763a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	001a      	movs	r2, r3
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	18d3      	adds	r3, r2, r3
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	b29a      	uxth	r2, r3
 8007038:	2016      	movs	r0, #22
 800703a:	183b      	adds	r3, r7, r0
 800703c:	4971      	ldr	r1, [pc, #452]	@ (8007204 <HAL_PCD_EP_DB_Transmit+0x384>)
 800703e:	400a      	ands	r2, r1
 8007040:	801a      	strh	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	001a      	movs	r2, r3
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	18d3      	adds	r3, r2, r3
 8007050:	183a      	adds	r2, r7, r0
 8007052:	8812      	ldrh	r2, [r2, #0]
 8007054:	496c      	ldr	r1, [pc, #432]	@ (8007208 <HAL_PCD_EP_DB_Transmit+0x388>)
 8007056:	430a      	orrs	r2, r1
 8007058:	b292      	uxth	r2, r2
 800705a:	801a      	strh	r2, [r3, #0]
 800705c:	e2ed      	b.n	800763a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800705e:	1dbb      	adds	r3, r7, #6
 8007060:	881a      	ldrh	r2, [r3, #0]
 8007062:	2380      	movs	r3, #128	@ 0x80
 8007064:	01db      	lsls	r3, r3, #7
 8007066:	4013      	ands	r3, r2
 8007068:	d01a      	beq.n	80070a0 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	001a      	movs	r2, r3
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	18d3      	adds	r3, r2, r3
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	b29a      	uxth	r2, r3
 800707c:	208a      	movs	r0, #138	@ 0x8a
 800707e:	183b      	adds	r3, r7, r0
 8007080:	4960      	ldr	r1, [pc, #384]	@ (8007204 <HAL_PCD_EP_DB_Transmit+0x384>)
 8007082:	400a      	ands	r2, r1
 8007084:	801a      	strh	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	001a      	movs	r2, r3
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	18d3      	adds	r3, r2, r3
 8007094:	183a      	adds	r2, r7, r0
 8007096:	8812      	ldrh	r2, [r2, #0]
 8007098:	495b      	ldr	r1, [pc, #364]	@ (8007208 <HAL_PCD_EP_DB_Transmit+0x388>)
 800709a:	430a      	orrs	r2, r1
 800709c:	b292      	uxth	r2, r2
 800709e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2224      	movs	r2, #36	@ 0x24
 80070a4:	5c9b      	ldrb	r3, [r3, r2]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d000      	beq.n	80070ac <HAL_PCD_EP_DB_Transmit+0x22c>
 80070aa:	e2c6      	b.n	800763a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	695a      	ldr	r2, [r3, #20]
 80070b0:	2186      	movs	r1, #134	@ 0x86
 80070b2:	187b      	adds	r3, r7, r1
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	18d2      	adds	r2, r2, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	69da      	ldr	r2, [r3, #28]
 80070c0:	187b      	adds	r3, r7, r1
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	18d2      	adds	r2, r2, r3
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	6a1a      	ldr	r2, [r3, #32]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d30c      	bcc.n	80070f0 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	218c      	movs	r1, #140	@ 0x8c
 80070dc:	187a      	adds	r2, r7, r1
 80070de:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	6a1a      	ldr	r2, [r3, #32]
 80070e4:	187b      	adds	r3, r7, r1
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	1ad2      	subs	r2, r2, r3
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	621a      	str	r2, [r3, #32]
 80070ee:	e01a      	b.n	8007126 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10a      	bne.n	800710e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80070f8:	2386      	movs	r3, #134	@ 0x86
 80070fa:	18fb      	adds	r3, r7, r3
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	228c      	movs	r2, #140	@ 0x8c
 8007100:	18ba      	adds	r2, r7, r2
 8007102:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2224      	movs	r2, #36	@ 0x24
 8007108:	2100      	movs	r1, #0
 800710a:	5499      	strb	r1, [r3, r2]
 800710c:	e00b      	b.n	8007126 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2224      	movs	r2, #36	@ 0x24
 8007112:	2100      	movs	r1, #0
 8007114:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	228c      	movs	r2, #140	@ 0x8c
 800711c:	18ba      	adds	r2, r7, r2
 800711e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2200      	movs	r2, #0
 8007124:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	785b      	ldrb	r3, [r3, #1]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d000      	beq.n	8007130 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800712e:	e06d      	b.n	800720c <HAL_PCD_EP_DB_Transmit+0x38c>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2250      	movs	r2, #80	@ 0x50
 800713c:	5a9b      	ldrh	r3, [r3, r2]
 800713e:	b29b      	uxth	r3, r3
 8007140:	001a      	movs	r2, r3
 8007142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007144:	189b      	adds	r3, r3, r2
 8007146:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	00da      	lsls	r2, r3, #3
 800714e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007150:	18d3      	adds	r3, r2, r3
 8007152:	4a29      	ldr	r2, [pc, #164]	@ (80071f8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8007154:	4694      	mov	ip, r2
 8007156:	4463      	add	r3, ip
 8007158:	63bb      	str	r3, [r7, #56]	@ 0x38
 800715a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	b29b      	uxth	r3, r3
 8007160:	059b      	lsls	r3, r3, #22
 8007162:	0d9b      	lsrs	r3, r3, #22
 8007164:	b29a      	uxth	r2, r3
 8007166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007168:	801a      	strh	r2, [r3, #0]
 800716a:	228c      	movs	r2, #140	@ 0x8c
 800716c:	18bb      	adds	r3, r7, r2
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b3e      	cmp	r3, #62	@ 0x3e
 8007172:	d91a      	bls.n	80071aa <HAL_PCD_EP_DB_Transmit+0x32a>
 8007174:	18bb      	adds	r3, r7, r2
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	095b      	lsrs	r3, r3, #5
 800717a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800717c:	18bb      	adds	r3, r7, r2
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	221f      	movs	r2, #31
 8007182:	4013      	ands	r3, r2
 8007184:	d102      	bne.n	800718c <HAL_PCD_EP_DB_Transmit+0x30c>
 8007186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007188:	3b01      	subs	r3, #1
 800718a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800718c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	b29a      	uxth	r2, r3
 8007192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007194:	b29b      	uxth	r3, r3
 8007196:	029b      	lsls	r3, r3, #10
 8007198:	b29b      	uxth	r3, r3
 800719a:	4313      	orrs	r3, r2
 800719c:	b29b      	uxth	r3, r3
 800719e:	4a17      	ldr	r2, [pc, #92]	@ (80071fc <HAL_PCD_EP_DB_Transmit+0x37c>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a6:	801a      	strh	r2, [r3, #0]
 80071a8:	e04f      	b.n	800724a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80071aa:	238c      	movs	r3, #140	@ 0x8c
 80071ac:	18fb      	adds	r3, r7, r3
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d108      	bne.n	80071c6 <HAL_PCD_EP_DB_Transmit+0x346>
 80071b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	4a10      	ldr	r2, [pc, #64]	@ (80071fc <HAL_PCD_EP_DB_Transmit+0x37c>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	b29a      	uxth	r2, r3
 80071c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c2:	801a      	strh	r2, [r3, #0]
 80071c4:	e041      	b.n	800724a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80071c6:	228c      	movs	r2, #140	@ 0x8c
 80071c8:	18bb      	adds	r3, r7, r2
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	085b      	lsrs	r3, r3, #1
 80071ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071d0:	18bb      	adds	r3, r7, r2
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2201      	movs	r2, #1
 80071d6:	4013      	ands	r3, r2
 80071d8:	d002      	beq.n	80071e0 <HAL_PCD_EP_DB_Transmit+0x360>
 80071da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071dc:	3301      	adds	r3, #1
 80071de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	029b      	lsls	r3, r3, #10
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	4313      	orrs	r3, r2
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f4:	801a      	strh	r2, [r3, #0]
 80071f6:	e028      	b.n	800724a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80071f8:	00000402 	.word	0x00000402
 80071fc:	ffff8000 	.word	0xffff8000
 8007200:	00000406 	.word	0x00000406
 8007204:	ffff8f8f 	.word	0xffff8f8f
 8007208:	ffffc080 	.word	0xffffc080
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	785b      	ldrb	r3, [r3, #1]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d11a      	bne.n	800724a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	647b      	str	r3, [r7, #68]	@ 0x44
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2250      	movs	r2, #80	@ 0x50
 8007220:	5a9b      	ldrh	r3, [r3, r2]
 8007222:	b29b      	uxth	r3, r3
 8007224:	001a      	movs	r2, r3
 8007226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007228:	189b      	adds	r3, r3, r2
 800722a:	647b      	str	r3, [r7, #68]	@ 0x44
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	00da      	lsls	r2, r3, #3
 8007232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007234:	18d3      	adds	r3, r2, r3
 8007236:	4adb      	ldr	r2, [pc, #876]	@ (80075a4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8007238:	4694      	mov	ip, r2
 800723a:	4463      	add	r3, ip
 800723c:	643b      	str	r3, [r7, #64]	@ 0x40
 800723e:	238c      	movs	r3, #140	@ 0x8c
 8007240:	18fb      	adds	r3, r7, r3
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	b29a      	uxth	r2, r3
 8007246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007248:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6818      	ldr	r0, [r3, #0]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	6959      	ldr	r1, [r3, #20]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	891a      	ldrh	r2, [r3, #8]
 8007256:	238c      	movs	r3, #140	@ 0x8c
 8007258:	18fb      	adds	r3, r7, r3
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	b29b      	uxth	r3, r3
 800725e:	f003 fdfb 	bl	800ae58 <USB_WritePMA>
 8007262:	e1ea      	b.n	800763a <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2250      	movs	r2, #80	@ 0x50
 800726a:	5a9b      	ldrh	r3, [r3, r2]
 800726c:	b29b      	uxth	r3, r3
 800726e:	001a      	movs	r2, r3
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	00db      	lsls	r3, r3, #3
 8007276:	18d2      	adds	r2, r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	18d3      	adds	r3, r2, r3
 800727e:	4aca      	ldr	r2, [pc, #808]	@ (80075a8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8007280:	4694      	mov	ip, r2
 8007282:	4463      	add	r3, ip
 8007284:	881a      	ldrh	r2, [r3, #0]
 8007286:	2186      	movs	r1, #134	@ 0x86
 8007288:	187b      	adds	r3, r7, r1
 800728a:	0592      	lsls	r2, r2, #22
 800728c:	0d92      	lsrs	r2, r2, #22
 800728e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	699a      	ldr	r2, [r3, #24]
 8007294:	187b      	adds	r3, r7, r1
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d307      	bcc.n	80072ac <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	699a      	ldr	r2, [r3, #24]
 80072a0:	187b      	adds	r3, r7, r1
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	1ad2      	subs	r2, r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	619a      	str	r2, [r3, #24]
 80072aa:	e002      	b.n	80072b2 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2200      	movs	r2, #0
 80072b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d000      	beq.n	80072bc <HAL_PCD_EP_DB_Transmit+0x43c>
 80072ba:	e0bb      	b.n	8007434 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	785b      	ldrb	r3, [r3, #1]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d125      	bne.n	8007310 <HAL_PCD_EP_DB_Transmit+0x490>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2250      	movs	r2, #80	@ 0x50
 80072d0:	5a9b      	ldrh	r3, [r3, r2]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	001a      	movs	r2, r3
 80072d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80072d8:	189b      	adds	r3, r3, r2
 80072da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	00da      	lsls	r2, r3, #3
 80072e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80072e4:	18d3      	adds	r3, r2, r3
 80072e6:	4aaf      	ldr	r2, [pc, #700]	@ (80075a4 <HAL_PCD_EP_DB_Transmit+0x724>)
 80072e8:	4694      	mov	ip, r2
 80072ea:	4463      	add	r3, ip
 80072ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80072ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	059b      	lsls	r3, r3, #22
 80072f6:	0d9b      	lsrs	r3, r3, #22
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072fc:	801a      	strh	r2, [r3, #0]
 80072fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	b29b      	uxth	r3, r3
 8007304:	4aa9      	ldr	r2, [pc, #676]	@ (80075ac <HAL_PCD_EP_DB_Transmit+0x72c>)
 8007306:	4313      	orrs	r3, r2
 8007308:	b29a      	uxth	r2, r3
 800730a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800730c:	801a      	strh	r2, [r3, #0]
 800730e:	e01b      	b.n	8007348 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	785b      	ldrb	r3, [r3, #1]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d117      	bne.n	8007348 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	667b      	str	r3, [r7, #100]	@ 0x64
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2250      	movs	r2, #80	@ 0x50
 8007324:	5a9b      	ldrh	r3, [r3, r2]
 8007326:	b29b      	uxth	r3, r3
 8007328:	001a      	movs	r2, r3
 800732a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800732c:	189b      	adds	r3, r3, r2
 800732e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	00da      	lsls	r2, r3, #3
 8007336:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007338:	18d3      	adds	r3, r2, r3
 800733a:	4a9a      	ldr	r2, [pc, #616]	@ (80075a4 <HAL_PCD_EP_DB_Transmit+0x724>)
 800733c:	4694      	mov	ip, r2
 800733e:	4463      	add	r3, ip
 8007340:	663b      	str	r3, [r7, #96]	@ 0x60
 8007342:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007344:	2200      	movs	r2, #0
 8007346:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	677b      	str	r3, [r7, #116]	@ 0x74
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	785b      	ldrb	r3, [r3, #1]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d12b      	bne.n	80073ae <HAL_PCD_EP_DB_Transmit+0x52e>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2250      	movs	r2, #80	@ 0x50
 8007362:	5a9b      	ldrh	r3, [r3, r2]
 8007364:	b29b      	uxth	r3, r3
 8007366:	001a      	movs	r2, r3
 8007368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800736a:	189b      	adds	r3, r3, r2
 800736c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	00da      	lsls	r2, r3, #3
 8007374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007376:	18d3      	adds	r3, r2, r3
 8007378:	4a8b      	ldr	r2, [pc, #556]	@ (80075a8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800737a:	4694      	mov	ip, r2
 800737c:	4463      	add	r3, ip
 800737e:	2180      	movs	r1, #128	@ 0x80
 8007380:	187a      	adds	r2, r7, r1
 8007382:	6013      	str	r3, [r2, #0]
 8007384:	187b      	adds	r3, r7, r1
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	059b      	lsls	r3, r3, #22
 800738e:	0d9b      	lsrs	r3, r3, #22
 8007390:	b29a      	uxth	r2, r3
 8007392:	187b      	adds	r3, r7, r1
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	801a      	strh	r2, [r3, #0]
 8007398:	187b      	adds	r3, r7, r1
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	4a82      	ldr	r2, [pc, #520]	@ (80075ac <HAL_PCD_EP_DB_Transmit+0x72c>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	187b      	adds	r3, r7, r1
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	801a      	strh	r2, [r3, #0]
 80073ac:	e018      	b.n	80073e0 <HAL_PCD_EP_DB_Transmit+0x560>
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	785b      	ldrb	r3, [r3, #1]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d114      	bne.n	80073e0 <HAL_PCD_EP_DB_Transmit+0x560>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2250      	movs	r2, #80	@ 0x50
 80073bc:	5a9b      	ldrh	r3, [r3, r2]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	001a      	movs	r2, r3
 80073c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073c4:	189b      	adds	r3, r3, r2
 80073c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	00da      	lsls	r2, r3, #3
 80073ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073d0:	18d3      	adds	r3, r2, r3
 80073d2:	4a75      	ldr	r2, [pc, #468]	@ (80075a8 <HAL_PCD_EP_DB_Transmit+0x728>)
 80073d4:	4694      	mov	ip, r2
 80073d6:	4463      	add	r3, ip
 80073d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80073da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073dc:	2200      	movs	r2, #0
 80073de:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	781a      	ldrb	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	0011      	movs	r1, r2
 80073e8:	0018      	movs	r0, r3
 80073ea:	f005 fd6b 	bl	800cec4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80073ee:	1dbb      	adds	r3, r7, #6
 80073f0:	881a      	ldrh	r2, [r3, #0]
 80073f2:	2380      	movs	r3, #128	@ 0x80
 80073f4:	01db      	lsls	r3, r3, #7
 80073f6:	4013      	ands	r3, r2
 80073f8:	d000      	beq.n	80073fc <HAL_PCD_EP_DB_Transmit+0x57c>
 80073fa:	e11e      	b.n	800763a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	001a      	movs	r2, r3
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	18d3      	adds	r3, r2, r3
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	b29a      	uxth	r2, r3
 800740e:	2088      	movs	r0, #136	@ 0x88
 8007410:	183b      	adds	r3, r7, r0
 8007412:	4967      	ldr	r1, [pc, #412]	@ (80075b0 <HAL_PCD_EP_DB_Transmit+0x730>)
 8007414:	400a      	ands	r2, r1
 8007416:	801a      	strh	r2, [r3, #0]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	001a      	movs	r2, r3
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	18d3      	adds	r3, r2, r3
 8007426:	183a      	adds	r2, r7, r0
 8007428:	8812      	ldrh	r2, [r2, #0]
 800742a:	4962      	ldr	r1, [pc, #392]	@ (80075b4 <HAL_PCD_EP_DB_Transmit+0x734>)
 800742c:	430a      	orrs	r2, r1
 800742e:	b292      	uxth	r2, r2
 8007430:	801a      	strh	r2, [r3, #0]
 8007432:	e102      	b.n	800763a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007434:	1dbb      	adds	r3, r7, #6
 8007436:	881a      	ldrh	r2, [r3, #0]
 8007438:	2380      	movs	r3, #128	@ 0x80
 800743a:	01db      	lsls	r3, r3, #7
 800743c:	4013      	ands	r3, r2
 800743e:	d11a      	bne.n	8007476 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	001a      	movs	r2, r3
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	18d3      	adds	r3, r2, r3
 800744e:	881b      	ldrh	r3, [r3, #0]
 8007450:	b29a      	uxth	r2, r3
 8007452:	204e      	movs	r0, #78	@ 0x4e
 8007454:	183b      	adds	r3, r7, r0
 8007456:	4956      	ldr	r1, [pc, #344]	@ (80075b0 <HAL_PCD_EP_DB_Transmit+0x730>)
 8007458:	400a      	ands	r2, r1
 800745a:	801a      	strh	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	001a      	movs	r2, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	18d3      	adds	r3, r2, r3
 800746a:	183a      	adds	r2, r7, r0
 800746c:	8812      	ldrh	r2, [r2, #0]
 800746e:	4951      	ldr	r1, [pc, #324]	@ (80075b4 <HAL_PCD_EP_DB_Transmit+0x734>)
 8007470:	430a      	orrs	r2, r1
 8007472:	b292      	uxth	r2, r2
 8007474:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2224      	movs	r2, #36	@ 0x24
 800747a:	5c9b      	ldrb	r3, [r3, r2]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d000      	beq.n	8007482 <HAL_PCD_EP_DB_Transmit+0x602>
 8007480:	e0db      	b.n	800763a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	695a      	ldr	r2, [r3, #20]
 8007486:	2186      	movs	r1, #134	@ 0x86
 8007488:	187b      	adds	r3, r7, r1
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	18d2      	adds	r2, r2, r3
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	69da      	ldr	r2, [r3, #28]
 8007496:	187b      	adds	r3, r7, r1
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	18d2      	adds	r2, r2, r3
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	6a1a      	ldr	r2, [r3, #32]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d30c      	bcc.n	80074c6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	218c      	movs	r1, #140	@ 0x8c
 80074b2:	187a      	adds	r2, r7, r1
 80074b4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	6a1a      	ldr	r2, [r3, #32]
 80074ba:	187b      	adds	r3, r7, r1
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	1ad2      	subs	r2, r2, r3
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	621a      	str	r2, [r3, #32]
 80074c4:	e01a      	b.n	80074fc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80074ce:	2386      	movs	r3, #134	@ 0x86
 80074d0:	18fb      	adds	r3, r7, r3
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	228c      	movs	r2, #140	@ 0x8c
 80074d6:	18ba      	adds	r2, r7, r2
 80074d8:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2224      	movs	r2, #36	@ 0x24
 80074de:	2100      	movs	r1, #0
 80074e0:	5499      	strb	r1, [r3, r2]
 80074e2:	e00b      	b.n	80074fc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	6a1b      	ldr	r3, [r3, #32]
 80074e8:	228c      	movs	r2, #140	@ 0x8c
 80074ea:	18ba      	adds	r2, r7, r2
 80074ec:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2200      	movs	r2, #0
 80074f2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2224      	movs	r2, #36	@ 0x24
 80074f8:	2100      	movs	r1, #0
 80074fa:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	657b      	str	r3, [r7, #84]	@ 0x54
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	785b      	ldrb	r3, [r3, #1]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d000      	beq.n	800750c <HAL_PCD_EP_DB_Transmit+0x68c>
 800750a:	e06e      	b.n	80075ea <HAL_PCD_EP_DB_Transmit+0x76a>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2250      	movs	r2, #80	@ 0x50
 8007518:	5a9b      	ldrh	r3, [r3, r2]
 800751a:	b29b      	uxth	r3, r3
 800751c:	001a      	movs	r2, r3
 800751e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007520:	189b      	adds	r3, r3, r2
 8007522:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	00da      	lsls	r2, r3, #3
 800752a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800752c:	18d3      	adds	r3, r2, r3
 800752e:	4a1e      	ldr	r2, [pc, #120]	@ (80075a8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8007530:	4694      	mov	ip, r2
 8007532:	4463      	add	r3, ip
 8007534:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007536:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	b29b      	uxth	r3, r3
 800753c:	059b      	lsls	r3, r3, #22
 800753e:	0d9b      	lsrs	r3, r3, #22
 8007540:	b29a      	uxth	r2, r3
 8007542:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007544:	801a      	strh	r2, [r3, #0]
 8007546:	228c      	movs	r2, #140	@ 0x8c
 8007548:	18bb      	adds	r3, r7, r2
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b3e      	cmp	r3, #62	@ 0x3e
 800754e:	d91a      	bls.n	8007586 <HAL_PCD_EP_DB_Transmit+0x706>
 8007550:	18bb      	adds	r3, r7, r2
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	095b      	lsrs	r3, r3, #5
 8007556:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007558:	18bb      	adds	r3, r7, r2
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	221f      	movs	r2, #31
 800755e:	4013      	ands	r3, r2
 8007560:	d102      	bne.n	8007568 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8007562:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007564:	3b01      	subs	r3, #1
 8007566:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007568:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800756a:	881b      	ldrh	r3, [r3, #0]
 800756c:	b29a      	uxth	r2, r3
 800756e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007570:	b29b      	uxth	r3, r3
 8007572:	029b      	lsls	r3, r3, #10
 8007574:	b29b      	uxth	r3, r3
 8007576:	4313      	orrs	r3, r2
 8007578:	b29b      	uxth	r3, r3
 800757a:	4a0c      	ldr	r2, [pc, #48]	@ (80075ac <HAL_PCD_EP_DB_Transmit+0x72c>)
 800757c:	4313      	orrs	r3, r2
 800757e:	b29a      	uxth	r2, r3
 8007580:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007582:	801a      	strh	r2, [r3, #0]
 8007584:	e04d      	b.n	8007622 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8007586:	238c      	movs	r3, #140	@ 0x8c
 8007588:	18fb      	adds	r3, r7, r3
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d113      	bne.n	80075b8 <HAL_PCD_EP_DB_Transmit+0x738>
 8007590:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	b29b      	uxth	r3, r3
 8007596:	4a05      	ldr	r2, [pc, #20]	@ (80075ac <HAL_PCD_EP_DB_Transmit+0x72c>)
 8007598:	4313      	orrs	r3, r2
 800759a:	b29a      	uxth	r2, r3
 800759c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800759e:	801a      	strh	r2, [r3, #0]
 80075a0:	e03f      	b.n	8007622 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80075a2:	46c0      	nop			@ (mov r8, r8)
 80075a4:	00000402 	.word	0x00000402
 80075a8:	00000406 	.word	0x00000406
 80075ac:	ffff8000 	.word	0xffff8000
 80075b0:	ffff8f8f 	.word	0xffff8f8f
 80075b4:	ffffc080 	.word	0xffffc080
 80075b8:	228c      	movs	r2, #140	@ 0x8c
 80075ba:	18bb      	adds	r3, r7, r2
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	085b      	lsrs	r3, r3, #1
 80075c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075c2:	18bb      	adds	r3, r7, r2
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2201      	movs	r2, #1
 80075c8:	4013      	ands	r3, r2
 80075ca:	d002      	beq.n	80075d2 <HAL_PCD_EP_DB_Transmit+0x752>
 80075cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075ce:	3301      	adds	r3, #1
 80075d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075d4:	881b      	ldrh	r3, [r3, #0]
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075da:	b29b      	uxth	r3, r3
 80075dc:	029b      	lsls	r3, r3, #10
 80075de:	b29b      	uxth	r3, r3
 80075e0:	4313      	orrs	r3, r2
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075e6:	801a      	strh	r2, [r3, #0]
 80075e8:	e01b      	b.n	8007622 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	785b      	ldrb	r3, [r3, #1]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d117      	bne.n	8007622 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2250      	movs	r2, #80	@ 0x50
 80075f8:	5a9b      	ldrh	r3, [r3, r2]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	001a      	movs	r2, r3
 80075fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007600:	189b      	adds	r3, r3, r2
 8007602:	657b      	str	r3, [r7, #84]	@ 0x54
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	00da      	lsls	r2, r3, #3
 800760a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800760c:	18d3      	adds	r3, r2, r3
 800760e:	4a21      	ldr	r2, [pc, #132]	@ (8007694 <HAL_PCD_EP_DB_Transmit+0x814>)
 8007610:	4694      	mov	ip, r2
 8007612:	4463      	add	r3, ip
 8007614:	653b      	str	r3, [r7, #80]	@ 0x50
 8007616:	238c      	movs	r3, #140	@ 0x8c
 8007618:	18fb      	adds	r3, r7, r3
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	b29a      	uxth	r2, r3
 800761e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007620:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6818      	ldr	r0, [r3, #0]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	6959      	ldr	r1, [r3, #20]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	895a      	ldrh	r2, [r3, #10]
 800762e:	238c      	movs	r3, #140	@ 0x8c
 8007630:	18fb      	adds	r3, r7, r3
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	f003 fc0f 	bl	800ae58 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	001a      	movs	r2, r3
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	18d3      	adds	r3, r2, r3
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	b29a      	uxth	r2, r3
 800764c:	2014      	movs	r0, #20
 800764e:	183b      	adds	r3, r7, r0
 8007650:	4911      	ldr	r1, [pc, #68]	@ (8007698 <HAL_PCD_EP_DB_Transmit+0x818>)
 8007652:	400a      	ands	r2, r1
 8007654:	801a      	strh	r2, [r3, #0]
 8007656:	183b      	adds	r3, r7, r0
 8007658:	183a      	adds	r2, r7, r0
 800765a:	8812      	ldrh	r2, [r2, #0]
 800765c:	2110      	movs	r1, #16
 800765e:	404a      	eors	r2, r1
 8007660:	801a      	strh	r2, [r3, #0]
 8007662:	183b      	adds	r3, r7, r0
 8007664:	183a      	adds	r2, r7, r0
 8007666:	8812      	ldrh	r2, [r2, #0]
 8007668:	2120      	movs	r1, #32
 800766a:	404a      	eors	r2, r1
 800766c:	801a      	strh	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	001a      	movs	r2, r3
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	18d3      	adds	r3, r2, r3
 800767c:	183a      	adds	r2, r7, r0
 800767e:	8812      	ldrh	r2, [r2, #0]
 8007680:	4906      	ldr	r1, [pc, #24]	@ (800769c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8007682:	430a      	orrs	r2, r1
 8007684:	b292      	uxth	r2, r2
 8007686:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	0018      	movs	r0, r3
 800768c:	46bd      	mov	sp, r7
 800768e:	b024      	add	sp, #144	@ 0x90
 8007690:	bd80      	pop	{r7, pc}
 8007692:	46c0      	nop			@ (mov r8, r8)
 8007694:	00000406 	.word	0x00000406
 8007698:	ffff8fbf 	.word	0xffff8fbf
 800769c:	ffff8080 	.word	0xffff8080

080076a0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80076a0:	b590      	push	{r4, r7, lr}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	0008      	movs	r0, r1
 80076aa:	0011      	movs	r1, r2
 80076ac:	607b      	str	r3, [r7, #4]
 80076ae:	240a      	movs	r4, #10
 80076b0:	193b      	adds	r3, r7, r4
 80076b2:	1c02      	adds	r2, r0, #0
 80076b4:	801a      	strh	r2, [r3, #0]
 80076b6:	2308      	movs	r3, #8
 80076b8:	18fb      	adds	r3, r7, r3
 80076ba:	1c0a      	adds	r2, r1, #0
 80076bc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80076be:	0021      	movs	r1, r4
 80076c0:	187b      	adds	r3, r7, r1
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	2280      	movs	r2, #128	@ 0x80
 80076c6:	4013      	ands	r3, r2
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00c      	beq.n	80076e8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076ce:	187b      	adds	r3, r7, r1
 80076d0:	881b      	ldrh	r3, [r3, #0]
 80076d2:	2207      	movs	r2, #7
 80076d4:	4013      	ands	r3, r2
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	0013      	movs	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	189b      	adds	r3, r3, r2
 80076de:	00db      	lsls	r3, r3, #3
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	18d3      	adds	r3, r2, r3
 80076e4:	617b      	str	r3, [r7, #20]
 80076e6:	e00b      	b.n	8007700 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80076e8:	230a      	movs	r3, #10
 80076ea:	18fb      	adds	r3, r7, r3
 80076ec:	881a      	ldrh	r2, [r3, #0]
 80076ee:	0013      	movs	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	189b      	adds	r3, r3, r2
 80076f4:	00db      	lsls	r3, r3, #3
 80076f6:	3369      	adds	r3, #105	@ 0x69
 80076f8:	33ff      	adds	r3, #255	@ 0xff
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	18d3      	adds	r3, r2, r3
 80076fe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007700:	2308      	movs	r3, #8
 8007702:	18fb      	adds	r3, r7, r3
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d107      	bne.n	800771a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2200      	movs	r2, #0
 800770e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	b29a      	uxth	r2, r3
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	80da      	strh	r2, [r3, #6]
 8007718:	e00b      	b.n	8007732 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2201      	movs	r2, #1
 800771e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	b29a      	uxth	r2, r3
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	0c1b      	lsrs	r3, r3, #16
 800772c:	b29a      	uxth	r2, r3
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	0018      	movs	r0, r3
 8007736:	46bd      	mov	sp, r7
 8007738:	b007      	add	sp, #28
 800773a:	bd90      	pop	{r4, r7, pc}

0800773c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	23ba      	movs	r3, #186	@ 0xba
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	2101      	movs	r1, #1
 8007752:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	23b8      	movs	r3, #184	@ 0xb8
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	2100      	movs	r1, #0
 800775c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2254      	movs	r2, #84	@ 0x54
 8007762:	5a9b      	ldrh	r3, [r3, r2]
 8007764:	b29b      	uxth	r3, r3
 8007766:	2201      	movs	r2, #1
 8007768:	4313      	orrs	r3, r2
 800776a:	b299      	uxth	r1, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2254      	movs	r2, #84	@ 0x54
 8007770:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2254      	movs	r2, #84	@ 0x54
 8007776:	5a9b      	ldrh	r3, [r3, r2]
 8007778:	b29b      	uxth	r3, r3
 800777a:	2202      	movs	r2, #2
 800777c:	4313      	orrs	r3, r2
 800777e:	b299      	uxth	r1, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2254      	movs	r2, #84	@ 0x54
 8007784:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	0018      	movs	r0, r3
 800778a:	46bd      	mov	sp, r7
 800778c:	b004      	add	sp, #16
 800778e:	bd80      	pop	{r7, pc}

08007790 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	000a      	movs	r2, r1
 800779a:	1cfb      	adds	r3, r7, #3
 800779c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800779e:	46c0      	nop			@ (mov r8, r8)
 80077a0:	46bd      	mov	sp, r7
 80077a2:	b002      	add	sp, #8
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077a8:	b5b0      	push	{r4, r5, r7, lr}
 80077aa:	b08a      	sub	sp, #40	@ 0x28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	f000 fbbf 	bl	8007f3a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077bc:	4bc9      	ldr	r3, [pc, #804]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	220c      	movs	r2, #12
 80077c2:	4013      	ands	r3, r2
 80077c4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077c6:	4bc7      	ldr	r3, [pc, #796]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	2380      	movs	r3, #128	@ 0x80
 80077cc:	025b      	lsls	r3, r3, #9
 80077ce:	4013      	ands	r3, r2
 80077d0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2201      	movs	r2, #1
 80077d8:	4013      	ands	r3, r2
 80077da:	d100      	bne.n	80077de <HAL_RCC_OscConfig+0x36>
 80077dc:	e07e      	b.n	80078dc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	2b08      	cmp	r3, #8
 80077e2:	d007      	beq.n	80077f4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	2b0c      	cmp	r3, #12
 80077e8:	d112      	bne.n	8007810 <HAL_RCC_OscConfig+0x68>
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	2380      	movs	r3, #128	@ 0x80
 80077ee:	025b      	lsls	r3, r3, #9
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d10d      	bne.n	8007810 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077f4:	4bbb      	ldr	r3, [pc, #748]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	2380      	movs	r3, #128	@ 0x80
 80077fa:	029b      	lsls	r3, r3, #10
 80077fc:	4013      	ands	r3, r2
 80077fe:	d100      	bne.n	8007802 <HAL_RCC_OscConfig+0x5a>
 8007800:	e06b      	b.n	80078da <HAL_RCC_OscConfig+0x132>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d167      	bne.n	80078da <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	f000 fb95 	bl	8007f3a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	2380      	movs	r3, #128	@ 0x80
 8007816:	025b      	lsls	r3, r3, #9
 8007818:	429a      	cmp	r2, r3
 800781a:	d107      	bne.n	800782c <HAL_RCC_OscConfig+0x84>
 800781c:	4bb1      	ldr	r3, [pc, #708]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	4bb0      	ldr	r3, [pc, #704]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007822:	2180      	movs	r1, #128	@ 0x80
 8007824:	0249      	lsls	r1, r1, #9
 8007826:	430a      	orrs	r2, r1
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	e027      	b.n	800787c <HAL_RCC_OscConfig+0xd4>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	23a0      	movs	r3, #160	@ 0xa0
 8007832:	02db      	lsls	r3, r3, #11
 8007834:	429a      	cmp	r2, r3
 8007836:	d10e      	bne.n	8007856 <HAL_RCC_OscConfig+0xae>
 8007838:	4baa      	ldr	r3, [pc, #680]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	4ba9      	ldr	r3, [pc, #676]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 800783e:	2180      	movs	r1, #128	@ 0x80
 8007840:	02c9      	lsls	r1, r1, #11
 8007842:	430a      	orrs	r2, r1
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	4ba7      	ldr	r3, [pc, #668]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	4ba6      	ldr	r3, [pc, #664]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 800784c:	2180      	movs	r1, #128	@ 0x80
 800784e:	0249      	lsls	r1, r1, #9
 8007850:	430a      	orrs	r2, r1
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	e012      	b.n	800787c <HAL_RCC_OscConfig+0xd4>
 8007856:	4ba3      	ldr	r3, [pc, #652]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	4ba2      	ldr	r3, [pc, #648]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 800785c:	49a2      	ldr	r1, [pc, #648]	@ (8007ae8 <HAL_RCC_OscConfig+0x340>)
 800785e:	400a      	ands	r2, r1
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	4ba0      	ldr	r3, [pc, #640]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	2380      	movs	r3, #128	@ 0x80
 8007868:	025b      	lsls	r3, r3, #9
 800786a:	4013      	ands	r3, r2
 800786c:	60fb      	str	r3, [r7, #12]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4b9c      	ldr	r3, [pc, #624]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	4b9b      	ldr	r3, [pc, #620]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007876:	499d      	ldr	r1, [pc, #628]	@ (8007aec <HAL_RCC_OscConfig+0x344>)
 8007878:	400a      	ands	r2, r1
 800787a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d015      	beq.n	80078b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007884:	f7fd fe96 	bl	80055b4 <HAL_GetTick>
 8007888:	0003      	movs	r3, r0
 800788a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800788c:	e009      	b.n	80078a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800788e:	f7fd fe91 	bl	80055b4 <HAL_GetTick>
 8007892:	0002      	movs	r2, r0
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	2b64      	cmp	r3, #100	@ 0x64
 800789a:	d902      	bls.n	80078a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	f000 fb4c 	bl	8007f3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078a2:	4b90      	ldr	r3, [pc, #576]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	2380      	movs	r3, #128	@ 0x80
 80078a8:	029b      	lsls	r3, r3, #10
 80078aa:	4013      	ands	r3, r2
 80078ac:	d0ef      	beq.n	800788e <HAL_RCC_OscConfig+0xe6>
 80078ae:	e015      	b.n	80078dc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078b0:	f7fd fe80 	bl	80055b4 <HAL_GetTick>
 80078b4:	0003      	movs	r3, r0
 80078b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078b8:	e008      	b.n	80078cc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078ba:	f7fd fe7b 	bl	80055b4 <HAL_GetTick>
 80078be:	0002      	movs	r2, r0
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	2b64      	cmp	r3, #100	@ 0x64
 80078c6:	d901      	bls.n	80078cc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e336      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078cc:	4b85      	ldr	r3, [pc, #532]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	2380      	movs	r3, #128	@ 0x80
 80078d2:	029b      	lsls	r3, r3, #10
 80078d4:	4013      	ands	r3, r2
 80078d6:	d1f0      	bne.n	80078ba <HAL_RCC_OscConfig+0x112>
 80078d8:	e000      	b.n	80078dc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078da:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2202      	movs	r2, #2
 80078e2:	4013      	ands	r3, r2
 80078e4:	d100      	bne.n	80078e8 <HAL_RCC_OscConfig+0x140>
 80078e6:	e099      	b.n	8007a1c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80078ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f0:	2220      	movs	r2, #32
 80078f2:	4013      	ands	r3, r2
 80078f4:	d009      	beq.n	800790a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80078f6:	4b7b      	ldr	r3, [pc, #492]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	4b7a      	ldr	r3, [pc, #488]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 80078fc:	2120      	movs	r1, #32
 80078fe:	430a      	orrs	r2, r1
 8007900:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	2220      	movs	r2, #32
 8007906:	4393      	bics	r3, r2
 8007908:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	2b04      	cmp	r3, #4
 800790e:	d005      	beq.n	800791c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	2b0c      	cmp	r3, #12
 8007914:	d13e      	bne.n	8007994 <HAL_RCC_OscConfig+0x1ec>
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d13b      	bne.n	8007994 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800791c:	4b71      	ldr	r3, [pc, #452]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2204      	movs	r2, #4
 8007922:	4013      	ands	r3, r2
 8007924:	d004      	beq.n	8007930 <HAL_RCC_OscConfig+0x188>
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e304      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007930:	4b6c      	ldr	r3, [pc, #432]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	4a6e      	ldr	r2, [pc, #440]	@ (8007af0 <HAL_RCC_OscConfig+0x348>)
 8007936:	4013      	ands	r3, r2
 8007938:	0019      	movs	r1, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	021a      	lsls	r2, r3, #8
 8007940:	4b68      	ldr	r3, [pc, #416]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007942:	430a      	orrs	r2, r1
 8007944:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007946:	4b67      	ldr	r3, [pc, #412]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2209      	movs	r2, #9
 800794c:	4393      	bics	r3, r2
 800794e:	0019      	movs	r1, r3
 8007950:	4b64      	ldr	r3, [pc, #400]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007954:	430a      	orrs	r2, r1
 8007956:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007958:	f000 fc42 	bl	80081e0 <HAL_RCC_GetSysClockFreq>
 800795c:	0001      	movs	r1, r0
 800795e:	4b61      	ldr	r3, [pc, #388]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	091b      	lsrs	r3, r3, #4
 8007964:	220f      	movs	r2, #15
 8007966:	4013      	ands	r3, r2
 8007968:	4a62      	ldr	r2, [pc, #392]	@ (8007af4 <HAL_RCC_OscConfig+0x34c>)
 800796a:	5cd3      	ldrb	r3, [r2, r3]
 800796c:	000a      	movs	r2, r1
 800796e:	40da      	lsrs	r2, r3
 8007970:	4b61      	ldr	r3, [pc, #388]	@ (8007af8 <HAL_RCC_OscConfig+0x350>)
 8007972:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8007974:	4b61      	ldr	r3, [pc, #388]	@ (8007afc <HAL_RCC_OscConfig+0x354>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2513      	movs	r5, #19
 800797a:	197c      	adds	r4, r7, r5
 800797c:	0018      	movs	r0, r3
 800797e:	f7fd fdd3 	bl	8005528 <HAL_InitTick>
 8007982:	0003      	movs	r3, r0
 8007984:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8007986:	197b      	adds	r3, r7, r5
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d046      	beq.n	8007a1c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800798e:	197b      	adds	r3, r7, r5
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	e2d2      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8007994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007996:	2b00      	cmp	r3, #0
 8007998:	d027      	beq.n	80079ea <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800799a:	4b52      	ldr	r3, [pc, #328]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2209      	movs	r2, #9
 80079a0:	4393      	bics	r3, r2
 80079a2:	0019      	movs	r1, r3
 80079a4:	4b4f      	ldr	r3, [pc, #316]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 80079a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079a8:	430a      	orrs	r2, r1
 80079aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ac:	f7fd fe02 	bl	80055b4 <HAL_GetTick>
 80079b0:	0003      	movs	r3, r0
 80079b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079b4:	e008      	b.n	80079c8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079b6:	f7fd fdfd 	bl	80055b4 <HAL_GetTick>
 80079ba:	0002      	movs	r2, r0
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d901      	bls.n	80079c8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e2b8      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079c8:	4b46      	ldr	r3, [pc, #280]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2204      	movs	r2, #4
 80079ce:	4013      	ands	r3, r2
 80079d0:	d0f1      	beq.n	80079b6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079d2:	4b44      	ldr	r3, [pc, #272]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	4a46      	ldr	r2, [pc, #280]	@ (8007af0 <HAL_RCC_OscConfig+0x348>)
 80079d8:	4013      	ands	r3, r2
 80079da:	0019      	movs	r1, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	021a      	lsls	r2, r3, #8
 80079e2:	4b40      	ldr	r3, [pc, #256]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 80079e4:	430a      	orrs	r2, r1
 80079e6:	605a      	str	r2, [r3, #4]
 80079e8:	e018      	b.n	8007a1c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079ea:	4b3e      	ldr	r3, [pc, #248]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	4b3d      	ldr	r3, [pc, #244]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 80079f0:	2101      	movs	r1, #1
 80079f2:	438a      	bics	r2, r1
 80079f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079f6:	f7fd fddd 	bl	80055b4 <HAL_GetTick>
 80079fa:	0003      	movs	r3, r0
 80079fc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079fe:	e008      	b.n	8007a12 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a00:	f7fd fdd8 	bl	80055b4 <HAL_GetTick>
 8007a04:	0002      	movs	r2, r0
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e293      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a12:	4b34      	ldr	r3, [pc, #208]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2204      	movs	r2, #4
 8007a18:	4013      	ands	r3, r2
 8007a1a:	d1f1      	bne.n	8007a00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2210      	movs	r2, #16
 8007a22:	4013      	ands	r3, r2
 8007a24:	d100      	bne.n	8007a28 <HAL_RCC_OscConfig+0x280>
 8007a26:	e0a2      	b.n	8007b6e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d140      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	2380      	movs	r3, #128	@ 0x80
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4013      	ands	r3, r2
 8007a38:	d005      	beq.n	8007a46 <HAL_RCC_OscConfig+0x29e>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e279      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a46:	4b27      	ldr	r3, [pc, #156]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8007b00 <HAL_RCC_OscConfig+0x358>)
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	0019      	movs	r1, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a54:	4b23      	ldr	r3, [pc, #140]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007a56:	430a      	orrs	r2, r1
 8007a58:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a5a:	4b22      	ldr	r3, [pc, #136]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	021b      	lsls	r3, r3, #8
 8007a60:	0a19      	lsrs	r1, r3, #8
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	061a      	lsls	r2, r3, #24
 8007a68:	4b1e      	ldr	r3, [pc, #120]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a72:	0b5b      	lsrs	r3, r3, #13
 8007a74:	3301      	adds	r3, #1
 8007a76:	2280      	movs	r2, #128	@ 0x80
 8007a78:	0212      	lsls	r2, r2, #8
 8007a7a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007a7c:	4b19      	ldr	r3, [pc, #100]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	091b      	lsrs	r3, r3, #4
 8007a82:	210f      	movs	r1, #15
 8007a84:	400b      	ands	r3, r1
 8007a86:	491b      	ldr	r1, [pc, #108]	@ (8007af4 <HAL_RCC_OscConfig+0x34c>)
 8007a88:	5ccb      	ldrb	r3, [r1, r3]
 8007a8a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8007af8 <HAL_RCC_OscConfig+0x350>)
 8007a8e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8007a90:	4b1a      	ldr	r3, [pc, #104]	@ (8007afc <HAL_RCC_OscConfig+0x354>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2513      	movs	r5, #19
 8007a96:	197c      	adds	r4, r7, r5
 8007a98:	0018      	movs	r0, r3
 8007a9a:	f7fd fd45 	bl	8005528 <HAL_InitTick>
 8007a9e:	0003      	movs	r3, r0
 8007aa0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8007aa2:	197b      	adds	r3, r7, r5
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d061      	beq.n	8007b6e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8007aaa:	197b      	adds	r3, r7, r5
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	e244      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d040      	beq.n	8007b3a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	4b09      	ldr	r3, [pc, #36]	@ (8007ae4 <HAL_RCC_OscConfig+0x33c>)
 8007abe:	2180      	movs	r1, #128	@ 0x80
 8007ac0:	0049      	lsls	r1, r1, #1
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ac6:	f7fd fd75 	bl	80055b4 <HAL_GetTick>
 8007aca:	0003      	movs	r3, r0
 8007acc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007ace:	e019      	b.n	8007b04 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007ad0:	f7fd fd70 	bl	80055b4 <HAL_GetTick>
 8007ad4:	0002      	movs	r2, r0
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d912      	bls.n	8007b04 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e22b      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
 8007ae2:	46c0      	nop			@ (mov r8, r8)
 8007ae4:	40021000 	.word	0x40021000
 8007ae8:	fffeffff 	.word	0xfffeffff
 8007aec:	fffbffff 	.word	0xfffbffff
 8007af0:	ffffe0ff 	.word	0xffffe0ff
 8007af4:	0800e8c8 	.word	0x0800e8c8
 8007af8:	20000044 	.word	0x20000044
 8007afc:	20000048 	.word	0x20000048
 8007b00:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007b04:	4bca      	ldr	r3, [pc, #808]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	2380      	movs	r3, #128	@ 0x80
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	d0df      	beq.n	8007ad0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b10:	4bc7      	ldr	r3, [pc, #796]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	4ac7      	ldr	r2, [pc, #796]	@ (8007e34 <HAL_RCC_OscConfig+0x68c>)
 8007b16:	4013      	ands	r3, r2
 8007b18:	0019      	movs	r1, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b1e:	4bc4      	ldr	r3, [pc, #784]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007b20:	430a      	orrs	r2, r1
 8007b22:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b24:	4bc2      	ldr	r3, [pc, #776]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	021b      	lsls	r3, r3, #8
 8007b2a:	0a19      	lsrs	r1, r3, #8
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	061a      	lsls	r2, r3, #24
 8007b32:	4bbf      	ldr	r3, [pc, #764]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007b34:	430a      	orrs	r2, r1
 8007b36:	605a      	str	r2, [r3, #4]
 8007b38:	e019      	b.n	8007b6e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007b3a:	4bbd      	ldr	r3, [pc, #756]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	4bbc      	ldr	r3, [pc, #752]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007b40:	49bd      	ldr	r1, [pc, #756]	@ (8007e38 <HAL_RCC_OscConfig+0x690>)
 8007b42:	400a      	ands	r2, r1
 8007b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b46:	f7fd fd35 	bl	80055b4 <HAL_GetTick>
 8007b4a:	0003      	movs	r3, r0
 8007b4c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007b4e:	e008      	b.n	8007b62 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007b50:	f7fd fd30 	bl	80055b4 <HAL_GetTick>
 8007b54:	0002      	movs	r2, r0
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d901      	bls.n	8007b62 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e1eb      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007b62:	4bb3      	ldr	r3, [pc, #716]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	2380      	movs	r3, #128	@ 0x80
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	d1f0      	bne.n	8007b50 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2208      	movs	r2, #8
 8007b74:	4013      	ands	r3, r2
 8007b76:	d036      	beq.n	8007be6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d019      	beq.n	8007bb4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b80:	4bab      	ldr	r3, [pc, #684]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007b82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b84:	4baa      	ldr	r3, [pc, #680]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007b86:	2101      	movs	r1, #1
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b8c:	f7fd fd12 	bl	80055b4 <HAL_GetTick>
 8007b90:	0003      	movs	r3, r0
 8007b92:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b94:	e008      	b.n	8007ba8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b96:	f7fd fd0d 	bl	80055b4 <HAL_GetTick>
 8007b9a:	0002      	movs	r2, r0
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d901      	bls.n	8007ba8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e1c8      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ba8:	4ba1      	ldr	r3, [pc, #644]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bac:	2202      	movs	r2, #2
 8007bae:	4013      	ands	r3, r2
 8007bb0:	d0f1      	beq.n	8007b96 <HAL_RCC_OscConfig+0x3ee>
 8007bb2:	e018      	b.n	8007be6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bb4:	4b9e      	ldr	r3, [pc, #632]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007bb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007bb8:	4b9d      	ldr	r3, [pc, #628]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007bba:	2101      	movs	r1, #1
 8007bbc:	438a      	bics	r2, r1
 8007bbe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bc0:	f7fd fcf8 	bl	80055b4 <HAL_GetTick>
 8007bc4:	0003      	movs	r3, r0
 8007bc6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007bc8:	e008      	b.n	8007bdc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bca:	f7fd fcf3 	bl	80055b4 <HAL_GetTick>
 8007bce:	0002      	movs	r2, r0
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d901      	bls.n	8007bdc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e1ae      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007bdc:	4b94      	ldr	r3, [pc, #592]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007be0:	2202      	movs	r2, #2
 8007be2:	4013      	ands	r3, r2
 8007be4:	d1f1      	bne.n	8007bca <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2204      	movs	r2, #4
 8007bec:	4013      	ands	r3, r2
 8007bee:	d100      	bne.n	8007bf2 <HAL_RCC_OscConfig+0x44a>
 8007bf0:	e0ae      	b.n	8007d50 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bf2:	2023      	movs	r0, #35	@ 0x23
 8007bf4:	183b      	adds	r3, r7, r0
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bfa:	4b8d      	ldr	r3, [pc, #564]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007bfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bfe:	2380      	movs	r3, #128	@ 0x80
 8007c00:	055b      	lsls	r3, r3, #21
 8007c02:	4013      	ands	r3, r2
 8007c04:	d109      	bne.n	8007c1a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c06:	4b8a      	ldr	r3, [pc, #552]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c0a:	4b89      	ldr	r3, [pc, #548]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007c0c:	2180      	movs	r1, #128	@ 0x80
 8007c0e:	0549      	lsls	r1, r1, #21
 8007c10:	430a      	orrs	r2, r1
 8007c12:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8007c14:	183b      	adds	r3, r7, r0
 8007c16:	2201      	movs	r2, #1
 8007c18:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c1a:	4b88      	ldr	r3, [pc, #544]	@ (8007e3c <HAL_RCC_OscConfig+0x694>)
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	2380      	movs	r3, #128	@ 0x80
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	4013      	ands	r3, r2
 8007c24:	d11a      	bne.n	8007c5c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c26:	4b85      	ldr	r3, [pc, #532]	@ (8007e3c <HAL_RCC_OscConfig+0x694>)
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	4b84      	ldr	r3, [pc, #528]	@ (8007e3c <HAL_RCC_OscConfig+0x694>)
 8007c2c:	2180      	movs	r1, #128	@ 0x80
 8007c2e:	0049      	lsls	r1, r1, #1
 8007c30:	430a      	orrs	r2, r1
 8007c32:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c34:	f7fd fcbe 	bl	80055b4 <HAL_GetTick>
 8007c38:	0003      	movs	r3, r0
 8007c3a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c3c:	e008      	b.n	8007c50 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c3e:	f7fd fcb9 	bl	80055b4 <HAL_GetTick>
 8007c42:	0002      	movs	r2, r0
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	2b64      	cmp	r3, #100	@ 0x64
 8007c4a:	d901      	bls.n	8007c50 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e174      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c50:	4b7a      	ldr	r3, [pc, #488]	@ (8007e3c <HAL_RCC_OscConfig+0x694>)
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	2380      	movs	r3, #128	@ 0x80
 8007c56:	005b      	lsls	r3, r3, #1
 8007c58:	4013      	ands	r3, r2
 8007c5a:	d0f0      	beq.n	8007c3e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	2380      	movs	r3, #128	@ 0x80
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d107      	bne.n	8007c78 <HAL_RCC_OscConfig+0x4d0>
 8007c68:	4b71      	ldr	r3, [pc, #452]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007c6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c6c:	4b70      	ldr	r3, [pc, #448]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007c6e:	2180      	movs	r1, #128	@ 0x80
 8007c70:	0049      	lsls	r1, r1, #1
 8007c72:	430a      	orrs	r2, r1
 8007c74:	651a      	str	r2, [r3, #80]	@ 0x50
 8007c76:	e031      	b.n	8007cdc <HAL_RCC_OscConfig+0x534>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10c      	bne.n	8007c9a <HAL_RCC_OscConfig+0x4f2>
 8007c80:	4b6b      	ldr	r3, [pc, #428]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007c82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c84:	4b6a      	ldr	r3, [pc, #424]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007c86:	496c      	ldr	r1, [pc, #432]	@ (8007e38 <HAL_RCC_OscConfig+0x690>)
 8007c88:	400a      	ands	r2, r1
 8007c8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8007c8c:	4b68      	ldr	r3, [pc, #416]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007c8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c90:	4b67      	ldr	r3, [pc, #412]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007c92:	496b      	ldr	r1, [pc, #428]	@ (8007e40 <HAL_RCC_OscConfig+0x698>)
 8007c94:	400a      	ands	r2, r1
 8007c96:	651a      	str	r2, [r3, #80]	@ 0x50
 8007c98:	e020      	b.n	8007cdc <HAL_RCC_OscConfig+0x534>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689a      	ldr	r2, [r3, #8]
 8007c9e:	23a0      	movs	r3, #160	@ 0xa0
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d10e      	bne.n	8007cc4 <HAL_RCC_OscConfig+0x51c>
 8007ca6:	4b62      	ldr	r3, [pc, #392]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007ca8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007caa:	4b61      	ldr	r3, [pc, #388]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007cac:	2180      	movs	r1, #128	@ 0x80
 8007cae:	00c9      	lsls	r1, r1, #3
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	651a      	str	r2, [r3, #80]	@ 0x50
 8007cb4:	4b5e      	ldr	r3, [pc, #376]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007cb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cb8:	4b5d      	ldr	r3, [pc, #372]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007cba:	2180      	movs	r1, #128	@ 0x80
 8007cbc:	0049      	lsls	r1, r1, #1
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	651a      	str	r2, [r3, #80]	@ 0x50
 8007cc2:	e00b      	b.n	8007cdc <HAL_RCC_OscConfig+0x534>
 8007cc4:	4b5a      	ldr	r3, [pc, #360]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007cc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cc8:	4b59      	ldr	r3, [pc, #356]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007cca:	495b      	ldr	r1, [pc, #364]	@ (8007e38 <HAL_RCC_OscConfig+0x690>)
 8007ccc:	400a      	ands	r2, r1
 8007cce:	651a      	str	r2, [r3, #80]	@ 0x50
 8007cd0:	4b57      	ldr	r3, [pc, #348]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007cd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cd4:	4b56      	ldr	r3, [pc, #344]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007cd6:	495a      	ldr	r1, [pc, #360]	@ (8007e40 <HAL_RCC_OscConfig+0x698>)
 8007cd8:	400a      	ands	r2, r1
 8007cda:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d015      	beq.n	8007d10 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ce4:	f7fd fc66 	bl	80055b4 <HAL_GetTick>
 8007ce8:	0003      	movs	r3, r0
 8007cea:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cec:	e009      	b.n	8007d02 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cee:	f7fd fc61 	bl	80055b4 <HAL_GetTick>
 8007cf2:	0002      	movs	r2, r0
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	4a52      	ldr	r2, [pc, #328]	@ (8007e44 <HAL_RCC_OscConfig+0x69c>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d901      	bls.n	8007d02 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e11b      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d02:	4b4b      	ldr	r3, [pc, #300]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007d04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d06:	2380      	movs	r3, #128	@ 0x80
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	d0ef      	beq.n	8007cee <HAL_RCC_OscConfig+0x546>
 8007d0e:	e014      	b.n	8007d3a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d10:	f7fd fc50 	bl	80055b4 <HAL_GetTick>
 8007d14:	0003      	movs	r3, r0
 8007d16:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d18:	e009      	b.n	8007d2e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d1a:	f7fd fc4b 	bl	80055b4 <HAL_GetTick>
 8007d1e:	0002      	movs	r2, r0
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	4a47      	ldr	r2, [pc, #284]	@ (8007e44 <HAL_RCC_OscConfig+0x69c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e105      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d2e:	4b40      	ldr	r3, [pc, #256]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007d30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d32:	2380      	movs	r3, #128	@ 0x80
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4013      	ands	r3, r2
 8007d38:	d1ef      	bne.n	8007d1a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007d3a:	2323      	movs	r3, #35	@ 0x23
 8007d3c:	18fb      	adds	r3, r7, r3
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d105      	bne.n	8007d50 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d44:	4b3a      	ldr	r3, [pc, #232]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007d46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d48:	4b39      	ldr	r3, [pc, #228]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007d4a:	493f      	ldr	r1, [pc, #252]	@ (8007e48 <HAL_RCC_OscConfig+0x6a0>)
 8007d4c:	400a      	ands	r2, r1
 8007d4e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2220      	movs	r2, #32
 8007d56:	4013      	ands	r3, r2
 8007d58:	d049      	beq.n	8007dee <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d026      	beq.n	8007db0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8007d62:	4b33      	ldr	r3, [pc, #204]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	4b32      	ldr	r3, [pc, #200]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007d68:	2101      	movs	r1, #1
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	609a      	str	r2, [r3, #8]
 8007d6e:	4b30      	ldr	r3, [pc, #192]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007d70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d72:	4b2f      	ldr	r3, [pc, #188]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007d74:	2101      	movs	r1, #1
 8007d76:	430a      	orrs	r2, r1
 8007d78:	635a      	str	r2, [r3, #52]	@ 0x34
 8007d7a:	4b34      	ldr	r3, [pc, #208]	@ (8007e4c <HAL_RCC_OscConfig+0x6a4>)
 8007d7c:	6a1a      	ldr	r2, [r3, #32]
 8007d7e:	4b33      	ldr	r3, [pc, #204]	@ (8007e4c <HAL_RCC_OscConfig+0x6a4>)
 8007d80:	2180      	movs	r1, #128	@ 0x80
 8007d82:	0189      	lsls	r1, r1, #6
 8007d84:	430a      	orrs	r2, r1
 8007d86:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d88:	f7fd fc14 	bl	80055b4 <HAL_GetTick>
 8007d8c:	0003      	movs	r3, r0
 8007d8e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d90:	e008      	b.n	8007da4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d92:	f7fd fc0f 	bl	80055b4 <HAL_GetTick>
 8007d96:	0002      	movs	r2, r0
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d901      	bls.n	8007da4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e0ca      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007da4:	4b22      	ldr	r3, [pc, #136]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	2202      	movs	r2, #2
 8007daa:	4013      	ands	r3, r2
 8007dac:	d0f1      	beq.n	8007d92 <HAL_RCC_OscConfig+0x5ea>
 8007dae:	e01e      	b.n	8007dee <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8007db0:	4b1f      	ldr	r3, [pc, #124]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007db2:	689a      	ldr	r2, [r3, #8]
 8007db4:	4b1e      	ldr	r3, [pc, #120]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007db6:	2101      	movs	r1, #1
 8007db8:	438a      	bics	r2, r1
 8007dba:	609a      	str	r2, [r3, #8]
 8007dbc:	4b23      	ldr	r3, [pc, #140]	@ (8007e4c <HAL_RCC_OscConfig+0x6a4>)
 8007dbe:	6a1a      	ldr	r2, [r3, #32]
 8007dc0:	4b22      	ldr	r3, [pc, #136]	@ (8007e4c <HAL_RCC_OscConfig+0x6a4>)
 8007dc2:	4923      	ldr	r1, [pc, #140]	@ (8007e50 <HAL_RCC_OscConfig+0x6a8>)
 8007dc4:	400a      	ands	r2, r1
 8007dc6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dc8:	f7fd fbf4 	bl	80055b4 <HAL_GetTick>
 8007dcc:	0003      	movs	r3, r0
 8007dce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007dd0:	e008      	b.n	8007de4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007dd2:	f7fd fbef 	bl	80055b4 <HAL_GetTick>
 8007dd6:	0002      	movs	r2, r0
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d901      	bls.n	8007de4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e0aa      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007de4:	4b12      	ldr	r3, [pc, #72]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	2202      	movs	r2, #2
 8007dea:	4013      	ands	r3, r2
 8007dec:	d1f1      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d100      	bne.n	8007df8 <HAL_RCC_OscConfig+0x650>
 8007df6:	e09f      	b.n	8007f38 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	2b0c      	cmp	r3, #12
 8007dfc:	d100      	bne.n	8007e00 <HAL_RCC_OscConfig+0x658>
 8007dfe:	e078      	b.n	8007ef2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d159      	bne.n	8007ebc <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e08:	4b09      	ldr	r3, [pc, #36]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	4b08      	ldr	r3, [pc, #32]	@ (8007e30 <HAL_RCC_OscConfig+0x688>)
 8007e0e:	4911      	ldr	r1, [pc, #68]	@ (8007e54 <HAL_RCC_OscConfig+0x6ac>)
 8007e10:	400a      	ands	r2, r1
 8007e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e14:	f7fd fbce 	bl	80055b4 <HAL_GetTick>
 8007e18:	0003      	movs	r3, r0
 8007e1a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007e1c:	e01c      	b.n	8007e58 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e1e:	f7fd fbc9 	bl	80055b4 <HAL_GetTick>
 8007e22:	0002      	movs	r2, r0
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d915      	bls.n	8007e58 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e084      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
 8007e30:	40021000 	.word	0x40021000
 8007e34:	ffff1fff 	.word	0xffff1fff
 8007e38:	fffffeff 	.word	0xfffffeff
 8007e3c:	40007000 	.word	0x40007000
 8007e40:	fffffbff 	.word	0xfffffbff
 8007e44:	00001388 	.word	0x00001388
 8007e48:	efffffff 	.word	0xefffffff
 8007e4c:	40010000 	.word	0x40010000
 8007e50:	ffffdfff 	.word	0xffffdfff
 8007e54:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007e58:	4b3a      	ldr	r3, [pc, #232]	@ (8007f44 <HAL_RCC_OscConfig+0x79c>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	2380      	movs	r3, #128	@ 0x80
 8007e5e:	049b      	lsls	r3, r3, #18
 8007e60:	4013      	ands	r3, r2
 8007e62:	d1dc      	bne.n	8007e1e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e64:	4b37      	ldr	r3, [pc, #220]	@ (8007f44 <HAL_RCC_OscConfig+0x79c>)
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	4a37      	ldr	r2, [pc, #220]	@ (8007f48 <HAL_RCC_OscConfig+0x7a0>)
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	0019      	movs	r1, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e76:	431a      	orrs	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	4b31      	ldr	r3, [pc, #196]	@ (8007f44 <HAL_RCC_OscConfig+0x79c>)
 8007e80:	430a      	orrs	r2, r1
 8007e82:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e84:	4b2f      	ldr	r3, [pc, #188]	@ (8007f44 <HAL_RCC_OscConfig+0x79c>)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	4b2e      	ldr	r3, [pc, #184]	@ (8007f44 <HAL_RCC_OscConfig+0x79c>)
 8007e8a:	2180      	movs	r1, #128	@ 0x80
 8007e8c:	0449      	lsls	r1, r1, #17
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e92:	f7fd fb8f 	bl	80055b4 <HAL_GetTick>
 8007e96:	0003      	movs	r3, r0
 8007e98:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007e9a:	e008      	b.n	8007eae <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e9c:	f7fd fb8a 	bl	80055b4 <HAL_GetTick>
 8007ea0:	0002      	movs	r2, r0
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e045      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007eae:	4b25      	ldr	r3, [pc, #148]	@ (8007f44 <HAL_RCC_OscConfig+0x79c>)
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	2380      	movs	r3, #128	@ 0x80
 8007eb4:	049b      	lsls	r3, r3, #18
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	d0f0      	beq.n	8007e9c <HAL_RCC_OscConfig+0x6f4>
 8007eba:	e03d      	b.n	8007f38 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ebc:	4b21      	ldr	r3, [pc, #132]	@ (8007f44 <HAL_RCC_OscConfig+0x79c>)
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	4b20      	ldr	r3, [pc, #128]	@ (8007f44 <HAL_RCC_OscConfig+0x79c>)
 8007ec2:	4922      	ldr	r1, [pc, #136]	@ (8007f4c <HAL_RCC_OscConfig+0x7a4>)
 8007ec4:	400a      	ands	r2, r1
 8007ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ec8:	f7fd fb74 	bl	80055b4 <HAL_GetTick>
 8007ecc:	0003      	movs	r3, r0
 8007ece:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007ed0:	e008      	b.n	8007ee4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ed2:	f7fd fb6f 	bl	80055b4 <HAL_GetTick>
 8007ed6:	0002      	movs	r2, r0
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d901      	bls.n	8007ee4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e02a      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007ee4:	4b17      	ldr	r3, [pc, #92]	@ (8007f44 <HAL_RCC_OscConfig+0x79c>)
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	2380      	movs	r3, #128	@ 0x80
 8007eea:	049b      	lsls	r3, r3, #18
 8007eec:	4013      	ands	r3, r2
 8007eee:	d1f0      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x72a>
 8007ef0:	e022      	b.n	8007f38 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d101      	bne.n	8007efe <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e01d      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007efe:	4b11      	ldr	r3, [pc, #68]	@ (8007f44 <HAL_RCC_OscConfig+0x79c>)
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	2380      	movs	r3, #128	@ 0x80
 8007f08:	025b      	lsls	r3, r3, #9
 8007f0a:	401a      	ands	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d10f      	bne.n	8007f34 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	23f0      	movs	r3, #240	@ 0xf0
 8007f18:	039b      	lsls	r3, r3, #14
 8007f1a:	401a      	ands	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d107      	bne.n	8007f34 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	23c0      	movs	r3, #192	@ 0xc0
 8007f28:	041b      	lsls	r3, r3, #16
 8007f2a:	401a      	ands	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d001      	beq.n	8007f38 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e000      	b.n	8007f3a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	b00a      	add	sp, #40	@ 0x28
 8007f40:	bdb0      	pop	{r4, r5, r7, pc}
 8007f42:	46c0      	nop			@ (mov r8, r8)
 8007f44:	40021000 	.word	0x40021000
 8007f48:	ff02ffff 	.word	0xff02ffff
 8007f4c:	feffffff 	.word	0xfeffffff

08007f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f50:	b5b0      	push	{r4, r5, r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e128      	b.n	80081b6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f64:	4b96      	ldr	r3, [pc, #600]	@ (80081c0 <HAL_RCC_ClockConfig+0x270>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d91e      	bls.n	8007fb0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f72:	4b93      	ldr	r3, [pc, #588]	@ (80081c0 <HAL_RCC_ClockConfig+0x270>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2201      	movs	r2, #1
 8007f78:	4393      	bics	r3, r2
 8007f7a:	0019      	movs	r1, r3
 8007f7c:	4b90      	ldr	r3, [pc, #576]	@ (80081c0 <HAL_RCC_ClockConfig+0x270>)
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007f84:	f7fd fb16 	bl	80055b4 <HAL_GetTick>
 8007f88:	0003      	movs	r3, r0
 8007f8a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f8c:	e009      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f8e:	f7fd fb11 	bl	80055b4 <HAL_GetTick>
 8007f92:	0002      	movs	r2, r0
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	4a8a      	ldr	r2, [pc, #552]	@ (80081c4 <HAL_RCC_ClockConfig+0x274>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e109      	b.n	80081b6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fa2:	4b87      	ldr	r3, [pc, #540]	@ (80081c0 <HAL_RCC_ClockConfig+0x270>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	4013      	ands	r3, r2
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d1ee      	bne.n	8007f8e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	d009      	beq.n	8007fce <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fba:	4b83      	ldr	r3, [pc, #524]	@ (80081c8 <HAL_RCC_ClockConfig+0x278>)
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	22f0      	movs	r2, #240	@ 0xf0
 8007fc0:	4393      	bics	r3, r2
 8007fc2:	0019      	movs	r1, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	4b7f      	ldr	r3, [pc, #508]	@ (80081c8 <HAL_RCC_ClockConfig+0x278>)
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	d100      	bne.n	8007fda <HAL_RCC_ClockConfig+0x8a>
 8007fd8:	e089      	b.n	80080ee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d107      	bne.n	8007ff2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fe2:	4b79      	ldr	r3, [pc, #484]	@ (80081c8 <HAL_RCC_ClockConfig+0x278>)
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	2380      	movs	r3, #128	@ 0x80
 8007fe8:	029b      	lsls	r3, r3, #10
 8007fea:	4013      	ands	r3, r2
 8007fec:	d120      	bne.n	8008030 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e0e1      	b.n	80081b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d107      	bne.n	800800a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ffa:	4b73      	ldr	r3, [pc, #460]	@ (80081c8 <HAL_RCC_ClockConfig+0x278>)
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	2380      	movs	r3, #128	@ 0x80
 8008000:	049b      	lsls	r3, r3, #18
 8008002:	4013      	ands	r3, r2
 8008004:	d114      	bne.n	8008030 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e0d5      	b.n	80081b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d106      	bne.n	8008020 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008012:	4b6d      	ldr	r3, [pc, #436]	@ (80081c8 <HAL_RCC_ClockConfig+0x278>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2204      	movs	r2, #4
 8008018:	4013      	ands	r3, r2
 800801a:	d109      	bne.n	8008030 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e0ca      	b.n	80081b6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008020:	4b69      	ldr	r3, [pc, #420]	@ (80081c8 <HAL_RCC_ClockConfig+0x278>)
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	2380      	movs	r3, #128	@ 0x80
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4013      	ands	r3, r2
 800802a:	d101      	bne.n	8008030 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e0c2      	b.n	80081b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008030:	4b65      	ldr	r3, [pc, #404]	@ (80081c8 <HAL_RCC_ClockConfig+0x278>)
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	2203      	movs	r2, #3
 8008036:	4393      	bics	r3, r2
 8008038:	0019      	movs	r1, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	4b62      	ldr	r3, [pc, #392]	@ (80081c8 <HAL_RCC_ClockConfig+0x278>)
 8008040:	430a      	orrs	r2, r1
 8008042:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008044:	f7fd fab6 	bl	80055b4 <HAL_GetTick>
 8008048:	0003      	movs	r3, r0
 800804a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	2b02      	cmp	r3, #2
 8008052:	d111      	bne.n	8008078 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008054:	e009      	b.n	800806a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008056:	f7fd faad 	bl	80055b4 <HAL_GetTick>
 800805a:	0002      	movs	r2, r0
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	4a58      	ldr	r2, [pc, #352]	@ (80081c4 <HAL_RCC_ClockConfig+0x274>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d901      	bls.n	800806a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e0a5      	b.n	80081b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800806a:	4b57      	ldr	r3, [pc, #348]	@ (80081c8 <HAL_RCC_ClockConfig+0x278>)
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	220c      	movs	r2, #12
 8008070:	4013      	ands	r3, r2
 8008072:	2b08      	cmp	r3, #8
 8008074:	d1ef      	bne.n	8008056 <HAL_RCC_ClockConfig+0x106>
 8008076:	e03a      	b.n	80080ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	2b03      	cmp	r3, #3
 800807e:	d111      	bne.n	80080a4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008080:	e009      	b.n	8008096 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008082:	f7fd fa97 	bl	80055b4 <HAL_GetTick>
 8008086:	0002      	movs	r2, r0
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	4a4d      	ldr	r2, [pc, #308]	@ (80081c4 <HAL_RCC_ClockConfig+0x274>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d901      	bls.n	8008096 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e08f      	b.n	80081b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008096:	4b4c      	ldr	r3, [pc, #304]	@ (80081c8 <HAL_RCC_ClockConfig+0x278>)
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	220c      	movs	r2, #12
 800809c:	4013      	ands	r3, r2
 800809e:	2b0c      	cmp	r3, #12
 80080a0:	d1ef      	bne.n	8008082 <HAL_RCC_ClockConfig+0x132>
 80080a2:	e024      	b.n	80080ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d11b      	bne.n	80080e4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80080ac:	e009      	b.n	80080c2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080ae:	f7fd fa81 	bl	80055b4 <HAL_GetTick>
 80080b2:	0002      	movs	r2, r0
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	4a42      	ldr	r2, [pc, #264]	@ (80081c4 <HAL_RCC_ClockConfig+0x274>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d901      	bls.n	80080c2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e079      	b.n	80081b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80080c2:	4b41      	ldr	r3, [pc, #260]	@ (80081c8 <HAL_RCC_ClockConfig+0x278>)
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	220c      	movs	r2, #12
 80080c8:	4013      	ands	r3, r2
 80080ca:	2b04      	cmp	r3, #4
 80080cc:	d1ef      	bne.n	80080ae <HAL_RCC_ClockConfig+0x15e>
 80080ce:	e00e      	b.n	80080ee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080d0:	f7fd fa70 	bl	80055b4 <HAL_GetTick>
 80080d4:	0002      	movs	r2, r0
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	4a3a      	ldr	r2, [pc, #232]	@ (80081c4 <HAL_RCC_ClockConfig+0x274>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d901      	bls.n	80080e4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e068      	b.n	80081b6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80080e4:	4b38      	ldr	r3, [pc, #224]	@ (80081c8 <HAL_RCC_ClockConfig+0x278>)
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	220c      	movs	r2, #12
 80080ea:	4013      	ands	r3, r2
 80080ec:	d1f0      	bne.n	80080d0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080ee:	4b34      	ldr	r3, [pc, #208]	@ (80081c0 <HAL_RCC_ClockConfig+0x270>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2201      	movs	r2, #1
 80080f4:	4013      	ands	r3, r2
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d21e      	bcs.n	800813a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080fc:	4b30      	ldr	r3, [pc, #192]	@ (80081c0 <HAL_RCC_ClockConfig+0x270>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2201      	movs	r2, #1
 8008102:	4393      	bics	r3, r2
 8008104:	0019      	movs	r1, r3
 8008106:	4b2e      	ldr	r3, [pc, #184]	@ (80081c0 <HAL_RCC_ClockConfig+0x270>)
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800810e:	f7fd fa51 	bl	80055b4 <HAL_GetTick>
 8008112:	0003      	movs	r3, r0
 8008114:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008116:	e009      	b.n	800812c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008118:	f7fd fa4c 	bl	80055b4 <HAL_GetTick>
 800811c:	0002      	movs	r2, r0
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	4a28      	ldr	r2, [pc, #160]	@ (80081c4 <HAL_RCC_ClockConfig+0x274>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d901      	bls.n	800812c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e044      	b.n	80081b6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800812c:	4b24      	ldr	r3, [pc, #144]	@ (80081c0 <HAL_RCC_ClockConfig+0x270>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2201      	movs	r2, #1
 8008132:	4013      	ands	r3, r2
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	429a      	cmp	r2, r3
 8008138:	d1ee      	bne.n	8008118 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2204      	movs	r2, #4
 8008140:	4013      	ands	r3, r2
 8008142:	d009      	beq.n	8008158 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008144:	4b20      	ldr	r3, [pc, #128]	@ (80081c8 <HAL_RCC_ClockConfig+0x278>)
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	4a20      	ldr	r2, [pc, #128]	@ (80081cc <HAL_RCC_ClockConfig+0x27c>)
 800814a:	4013      	ands	r3, r2
 800814c:	0019      	movs	r1, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68da      	ldr	r2, [r3, #12]
 8008152:	4b1d      	ldr	r3, [pc, #116]	@ (80081c8 <HAL_RCC_ClockConfig+0x278>)
 8008154:	430a      	orrs	r2, r1
 8008156:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2208      	movs	r2, #8
 800815e:	4013      	ands	r3, r2
 8008160:	d00a      	beq.n	8008178 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008162:	4b19      	ldr	r3, [pc, #100]	@ (80081c8 <HAL_RCC_ClockConfig+0x278>)
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	4a1a      	ldr	r2, [pc, #104]	@ (80081d0 <HAL_RCC_ClockConfig+0x280>)
 8008168:	4013      	ands	r3, r2
 800816a:	0019      	movs	r1, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	00da      	lsls	r2, r3, #3
 8008172:	4b15      	ldr	r3, [pc, #84]	@ (80081c8 <HAL_RCC_ClockConfig+0x278>)
 8008174:	430a      	orrs	r2, r1
 8008176:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008178:	f000 f832 	bl	80081e0 <HAL_RCC_GetSysClockFreq>
 800817c:	0001      	movs	r1, r0
 800817e:	4b12      	ldr	r3, [pc, #72]	@ (80081c8 <HAL_RCC_ClockConfig+0x278>)
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	091b      	lsrs	r3, r3, #4
 8008184:	220f      	movs	r2, #15
 8008186:	4013      	ands	r3, r2
 8008188:	4a12      	ldr	r2, [pc, #72]	@ (80081d4 <HAL_RCC_ClockConfig+0x284>)
 800818a:	5cd3      	ldrb	r3, [r2, r3]
 800818c:	000a      	movs	r2, r1
 800818e:	40da      	lsrs	r2, r3
 8008190:	4b11      	ldr	r3, [pc, #68]	@ (80081d8 <HAL_RCC_ClockConfig+0x288>)
 8008192:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008194:	4b11      	ldr	r3, [pc, #68]	@ (80081dc <HAL_RCC_ClockConfig+0x28c>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	250b      	movs	r5, #11
 800819a:	197c      	adds	r4, r7, r5
 800819c:	0018      	movs	r0, r3
 800819e:	f7fd f9c3 	bl	8005528 <HAL_InitTick>
 80081a2:	0003      	movs	r3, r0
 80081a4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80081a6:	197b      	adds	r3, r7, r5
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80081ae:	197b      	adds	r3, r7, r5
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	e000      	b.n	80081b6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	0018      	movs	r0, r3
 80081b8:	46bd      	mov	sp, r7
 80081ba:	b004      	add	sp, #16
 80081bc:	bdb0      	pop	{r4, r5, r7, pc}
 80081be:	46c0      	nop			@ (mov r8, r8)
 80081c0:	40022000 	.word	0x40022000
 80081c4:	00001388 	.word	0x00001388
 80081c8:	40021000 	.word	0x40021000
 80081cc:	fffff8ff 	.word	0xfffff8ff
 80081d0:	ffffc7ff 	.word	0xffffc7ff
 80081d4:	0800e8c8 	.word	0x0800e8c8
 80081d8:	20000044 	.word	0x20000044
 80081dc:	20000048 	.word	0x20000048

080081e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081e0:	b5b0      	push	{r4, r5, r7, lr}
 80081e2:	b08e      	sub	sp, #56	@ 0x38
 80081e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80081e6:	4b4c      	ldr	r3, [pc, #304]	@ (8008318 <HAL_RCC_GetSysClockFreq+0x138>)
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80081ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081ee:	230c      	movs	r3, #12
 80081f0:	4013      	ands	r3, r2
 80081f2:	2b0c      	cmp	r3, #12
 80081f4:	d014      	beq.n	8008220 <HAL_RCC_GetSysClockFreq+0x40>
 80081f6:	d900      	bls.n	80081fa <HAL_RCC_GetSysClockFreq+0x1a>
 80081f8:	e07b      	b.n	80082f2 <HAL_RCC_GetSysClockFreq+0x112>
 80081fa:	2b04      	cmp	r3, #4
 80081fc:	d002      	beq.n	8008204 <HAL_RCC_GetSysClockFreq+0x24>
 80081fe:	2b08      	cmp	r3, #8
 8008200:	d00b      	beq.n	800821a <HAL_RCC_GetSysClockFreq+0x3a>
 8008202:	e076      	b.n	80082f2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008204:	4b44      	ldr	r3, [pc, #272]	@ (8008318 <HAL_RCC_GetSysClockFreq+0x138>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2210      	movs	r2, #16
 800820a:	4013      	ands	r3, r2
 800820c:	d002      	beq.n	8008214 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800820e:	4b43      	ldr	r3, [pc, #268]	@ (800831c <HAL_RCC_GetSysClockFreq+0x13c>)
 8008210:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8008212:	e07c      	b.n	800830e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8008214:	4b42      	ldr	r3, [pc, #264]	@ (8008320 <HAL_RCC_GetSysClockFreq+0x140>)
 8008216:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8008218:	e079      	b.n	800830e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800821a:	4b42      	ldr	r3, [pc, #264]	@ (8008324 <HAL_RCC_GetSysClockFreq+0x144>)
 800821c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800821e:	e076      	b.n	800830e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008222:	0c9a      	lsrs	r2, r3, #18
 8008224:	230f      	movs	r3, #15
 8008226:	401a      	ands	r2, r3
 8008228:	4b3f      	ldr	r3, [pc, #252]	@ (8008328 <HAL_RCC_GetSysClockFreq+0x148>)
 800822a:	5c9b      	ldrb	r3, [r3, r2]
 800822c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800822e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008230:	0d9a      	lsrs	r2, r3, #22
 8008232:	2303      	movs	r3, #3
 8008234:	4013      	ands	r3, r2
 8008236:	3301      	adds	r3, #1
 8008238:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800823a:	4b37      	ldr	r3, [pc, #220]	@ (8008318 <HAL_RCC_GetSysClockFreq+0x138>)
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	2380      	movs	r3, #128	@ 0x80
 8008240:	025b      	lsls	r3, r3, #9
 8008242:	4013      	ands	r3, r2
 8008244:	d01a      	beq.n	800827c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008248:	61bb      	str	r3, [r7, #24]
 800824a:	2300      	movs	r3, #0
 800824c:	61fb      	str	r3, [r7, #28]
 800824e:	4a35      	ldr	r2, [pc, #212]	@ (8008324 <HAL_RCC_GetSysClockFreq+0x144>)
 8008250:	2300      	movs	r3, #0
 8008252:	69b8      	ldr	r0, [r7, #24]
 8008254:	69f9      	ldr	r1, [r7, #28]
 8008256:	f7f8 f8ff 	bl	8000458 <__aeabi_lmul>
 800825a:	0002      	movs	r2, r0
 800825c:	000b      	movs	r3, r1
 800825e:	0010      	movs	r0, r2
 8008260:	0019      	movs	r1, r3
 8008262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008264:	613b      	str	r3, [r7, #16]
 8008266:	2300      	movs	r3, #0
 8008268:	617b      	str	r3, [r7, #20]
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	f7f8 f8d3 	bl	8000418 <__aeabi_uldivmod>
 8008272:	0002      	movs	r2, r0
 8008274:	000b      	movs	r3, r1
 8008276:	0013      	movs	r3, r2
 8008278:	637b      	str	r3, [r7, #52]	@ 0x34
 800827a:	e037      	b.n	80082ec <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800827c:	4b26      	ldr	r3, [pc, #152]	@ (8008318 <HAL_RCC_GetSysClockFreq+0x138>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2210      	movs	r2, #16
 8008282:	4013      	ands	r3, r2
 8008284:	d01a      	beq.n	80082bc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8008286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008288:	60bb      	str	r3, [r7, #8]
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
 800828e:	4a23      	ldr	r2, [pc, #140]	@ (800831c <HAL_RCC_GetSysClockFreq+0x13c>)
 8008290:	2300      	movs	r3, #0
 8008292:	68b8      	ldr	r0, [r7, #8]
 8008294:	68f9      	ldr	r1, [r7, #12]
 8008296:	f7f8 f8df 	bl	8000458 <__aeabi_lmul>
 800829a:	0002      	movs	r2, r0
 800829c:	000b      	movs	r3, r1
 800829e:	0010      	movs	r0, r2
 80082a0:	0019      	movs	r1, r3
 80082a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a4:	603b      	str	r3, [r7, #0]
 80082a6:	2300      	movs	r3, #0
 80082a8:	607b      	str	r3, [r7, #4]
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f7f8 f8b3 	bl	8000418 <__aeabi_uldivmod>
 80082b2:	0002      	movs	r2, r0
 80082b4:	000b      	movs	r3, r1
 80082b6:	0013      	movs	r3, r2
 80082b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ba:	e017      	b.n	80082ec <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80082bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082be:	0018      	movs	r0, r3
 80082c0:	2300      	movs	r3, #0
 80082c2:	0019      	movs	r1, r3
 80082c4:	4a16      	ldr	r2, [pc, #88]	@ (8008320 <HAL_RCC_GetSysClockFreq+0x140>)
 80082c6:	2300      	movs	r3, #0
 80082c8:	f7f8 f8c6 	bl	8000458 <__aeabi_lmul>
 80082cc:	0002      	movs	r2, r0
 80082ce:	000b      	movs	r3, r1
 80082d0:	0010      	movs	r0, r2
 80082d2:	0019      	movs	r1, r3
 80082d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d6:	001c      	movs	r4, r3
 80082d8:	2300      	movs	r3, #0
 80082da:	001d      	movs	r5, r3
 80082dc:	0022      	movs	r2, r4
 80082de:	002b      	movs	r3, r5
 80082e0:	f7f8 f89a 	bl	8000418 <__aeabi_uldivmod>
 80082e4:	0002      	movs	r2, r0
 80082e6:	000b      	movs	r3, r1
 80082e8:	0013      	movs	r3, r2
 80082ea:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80082ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ee:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80082f0:	e00d      	b.n	800830e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80082f2:	4b09      	ldr	r3, [pc, #36]	@ (8008318 <HAL_RCC_GetSysClockFreq+0x138>)
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	0b5b      	lsrs	r3, r3, #13
 80082f8:	2207      	movs	r2, #7
 80082fa:	4013      	ands	r3, r2
 80082fc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	3301      	adds	r3, #1
 8008302:	2280      	movs	r2, #128	@ 0x80
 8008304:	0212      	lsls	r2, r2, #8
 8008306:	409a      	lsls	r2, r3
 8008308:	0013      	movs	r3, r2
 800830a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800830c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800830e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8008310:	0018      	movs	r0, r3
 8008312:	46bd      	mov	sp, r7
 8008314:	b00e      	add	sp, #56	@ 0x38
 8008316:	bdb0      	pop	{r4, r5, r7, pc}
 8008318:	40021000 	.word	0x40021000
 800831c:	003d0900 	.word	0x003d0900
 8008320:	00f42400 	.word	0x00f42400
 8008324:	007a1200 	.word	0x007a1200
 8008328:	0800e8d8 	.word	0x0800e8d8

0800832c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8008334:	2017      	movs	r0, #23
 8008336:	183b      	adds	r3, r7, r0
 8008338:	2200      	movs	r2, #0
 800833a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2220      	movs	r2, #32
 8008342:	4013      	ands	r3, r2
 8008344:	d100      	bne.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8008346:	e0c7      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008348:	4b9b      	ldr	r3, [pc, #620]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800834a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800834c:	2380      	movs	r3, #128	@ 0x80
 800834e:	055b      	lsls	r3, r3, #21
 8008350:	4013      	ands	r3, r2
 8008352:	d109      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008354:	4b98      	ldr	r3, [pc, #608]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008356:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008358:	4b97      	ldr	r3, [pc, #604]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800835a:	2180      	movs	r1, #128	@ 0x80
 800835c:	0549      	lsls	r1, r1, #21
 800835e:	430a      	orrs	r2, r1
 8008360:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8008362:	183b      	adds	r3, r7, r0
 8008364:	2201      	movs	r2, #1
 8008366:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008368:	4b94      	ldr	r3, [pc, #592]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	2380      	movs	r3, #128	@ 0x80
 800836e:	005b      	lsls	r3, r3, #1
 8008370:	4013      	ands	r3, r2
 8008372:	d11a      	bne.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008374:	4b91      	ldr	r3, [pc, #580]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	4b90      	ldr	r3, [pc, #576]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800837a:	2180      	movs	r1, #128	@ 0x80
 800837c:	0049      	lsls	r1, r1, #1
 800837e:	430a      	orrs	r2, r1
 8008380:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008382:	f7fd f917 	bl	80055b4 <HAL_GetTick>
 8008386:	0003      	movs	r3, r0
 8008388:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800838a:	e008      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800838c:	f7fd f912 	bl	80055b4 <HAL_GetTick>
 8008390:	0002      	movs	r2, r0
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	2b64      	cmp	r3, #100	@ 0x64
 8008398:	d901      	bls.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e107      	b.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800839e:	4b87      	ldr	r3, [pc, #540]	@ (80085bc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	2380      	movs	r3, #128	@ 0x80
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	4013      	ands	r3, r2
 80083a8:	d0f0      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80083aa:	4b83      	ldr	r3, [pc, #524]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	23c0      	movs	r3, #192	@ 0xc0
 80083b0:	039b      	lsls	r3, r3, #14
 80083b2:	4013      	ands	r3, r2
 80083b4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	23c0      	movs	r3, #192	@ 0xc0
 80083bc:	039b      	lsls	r3, r3, #14
 80083be:	4013      	ands	r3, r2
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d013      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	23c0      	movs	r3, #192	@ 0xc0
 80083cc:	029b      	lsls	r3, r3, #10
 80083ce:	401a      	ands	r2, r3
 80083d0:	23c0      	movs	r3, #192	@ 0xc0
 80083d2:	029b      	lsls	r3, r3, #10
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d10a      	bne.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80083d8:	4b77      	ldr	r3, [pc, #476]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	2380      	movs	r3, #128	@ 0x80
 80083de:	029b      	lsls	r3, r3, #10
 80083e0:	401a      	ands	r2, r3
 80083e2:	2380      	movs	r3, #128	@ 0x80
 80083e4:	029b      	lsls	r3, r3, #10
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d101      	bne.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e0df      	b.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80083ee:	4b72      	ldr	r3, [pc, #456]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80083f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083f2:	23c0      	movs	r3, #192	@ 0xc0
 80083f4:	029b      	lsls	r3, r3, #10
 80083f6:	4013      	ands	r3, r2
 80083f8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d03b      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	23c0      	movs	r3, #192	@ 0xc0
 8008406:	029b      	lsls	r3, r3, #10
 8008408:	4013      	ands	r3, r2
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	429a      	cmp	r2, r3
 800840e:	d033      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2220      	movs	r2, #32
 8008416:	4013      	ands	r3, r2
 8008418:	d02e      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800841a:	4b67      	ldr	r3, [pc, #412]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800841c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800841e:	4a68      	ldr	r2, [pc, #416]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008420:	4013      	ands	r3, r2
 8008422:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008424:	4b64      	ldr	r3, [pc, #400]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008426:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008428:	4b63      	ldr	r3, [pc, #396]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800842a:	2180      	movs	r1, #128	@ 0x80
 800842c:	0309      	lsls	r1, r1, #12
 800842e:	430a      	orrs	r2, r1
 8008430:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008432:	4b61      	ldr	r3, [pc, #388]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008434:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008436:	4b60      	ldr	r3, [pc, #384]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008438:	4962      	ldr	r1, [pc, #392]	@ (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800843a:	400a      	ands	r2, r1
 800843c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800843e:	4b5e      	ldr	r3, [pc, #376]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	2380      	movs	r3, #128	@ 0x80
 8008448:	005b      	lsls	r3, r3, #1
 800844a:	4013      	ands	r3, r2
 800844c:	d014      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800844e:	f7fd f8b1 	bl	80055b4 <HAL_GetTick>
 8008452:	0003      	movs	r3, r0
 8008454:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008456:	e009      	b.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008458:	f7fd f8ac 	bl	80055b4 <HAL_GetTick>
 800845c:	0002      	movs	r2, r0
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	4a59      	ldr	r2, [pc, #356]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d901      	bls.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	e0a0      	b.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800846c:	4b52      	ldr	r3, [pc, #328]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800846e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008470:	2380      	movs	r3, #128	@ 0x80
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4013      	ands	r3, r2
 8008476:	d0ef      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2220      	movs	r2, #32
 800847e:	4013      	ands	r3, r2
 8008480:	d01f      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	23c0      	movs	r3, #192	@ 0xc0
 8008488:	029b      	lsls	r3, r3, #10
 800848a:	401a      	ands	r2, r3
 800848c:	23c0      	movs	r3, #192	@ 0xc0
 800848e:	029b      	lsls	r3, r3, #10
 8008490:	429a      	cmp	r2, r3
 8008492:	d10c      	bne.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x182>
 8008494:	4b48      	ldr	r3, [pc, #288]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a4c      	ldr	r2, [pc, #304]	@ (80085cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800849a:	4013      	ands	r3, r2
 800849c:	0019      	movs	r1, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	685a      	ldr	r2, [r3, #4]
 80084a2:	23c0      	movs	r3, #192	@ 0xc0
 80084a4:	039b      	lsls	r3, r3, #14
 80084a6:	401a      	ands	r2, r3
 80084a8:	4b43      	ldr	r3, [pc, #268]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80084aa:	430a      	orrs	r2, r1
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	4b42      	ldr	r3, [pc, #264]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80084b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	23c0      	movs	r3, #192	@ 0xc0
 80084b8:	029b      	lsls	r3, r3, #10
 80084ba:	401a      	ands	r2, r3
 80084bc:	4b3e      	ldr	r3, [pc, #248]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80084be:	430a      	orrs	r2, r1
 80084c0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80084c2:	2317      	movs	r3, #23
 80084c4:	18fb      	adds	r3, r7, r3
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d105      	bne.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084cc:	4b3a      	ldr	r3, [pc, #232]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80084ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084d0:	4b39      	ldr	r3, [pc, #228]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80084d2:	493f      	ldr	r1, [pc, #252]	@ (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80084d4:	400a      	ands	r2, r1
 80084d6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2201      	movs	r2, #1
 80084de:	4013      	ands	r3, r2
 80084e0:	d009      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084e2:	4b35      	ldr	r3, [pc, #212]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80084e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084e6:	2203      	movs	r2, #3
 80084e8:	4393      	bics	r3, r2
 80084ea:	0019      	movs	r1, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689a      	ldr	r2, [r3, #8]
 80084f0:	4b31      	ldr	r3, [pc, #196]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80084f2:	430a      	orrs	r2, r1
 80084f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2202      	movs	r2, #2
 80084fc:	4013      	ands	r3, r2
 80084fe:	d009      	beq.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008500:	4b2d      	ldr	r3, [pc, #180]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008504:	220c      	movs	r2, #12
 8008506:	4393      	bics	r3, r2
 8008508:	0019      	movs	r1, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68da      	ldr	r2, [r3, #12]
 800850e:	4b2a      	ldr	r3, [pc, #168]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008510:	430a      	orrs	r2, r1
 8008512:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2204      	movs	r2, #4
 800851a:	4013      	ands	r3, r2
 800851c:	d009      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800851e:	4b26      	ldr	r3, [pc, #152]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008522:	4a2c      	ldr	r2, [pc, #176]	@ (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008524:	4013      	ands	r3, r2
 8008526:	0019      	movs	r1, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	691a      	ldr	r2, [r3, #16]
 800852c:	4b22      	ldr	r3, [pc, #136]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800852e:	430a      	orrs	r2, r1
 8008530:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2208      	movs	r2, #8
 8008538:	4013      	ands	r3, r2
 800853a:	d009      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800853c:	4b1e      	ldr	r3, [pc, #120]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800853e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008540:	4a25      	ldr	r2, [pc, #148]	@ (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8008542:	4013      	ands	r3, r2
 8008544:	0019      	movs	r1, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	695a      	ldr	r2, [r3, #20]
 800854a:	4b1b      	ldr	r3, [pc, #108]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800854c:	430a      	orrs	r2, r1
 800854e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	2380      	movs	r3, #128	@ 0x80
 8008556:	005b      	lsls	r3, r3, #1
 8008558:	4013      	ands	r3, r2
 800855a:	d009      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800855c:	4b16      	ldr	r3, [pc, #88]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800855e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008560:	4a17      	ldr	r2, [pc, #92]	@ (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008562:	4013      	ands	r3, r2
 8008564:	0019      	movs	r1, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	699a      	ldr	r2, [r3, #24]
 800856a:	4b13      	ldr	r3, [pc, #76]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800856c:	430a      	orrs	r2, r1
 800856e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2240      	movs	r2, #64	@ 0x40
 8008576:	4013      	ands	r3, r2
 8008578:	d009      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800857a:	4b0f      	ldr	r3, [pc, #60]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800857c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800857e:	4a17      	ldr	r2, [pc, #92]	@ (80085dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8008580:	4013      	ands	r3, r2
 8008582:	0019      	movs	r1, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a1a      	ldr	r2, [r3, #32]
 8008588:	4b0b      	ldr	r3, [pc, #44]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800858a:	430a      	orrs	r2, r1
 800858c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2280      	movs	r2, #128	@ 0x80
 8008594:	4013      	ands	r3, r2
 8008596:	d009      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8008598:	4b07      	ldr	r3, [pc, #28]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800859a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800859c:	4a10      	ldr	r2, [pc, #64]	@ (80085e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800859e:	4013      	ands	r3, r2
 80085a0:	0019      	movs	r1, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	69da      	ldr	r2, [r3, #28]
 80085a6:	4b04      	ldr	r3, [pc, #16]	@ (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80085a8:	430a      	orrs	r2, r1
 80085aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	0018      	movs	r0, r3
 80085b0:	46bd      	mov	sp, r7
 80085b2:	b006      	add	sp, #24
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	46c0      	nop			@ (mov r8, r8)
 80085b8:	40021000 	.word	0x40021000
 80085bc:	40007000 	.word	0x40007000
 80085c0:	fffcffff 	.word	0xfffcffff
 80085c4:	fff7ffff 	.word	0xfff7ffff
 80085c8:	00001388 	.word	0x00001388
 80085cc:	ffcfffff 	.word	0xffcfffff
 80085d0:	efffffff 	.word	0xefffffff
 80085d4:	fffff3ff 	.word	0xfffff3ff
 80085d8:	ffffcfff 	.word	0xffffcfff
 80085dc:	fbffffff 	.word	0xfbffffff
 80085e0:	fff3ffff 	.word	0xfff3ffff

080085e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d101      	bne.n	80085f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e083      	b.n	80086fe <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d109      	bne.n	8008612 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	2382      	movs	r3, #130	@ 0x82
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	429a      	cmp	r2, r3
 8008608:	d009      	beq.n	800861e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	61da      	str	r2, [r3, #28]
 8008610:	e005      	b.n	800861e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2251      	movs	r2, #81	@ 0x51
 8008628:	5c9b      	ldrb	r3, [r3, r2]
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d107      	bne.n	8008640 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2250      	movs	r2, #80	@ 0x50
 8008634:	2100      	movs	r1, #0
 8008636:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	0018      	movs	r0, r3
 800863c:	f7f8 fe2e 	bl	800129c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2251      	movs	r2, #81	@ 0x51
 8008644:	2102      	movs	r1, #2
 8008646:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2140      	movs	r1, #64	@ 0x40
 8008654:	438a      	bics	r2, r1
 8008656:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	2382      	movs	r3, #130	@ 0x82
 800865e:	005b      	lsls	r3, r3, #1
 8008660:	401a      	ands	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6899      	ldr	r1, [r3, #8]
 8008666:	2384      	movs	r3, #132	@ 0x84
 8008668:	021b      	lsls	r3, r3, #8
 800866a:	400b      	ands	r3, r1
 800866c:	431a      	orrs	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68d9      	ldr	r1, [r3, #12]
 8008672:	2380      	movs	r3, #128	@ 0x80
 8008674:	011b      	lsls	r3, r3, #4
 8008676:	400b      	ands	r3, r1
 8008678:	431a      	orrs	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	2102      	movs	r1, #2
 8008680:	400b      	ands	r3, r1
 8008682:	431a      	orrs	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	2101      	movs	r1, #1
 800868a:	400b      	ands	r3, r1
 800868c:	431a      	orrs	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6999      	ldr	r1, [r3, #24]
 8008692:	2380      	movs	r3, #128	@ 0x80
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	400b      	ands	r3, r1
 8008698:	431a      	orrs	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	2138      	movs	r1, #56	@ 0x38
 80086a0:	400b      	ands	r3, r1
 80086a2:	431a      	orrs	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a1b      	ldr	r3, [r3, #32]
 80086a8:	2180      	movs	r1, #128	@ 0x80
 80086aa:	400b      	ands	r3, r1
 80086ac:	431a      	orrs	r2, r3
 80086ae:	0011      	movs	r1, r2
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80086b4:	2380      	movs	r3, #128	@ 0x80
 80086b6:	019b      	lsls	r3, r3, #6
 80086b8:	401a      	ands	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	0c1b      	lsrs	r3, r3, #16
 80086c8:	2204      	movs	r2, #4
 80086ca:	4013      	ands	r3, r2
 80086cc:	0019      	movs	r1, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d2:	2210      	movs	r2, #16
 80086d4:	401a      	ands	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	430a      	orrs	r2, r1
 80086dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	69da      	ldr	r2, [r3, #28]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4907      	ldr	r1, [pc, #28]	@ (8008708 <HAL_SPI_Init+0x124>)
 80086ea:	400a      	ands	r2, r1
 80086ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2251      	movs	r2, #81	@ 0x51
 80086f8:	2101      	movs	r1, #1
 80086fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	0018      	movs	r0, r3
 8008700:	46bd      	mov	sp, r7
 8008702:	b002      	add	sp, #8
 8008704:	bd80      	pop	{r7, pc}
 8008706:	46c0      	nop			@ (mov r8, r8)
 8008708:	fffff7ff 	.word	0xfffff7ff

0800870c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d101      	bne.n	800871e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e032      	b.n	8008784 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2239      	movs	r2, #57	@ 0x39
 8008722:	5c9b      	ldrb	r3, [r3, r2]
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d107      	bne.n	800873a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2238      	movs	r2, #56	@ 0x38
 800872e:	2100      	movs	r1, #0
 8008730:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	0018      	movs	r0, r3
 8008736:	f7f8 fdf5 	bl	8001324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2239      	movs	r2, #57	@ 0x39
 800873e:	2102      	movs	r1, #2
 8008740:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	3304      	adds	r3, #4
 800874a:	0019      	movs	r1, r3
 800874c:	0010      	movs	r0, r2
 800874e:	f000 fa01 	bl	8008b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	223e      	movs	r2, #62	@ 0x3e
 8008756:	2101      	movs	r1, #1
 8008758:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	223a      	movs	r2, #58	@ 0x3a
 800875e:	2101      	movs	r1, #1
 8008760:	5499      	strb	r1, [r3, r2]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	223b      	movs	r2, #59	@ 0x3b
 8008766:	2101      	movs	r1, #1
 8008768:	5499      	strb	r1, [r3, r2]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	223c      	movs	r2, #60	@ 0x3c
 800876e:	2101      	movs	r1, #1
 8008770:	5499      	strb	r1, [r3, r2]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	223d      	movs	r2, #61	@ 0x3d
 8008776:	2101      	movs	r1, #1
 8008778:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2239      	movs	r2, #57	@ 0x39
 800877e:	2101      	movs	r1, #1
 8008780:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	0018      	movs	r0, r3
 8008786:	46bd      	mov	sp, r7
 8008788:	b002      	add	sp, #8
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	2202      	movs	r2, #2
 800879c:	4013      	ands	r3, r2
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d124      	bne.n	80087ec <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	2202      	movs	r2, #2
 80087aa:	4013      	ands	r3, r2
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d11d      	bne.n	80087ec <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2203      	movs	r2, #3
 80087b6:	4252      	negs	r2, r2
 80087b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	2203      	movs	r2, #3
 80087c8:	4013      	ands	r3, r2
 80087ca:	d004      	beq.n	80087d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	0018      	movs	r0, r3
 80087d0:	f000 f9a8 	bl	8008b24 <HAL_TIM_IC_CaptureCallback>
 80087d4:	e007      	b.n	80087e6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	0018      	movs	r0, r3
 80087da:	f000 f99b 	bl	8008b14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	0018      	movs	r0, r3
 80087e2:	f000 f9a7 	bl	8008b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	2204      	movs	r2, #4
 80087f4:	4013      	ands	r3, r2
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	d125      	bne.n	8008846 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	2204      	movs	r2, #4
 8008802:	4013      	ands	r3, r2
 8008804:	2b04      	cmp	r3, #4
 8008806:	d11e      	bne.n	8008846 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2205      	movs	r2, #5
 800880e:	4252      	negs	r2, r2
 8008810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2202      	movs	r2, #2
 8008816:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	699a      	ldr	r2, [r3, #24]
 800881e:	23c0      	movs	r3, #192	@ 0xc0
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4013      	ands	r3, r2
 8008824:	d004      	beq.n	8008830 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	0018      	movs	r0, r3
 800882a:	f000 f97b 	bl	8008b24 <HAL_TIM_IC_CaptureCallback>
 800882e:	e007      	b.n	8008840 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	0018      	movs	r0, r3
 8008834:	f000 f96e 	bl	8008b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	0018      	movs	r0, r3
 800883c:	f000 f97a 	bl	8008b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	2208      	movs	r2, #8
 800884e:	4013      	ands	r3, r2
 8008850:	2b08      	cmp	r3, #8
 8008852:	d124      	bne.n	800889e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	2208      	movs	r2, #8
 800885c:	4013      	ands	r3, r2
 800885e:	2b08      	cmp	r3, #8
 8008860:	d11d      	bne.n	800889e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2209      	movs	r2, #9
 8008868:	4252      	negs	r2, r2
 800886a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2204      	movs	r2, #4
 8008870:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	2203      	movs	r2, #3
 800887a:	4013      	ands	r3, r2
 800887c:	d004      	beq.n	8008888 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	0018      	movs	r0, r3
 8008882:	f000 f94f 	bl	8008b24 <HAL_TIM_IC_CaptureCallback>
 8008886:	e007      	b.n	8008898 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	0018      	movs	r0, r3
 800888c:	f000 f942 	bl	8008b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	0018      	movs	r0, r3
 8008894:	f000 f94e 	bl	8008b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	2210      	movs	r2, #16
 80088a6:	4013      	ands	r3, r2
 80088a8:	2b10      	cmp	r3, #16
 80088aa:	d125      	bne.n	80088f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	2210      	movs	r2, #16
 80088b4:	4013      	ands	r3, r2
 80088b6:	2b10      	cmp	r3, #16
 80088b8:	d11e      	bne.n	80088f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2211      	movs	r2, #17
 80088c0:	4252      	negs	r2, r2
 80088c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2208      	movs	r2, #8
 80088c8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	69da      	ldr	r2, [r3, #28]
 80088d0:	23c0      	movs	r3, #192	@ 0xc0
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4013      	ands	r3, r2
 80088d6:	d004      	beq.n	80088e2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	0018      	movs	r0, r3
 80088dc:	f000 f922 	bl	8008b24 <HAL_TIM_IC_CaptureCallback>
 80088e0:	e007      	b.n	80088f2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	0018      	movs	r0, r3
 80088e6:	f000 f915 	bl	8008b14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	0018      	movs	r0, r3
 80088ee:	f000 f921 	bl	8008b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	2201      	movs	r2, #1
 8008900:	4013      	ands	r3, r2
 8008902:	2b01      	cmp	r3, #1
 8008904:	d10f      	bne.n	8008926 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	2201      	movs	r2, #1
 800890e:	4013      	ands	r3, r2
 8008910:	2b01      	cmp	r3, #1
 8008912:	d108      	bne.n	8008926 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2202      	movs	r2, #2
 800891a:	4252      	negs	r2, r2
 800891c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	0018      	movs	r0, r3
 8008922:	f000 f8ef 	bl	8008b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	2240      	movs	r2, #64	@ 0x40
 800892e:	4013      	ands	r3, r2
 8008930:	2b40      	cmp	r3, #64	@ 0x40
 8008932:	d10f      	bne.n	8008954 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	2240      	movs	r2, #64	@ 0x40
 800893c:	4013      	ands	r3, r2
 800893e:	2b40      	cmp	r3, #64	@ 0x40
 8008940:	d108      	bne.n	8008954 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2241      	movs	r2, #65	@ 0x41
 8008948:	4252      	negs	r2, r2
 800894a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	0018      	movs	r0, r3
 8008950:	f000 f8f8 	bl	8008b44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008954:	46c0      	nop			@ (mov r8, r8)
 8008956:	46bd      	mov	sp, r7
 8008958:	b002      	add	sp, #8
 800895a:	bd80      	pop	{r7, pc}

0800895c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008966:	230f      	movs	r3, #15
 8008968:	18fb      	adds	r3, r7, r3
 800896a:	2200      	movs	r2, #0
 800896c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2238      	movs	r2, #56	@ 0x38
 8008972:	5c9b      	ldrb	r3, [r3, r2]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d101      	bne.n	800897c <HAL_TIM_ConfigClockSource+0x20>
 8008978:	2302      	movs	r3, #2
 800897a:	e0bc      	b.n	8008af6 <HAL_TIM_ConfigClockSource+0x19a>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2238      	movs	r2, #56	@ 0x38
 8008980:	2101      	movs	r1, #1
 8008982:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2239      	movs	r2, #57	@ 0x39
 8008988:	2102      	movs	r1, #2
 800898a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	2277      	movs	r2, #119	@ 0x77
 8008998:	4393      	bics	r3, r2
 800899a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	4a58      	ldr	r2, [pc, #352]	@ (8008b00 <HAL_TIM_ConfigClockSource+0x1a4>)
 80089a0:	4013      	ands	r3, r2
 80089a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2280      	movs	r2, #128	@ 0x80
 80089b2:	0192      	lsls	r2, r2, #6
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d040      	beq.n	8008a3a <HAL_TIM_ConfigClockSource+0xde>
 80089b8:	2280      	movs	r2, #128	@ 0x80
 80089ba:	0192      	lsls	r2, r2, #6
 80089bc:	4293      	cmp	r3, r2
 80089be:	d900      	bls.n	80089c2 <HAL_TIM_ConfigClockSource+0x66>
 80089c0:	e088      	b.n	8008ad4 <HAL_TIM_ConfigClockSource+0x178>
 80089c2:	2280      	movs	r2, #128	@ 0x80
 80089c4:	0152      	lsls	r2, r2, #5
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d100      	bne.n	80089cc <HAL_TIM_ConfigClockSource+0x70>
 80089ca:	e088      	b.n	8008ade <HAL_TIM_ConfigClockSource+0x182>
 80089cc:	2280      	movs	r2, #128	@ 0x80
 80089ce:	0152      	lsls	r2, r2, #5
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d900      	bls.n	80089d6 <HAL_TIM_ConfigClockSource+0x7a>
 80089d4:	e07e      	b.n	8008ad4 <HAL_TIM_ConfigClockSource+0x178>
 80089d6:	2b70      	cmp	r3, #112	@ 0x70
 80089d8:	d018      	beq.n	8008a0c <HAL_TIM_ConfigClockSource+0xb0>
 80089da:	d900      	bls.n	80089de <HAL_TIM_ConfigClockSource+0x82>
 80089dc:	e07a      	b.n	8008ad4 <HAL_TIM_ConfigClockSource+0x178>
 80089de:	2b60      	cmp	r3, #96	@ 0x60
 80089e0:	d04f      	beq.n	8008a82 <HAL_TIM_ConfigClockSource+0x126>
 80089e2:	d900      	bls.n	80089e6 <HAL_TIM_ConfigClockSource+0x8a>
 80089e4:	e076      	b.n	8008ad4 <HAL_TIM_ConfigClockSource+0x178>
 80089e6:	2b50      	cmp	r3, #80	@ 0x50
 80089e8:	d03b      	beq.n	8008a62 <HAL_TIM_ConfigClockSource+0x106>
 80089ea:	d900      	bls.n	80089ee <HAL_TIM_ConfigClockSource+0x92>
 80089ec:	e072      	b.n	8008ad4 <HAL_TIM_ConfigClockSource+0x178>
 80089ee:	2b40      	cmp	r3, #64	@ 0x40
 80089f0:	d057      	beq.n	8008aa2 <HAL_TIM_ConfigClockSource+0x146>
 80089f2:	d900      	bls.n	80089f6 <HAL_TIM_ConfigClockSource+0x9a>
 80089f4:	e06e      	b.n	8008ad4 <HAL_TIM_ConfigClockSource+0x178>
 80089f6:	2b30      	cmp	r3, #48	@ 0x30
 80089f8:	d063      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x166>
 80089fa:	d86b      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x178>
 80089fc:	2b20      	cmp	r3, #32
 80089fe:	d060      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x166>
 8008a00:	d868      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x178>
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d05d      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x166>
 8008a06:	2b10      	cmp	r3, #16
 8008a08:	d05b      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x166>
 8008a0a:	e063      	b.n	8008ad4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a1c:	f000 f972 	bl	8008d04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2277      	movs	r2, #119	@ 0x77
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	609a      	str	r2, [r3, #8]
      break;
 8008a38:	e052      	b.n	8008ae0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a4a:	f000 f95b 	bl	8008d04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	689a      	ldr	r2, [r3, #8]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2180      	movs	r1, #128	@ 0x80
 8008a5a:	01c9      	lsls	r1, r1, #7
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	609a      	str	r2, [r3, #8]
      break;
 8008a60:	e03e      	b.n	8008ae0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a6e:	001a      	movs	r2, r3
 8008a70:	f000 f8ce 	bl	8008c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2150      	movs	r1, #80	@ 0x50
 8008a7a:	0018      	movs	r0, r3
 8008a7c:	f000 f928 	bl	8008cd0 <TIM_ITRx_SetConfig>
      break;
 8008a80:	e02e      	b.n	8008ae0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a8e:	001a      	movs	r2, r3
 8008a90:	f000 f8ec 	bl	8008c6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2160      	movs	r1, #96	@ 0x60
 8008a9a:	0018      	movs	r0, r3
 8008a9c:	f000 f918 	bl	8008cd0 <TIM_ITRx_SetConfig>
      break;
 8008aa0:	e01e      	b.n	8008ae0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aae:	001a      	movs	r2, r3
 8008ab0:	f000 f8ae 	bl	8008c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2140      	movs	r1, #64	@ 0x40
 8008aba:	0018      	movs	r0, r3
 8008abc:	f000 f908 	bl	8008cd0 <TIM_ITRx_SetConfig>
      break;
 8008ac0:	e00e      	b.n	8008ae0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	0019      	movs	r1, r3
 8008acc:	0010      	movs	r0, r2
 8008ace:	f000 f8ff 	bl	8008cd0 <TIM_ITRx_SetConfig>
      break;
 8008ad2:	e005      	b.n	8008ae0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8008ad4:	230f      	movs	r3, #15
 8008ad6:	18fb      	adds	r3, r7, r3
 8008ad8:	2201      	movs	r2, #1
 8008ada:	701a      	strb	r2, [r3, #0]
      break;
 8008adc:	e000      	b.n	8008ae0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8008ade:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2239      	movs	r2, #57	@ 0x39
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2238      	movs	r2, #56	@ 0x38
 8008aec:	2100      	movs	r1, #0
 8008aee:	5499      	strb	r1, [r3, r2]

  return status;
 8008af0:	230f      	movs	r3, #15
 8008af2:	18fb      	adds	r3, r7, r3
 8008af4:	781b      	ldrb	r3, [r3, #0]
}
 8008af6:	0018      	movs	r0, r3
 8008af8:	46bd      	mov	sp, r7
 8008afa:	b004      	add	sp, #16
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	46c0      	nop			@ (mov r8, r8)
 8008b00:	ffff00ff 	.word	0xffff00ff

08008b04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008b0c:	46c0      	nop			@ (mov r8, r8)
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	b002      	add	sp, #8
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b1c:	46c0      	nop			@ (mov r8, r8)
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	b002      	add	sp, #8
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b2c:	46c0      	nop			@ (mov r8, r8)
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	b002      	add	sp, #8
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b3c:	46c0      	nop			@ (mov r8, r8)
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	b002      	add	sp, #8
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b4c:	46c0      	nop			@ (mov r8, r8)
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	b002      	add	sp, #8
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	2380      	movs	r3, #128	@ 0x80
 8008b68:	05db      	lsls	r3, r3, #23
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d00b      	beq.n	8008b86 <TIM_Base_SetConfig+0x32>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a23      	ldr	r2, [pc, #140]	@ (8008c00 <TIM_Base_SetConfig+0xac>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d007      	beq.n	8008b86 <TIM_Base_SetConfig+0x32>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a22      	ldr	r2, [pc, #136]	@ (8008c04 <TIM_Base_SetConfig+0xb0>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d003      	beq.n	8008b86 <TIM_Base_SetConfig+0x32>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a21      	ldr	r2, [pc, #132]	@ (8008c08 <TIM_Base_SetConfig+0xb4>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d108      	bne.n	8008b98 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2270      	movs	r2, #112	@ 0x70
 8008b8a:	4393      	bics	r3, r2
 8008b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	2380      	movs	r3, #128	@ 0x80
 8008b9c:	05db      	lsls	r3, r3, #23
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d00b      	beq.n	8008bba <TIM_Base_SetConfig+0x66>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a16      	ldr	r2, [pc, #88]	@ (8008c00 <TIM_Base_SetConfig+0xac>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d007      	beq.n	8008bba <TIM_Base_SetConfig+0x66>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a15      	ldr	r2, [pc, #84]	@ (8008c04 <TIM_Base_SetConfig+0xb0>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d003      	beq.n	8008bba <TIM_Base_SetConfig+0x66>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a14      	ldr	r2, [pc, #80]	@ (8008c08 <TIM_Base_SetConfig+0xb4>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d108      	bne.n	8008bcc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	4a13      	ldr	r2, [pc, #76]	@ (8008c0c <TIM_Base_SetConfig+0xb8>)
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2280      	movs	r2, #128	@ 0x80
 8008bd0:	4393      	bics	r3, r2
 8008bd2:	001a      	movs	r2, r3
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	689a      	ldr	r2, [r3, #8]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	615a      	str	r2, [r3, #20]
}
 8008bf8:	46c0      	nop			@ (mov r8, r8)
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	b004      	add	sp, #16
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	40000400 	.word	0x40000400
 8008c04:	40010800 	.word	0x40010800
 8008c08:	40011400 	.word	0x40011400
 8008c0c:	fffffcff 	.word	0xfffffcff

08008c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	2201      	movs	r2, #1
 8008c28:	4393      	bics	r3, r2
 8008c2a:	001a      	movs	r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	22f0      	movs	r2, #240	@ 0xf0
 8008c3a:	4393      	bics	r3, r2
 8008c3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	011b      	lsls	r3, r3, #4
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	220a      	movs	r2, #10
 8008c4c:	4393      	bics	r3, r2
 8008c4e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c50:	697a      	ldr	r2, [r7, #20]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	621a      	str	r2, [r3, #32]
}
 8008c64:	46c0      	nop			@ (mov r8, r8)
 8008c66:	46bd      	mov	sp, r7
 8008c68:	b006      	add	sp, #24
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	2210      	movs	r2, #16
 8008c7e:	4393      	bics	r3, r2
 8008c80:	001a      	movs	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	4a0d      	ldr	r2, [pc, #52]	@ (8008ccc <TIM_TI2_ConfigInputStage+0x60>)
 8008c96:	4013      	ands	r3, r2
 8008c98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	031b      	lsls	r3, r3, #12
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	22a0      	movs	r2, #160	@ 0xa0
 8008ca8:	4393      	bics	r3, r2
 8008caa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	011b      	lsls	r3, r3, #4
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	621a      	str	r2, [r3, #32]
}
 8008cc2:	46c0      	nop			@ (mov r8, r8)
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	b006      	add	sp, #24
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	46c0      	nop			@ (mov r8, r8)
 8008ccc:	ffff0fff 	.word	0xffff0fff

08008cd0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2270      	movs	r2, #112	@ 0x70
 8008ce4:	4393      	bics	r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	2207      	movs	r2, #7
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	609a      	str	r2, [r3, #8]
}
 8008cfa:	46c0      	nop			@ (mov r8, r8)
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	b004      	add	sp, #16
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
 8008d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	4a09      	ldr	r2, [pc, #36]	@ (8008d40 <TIM_ETR_SetConfig+0x3c>)
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	021a      	lsls	r2, r3, #8
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	431a      	orrs	r2, r3
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	697a      	ldr	r2, [r7, #20]
 8008d36:	609a      	str	r2, [r3, #8]
}
 8008d38:	46c0      	nop			@ (mov r8, r8)
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	b006      	add	sp, #24
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	ffff00ff 	.word	0xffff00ff

08008d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2238      	movs	r2, #56	@ 0x38
 8008d52:	5c9b      	ldrb	r3, [r3, r2]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d101      	bne.n	8008d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d58:	2302      	movs	r3, #2
 8008d5a:	e047      	b.n	8008dec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2238      	movs	r2, #56	@ 0x38
 8008d60:	2101      	movs	r1, #1
 8008d62:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2239      	movs	r2, #57	@ 0x39
 8008d68:	2102      	movs	r1, #2
 8008d6a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2270      	movs	r2, #112	@ 0x70
 8008d80:	4393      	bics	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	2380      	movs	r3, #128	@ 0x80
 8008d9c:	05db      	lsls	r3, r3, #23
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d00e      	beq.n	8008dc0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a13      	ldr	r2, [pc, #76]	@ (8008df4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d009      	beq.n	8008dc0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a11      	ldr	r2, [pc, #68]	@ (8008df8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d004      	beq.n	8008dc0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a10      	ldr	r2, [pc, #64]	@ (8008dfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d10c      	bne.n	8008dda <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	2280      	movs	r2, #128	@ 0x80
 8008dc4:	4393      	bics	r3, r2
 8008dc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2239      	movs	r2, #57	@ 0x39
 8008dde:	2101      	movs	r1, #1
 8008de0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2238      	movs	r2, #56	@ 0x38
 8008de6:	2100      	movs	r1, #0
 8008de8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	0018      	movs	r0, r3
 8008dee:	46bd      	mov	sp, r7
 8008df0:	b004      	add	sp, #16
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	40000400 	.word	0x40000400
 8008df8:	40010800 	.word	0x40010800
 8008dfc:	40011400 	.word	0x40011400

08008e00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2244      	movs	r2, #68	@ 0x44
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008e10:	4b05      	ldr	r3, [pc, #20]	@ (8008e28 <USB_EnableGlobalInt+0x28>)
 8008e12:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	b299      	uxth	r1, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2240      	movs	r2, #64	@ 0x40
 8008e1c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	0018      	movs	r0, r3
 8008e22:	46bd      	mov	sp, r7
 8008e24:	b004      	add	sp, #16
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	0000bf80 	.word	0x0000bf80

08008e2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008e34:	4b09      	ldr	r3, [pc, #36]	@ (8008e5c <USB_DisableGlobalInt+0x30>)
 8008e36:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2240      	movs	r2, #64	@ 0x40
 8008e3c:	5a9b      	ldrh	r3, [r3, r2]
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	b292      	uxth	r2, r2
 8008e44:	43d2      	mvns	r2, r2
 8008e46:	b292      	uxth	r2, r2
 8008e48:	4013      	ands	r3, r2
 8008e4a:	b299      	uxth	r1, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2240      	movs	r2, #64	@ 0x40
 8008e50:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	0018      	movs	r0, r3
 8008e56:	46bd      	mov	sp, r7
 8008e58:	b004      	add	sp, #16
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	0000bf80 	.word	0x0000bf80

08008e60 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008e60:	b084      	sub	sp, #16
 8008e62:	b590      	push	{r4, r7, lr}
 8008e64:	b083      	sub	sp, #12
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	2004      	movs	r0, #4
 8008e6c:	2410      	movs	r4, #16
 8008e6e:	1900      	adds	r0, r0, r4
 8008e70:	2408      	movs	r4, #8
 8008e72:	46a4      	mov	ip, r4
 8008e74:	44bc      	add	ip, r7
 8008e76:	4460      	add	r0, ip
 8008e78:	6001      	str	r1, [r0, #0]
 8008e7a:	6042      	str	r2, [r0, #4]
 8008e7c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2240      	movs	r2, #64	@ 0x40
 8008e82:	2101      	movs	r1, #1
 8008e84:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2240      	movs	r2, #64	@ 0x40
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2244      	movs	r2, #68	@ 0x44
 8008e92:	2100      	movs	r1, #0
 8008e94:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2250      	movs	r2, #80	@ 0x50
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	b003      	add	sp, #12
 8008ea6:	bc90      	pop	{r4, r7}
 8008ea8:	bc08      	pop	{r3}
 8008eaa:	b004      	add	sp, #16
 8008eac:	4718      	bx	r3
	...

08008eb0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b09c      	sub	sp, #112	@ 0x70
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008eba:	236f      	movs	r3, #111	@ 0x6f
 8008ebc:	18fb      	adds	r3, r7, r3
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	18d3      	adds	r3, r2, r3
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	236c      	movs	r3, #108	@ 0x6c
 8008ed2:	18fb      	adds	r3, r7, r3
 8008ed4:	49a3      	ldr	r1, [pc, #652]	@ (8009164 <USB_ActivateEndpoint+0x2b4>)
 8008ed6:	400a      	ands	r2, r1
 8008ed8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	78db      	ldrb	r3, [r3, #3]
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d017      	beq.n	8008f12 <USB_ActivateEndpoint+0x62>
 8008ee2:	dc28      	bgt.n	8008f36 <USB_ActivateEndpoint+0x86>
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d00e      	beq.n	8008f06 <USB_ActivateEndpoint+0x56>
 8008ee8:	dc25      	bgt.n	8008f36 <USB_ActivateEndpoint+0x86>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d002      	beq.n	8008ef4 <USB_ActivateEndpoint+0x44>
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d018      	beq.n	8008f24 <USB_ActivateEndpoint+0x74>
 8008ef2:	e020      	b.n	8008f36 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008ef4:	226c      	movs	r2, #108	@ 0x6c
 8008ef6:	18bb      	adds	r3, r7, r2
 8008ef8:	18ba      	adds	r2, r7, r2
 8008efa:	8812      	ldrh	r2, [r2, #0]
 8008efc:	2180      	movs	r1, #128	@ 0x80
 8008efe:	0089      	lsls	r1, r1, #2
 8008f00:	430a      	orrs	r2, r1
 8008f02:	801a      	strh	r2, [r3, #0]
      break;
 8008f04:	e01c      	b.n	8008f40 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8008f06:	226c      	movs	r2, #108	@ 0x6c
 8008f08:	18bb      	adds	r3, r7, r2
 8008f0a:	18ba      	adds	r2, r7, r2
 8008f0c:	8812      	ldrh	r2, [r2, #0]
 8008f0e:	801a      	strh	r2, [r3, #0]
      break;
 8008f10:	e016      	b.n	8008f40 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008f12:	226c      	movs	r2, #108	@ 0x6c
 8008f14:	18bb      	adds	r3, r7, r2
 8008f16:	18ba      	adds	r2, r7, r2
 8008f18:	8812      	ldrh	r2, [r2, #0]
 8008f1a:	21c0      	movs	r1, #192	@ 0xc0
 8008f1c:	00c9      	lsls	r1, r1, #3
 8008f1e:	430a      	orrs	r2, r1
 8008f20:	801a      	strh	r2, [r3, #0]
      break;
 8008f22:	e00d      	b.n	8008f40 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008f24:	226c      	movs	r2, #108	@ 0x6c
 8008f26:	18bb      	adds	r3, r7, r2
 8008f28:	18ba      	adds	r2, r7, r2
 8008f2a:	8812      	ldrh	r2, [r2, #0]
 8008f2c:	2180      	movs	r1, #128	@ 0x80
 8008f2e:	00c9      	lsls	r1, r1, #3
 8008f30:	430a      	orrs	r2, r1
 8008f32:	801a      	strh	r2, [r3, #0]
      break;
 8008f34:	e004      	b.n	8008f40 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8008f36:	236f      	movs	r3, #111	@ 0x6f
 8008f38:	18fb      	adds	r3, r7, r3
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	701a      	strb	r2, [r3, #0]
      break;
 8008f3e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	18d3      	adds	r3, r2, r3
 8008f4a:	226c      	movs	r2, #108	@ 0x6c
 8008f4c:	18ba      	adds	r2, r7, r2
 8008f4e:	8812      	ldrh	r2, [r2, #0]
 8008f50:	4985      	ldr	r1, [pc, #532]	@ (8009168 <USB_ActivateEndpoint+0x2b8>)
 8008f52:	430a      	orrs	r2, r1
 8008f54:	b292      	uxth	r2, r2
 8008f56:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	18d3      	adds	r3, r2, r3
 8008f62:	881b      	ldrh	r3, [r3, #0]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	b21b      	sxth	r3, r3
 8008f68:	4a80      	ldr	r2, [pc, #512]	@ (800916c <USB_ActivateEndpoint+0x2bc>)
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	b21a      	sxth	r2, r3
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	b21b      	sxth	r3, r3
 8008f74:	4313      	orrs	r3, r2
 8008f76:	b21a      	sxth	r2, r3
 8008f78:	2166      	movs	r1, #102	@ 0x66
 8008f7a:	187b      	adds	r3, r7, r1
 8008f7c:	801a      	strh	r2, [r3, #0]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	18d3      	adds	r3, r2, r3
 8008f88:	187a      	adds	r2, r7, r1
 8008f8a:	8812      	ldrh	r2, [r2, #0]
 8008f8c:	4976      	ldr	r1, [pc, #472]	@ (8009168 <USB_ActivateEndpoint+0x2b8>)
 8008f8e:	430a      	orrs	r2, r1
 8008f90:	b292      	uxth	r2, r2
 8008f92:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	7b1b      	ldrb	r3, [r3, #12]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d000      	beq.n	8008f9e <USB_ActivateEndpoint+0xee>
 8008f9c:	e178      	b.n	8009290 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	785b      	ldrb	r3, [r3, #1]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d100      	bne.n	8008fa8 <USB_ActivateEndpoint+0xf8>
 8008fa6:	e07a      	b.n	800909e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	61bb      	str	r3, [r7, #24]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2250      	movs	r2, #80	@ 0x50
 8008fb0:	5a9b      	ldrh	r3, [r3, r2]
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	001a      	movs	r2, r3
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	189b      	adds	r3, r3, r2
 8008fba:	61bb      	str	r3, [r7, #24]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	00da      	lsls	r2, r3, #3
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	18d3      	adds	r3, r2, r3
 8008fc6:	2280      	movs	r2, #128	@ 0x80
 8008fc8:	00d2      	lsls	r2, r2, #3
 8008fca:	4694      	mov	ip, r2
 8008fcc:	4463      	add	r3, ip
 8008fce:	617b      	str	r3, [r7, #20]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	88db      	ldrh	r3, [r3, #6]
 8008fd4:	085b      	lsrs	r3, r3, #1
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	18db      	adds	r3, r3, r3
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	18d2      	adds	r2, r2, r3
 8008fea:	2112      	movs	r1, #18
 8008fec:	187b      	adds	r3, r7, r1
 8008fee:	8812      	ldrh	r2, [r2, #0]
 8008ff0:	801a      	strh	r2, [r3, #0]
 8008ff2:	187b      	adds	r3, r7, r1
 8008ff4:	881b      	ldrh	r3, [r3, #0]
 8008ff6:	2240      	movs	r2, #64	@ 0x40
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	d016      	beq.n	800902a <USB_ActivateEndpoint+0x17a>
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	18d3      	adds	r3, r2, r3
 8009006:	881b      	ldrh	r3, [r3, #0]
 8009008:	b29a      	uxth	r2, r3
 800900a:	2010      	movs	r0, #16
 800900c:	183b      	adds	r3, r7, r0
 800900e:	4957      	ldr	r1, [pc, #348]	@ (800916c <USB_ActivateEndpoint+0x2bc>)
 8009010:	400a      	ands	r2, r1
 8009012:	801a      	strh	r2, [r3, #0]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	18d3      	adds	r3, r2, r3
 800901e:	183a      	adds	r2, r7, r0
 8009020:	8812      	ldrh	r2, [r2, #0]
 8009022:	4953      	ldr	r1, [pc, #332]	@ (8009170 <USB_ActivateEndpoint+0x2c0>)
 8009024:	430a      	orrs	r2, r1
 8009026:	b292      	uxth	r2, r2
 8009028:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	78db      	ldrb	r3, [r3, #3]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d01d      	beq.n	800906e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	18d3      	adds	r3, r2, r3
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	b29a      	uxth	r2, r3
 8009040:	200c      	movs	r0, #12
 8009042:	183b      	adds	r3, r7, r0
 8009044:	494b      	ldr	r1, [pc, #300]	@ (8009174 <USB_ActivateEndpoint+0x2c4>)
 8009046:	400a      	ands	r2, r1
 8009048:	801a      	strh	r2, [r3, #0]
 800904a:	183b      	adds	r3, r7, r0
 800904c:	183a      	adds	r2, r7, r0
 800904e:	8812      	ldrh	r2, [r2, #0]
 8009050:	2120      	movs	r1, #32
 8009052:	404a      	eors	r2, r1
 8009054:	801a      	strh	r2, [r3, #0]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	18d3      	adds	r3, r2, r3
 8009060:	183a      	adds	r2, r7, r0
 8009062:	8812      	ldrh	r2, [r2, #0]
 8009064:	4940      	ldr	r1, [pc, #256]	@ (8009168 <USB_ActivateEndpoint+0x2b8>)
 8009066:	430a      	orrs	r2, r1
 8009068:	b292      	uxth	r2, r2
 800906a:	801a      	strh	r2, [r3, #0]
 800906c:	e2b4      	b.n	80095d8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	18d3      	adds	r3, r2, r3
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	b29a      	uxth	r2, r3
 800907c:	200e      	movs	r0, #14
 800907e:	183b      	adds	r3, r7, r0
 8009080:	493c      	ldr	r1, [pc, #240]	@ (8009174 <USB_ActivateEndpoint+0x2c4>)
 8009082:	400a      	ands	r2, r1
 8009084:	801a      	strh	r2, [r3, #0]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	18d3      	adds	r3, r2, r3
 8009090:	183a      	adds	r2, r7, r0
 8009092:	8812      	ldrh	r2, [r2, #0]
 8009094:	4934      	ldr	r1, [pc, #208]	@ (8009168 <USB_ActivateEndpoint+0x2b8>)
 8009096:	430a      	orrs	r2, r1
 8009098:	b292      	uxth	r2, r2
 800909a:	801a      	strh	r2, [r3, #0]
 800909c:	e29c      	b.n	80095d8 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2250      	movs	r2, #80	@ 0x50
 80090a6:	5a9b      	ldrh	r3, [r3, r2]
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	001a      	movs	r2, r3
 80090ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ae:	189b      	adds	r3, r3, r2
 80090b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	00da      	lsls	r2, r3, #3
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ba:	18d3      	adds	r3, r2, r3
 80090bc:	4a2e      	ldr	r2, [pc, #184]	@ (8009178 <USB_ActivateEndpoint+0x2c8>)
 80090be:	4694      	mov	ip, r2
 80090c0:	4463      	add	r3, ip
 80090c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	88db      	ldrh	r3, [r3, #6]
 80090c8:	085b      	lsrs	r3, r3, #1
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	18db      	adds	r3, r3, r3
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090d2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2250      	movs	r2, #80	@ 0x50
 80090dc:	5a9b      	ldrh	r3, [r3, r2]
 80090de:	b29b      	uxth	r3, r3
 80090e0:	001a      	movs	r2, r3
 80090e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e4:	189b      	adds	r3, r3, r2
 80090e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	00da      	lsls	r2, r3, #3
 80090ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f0:	18d3      	adds	r3, r2, r3
 80090f2:	4a22      	ldr	r2, [pc, #136]	@ (800917c <USB_ActivateEndpoint+0x2cc>)
 80090f4:	4694      	mov	ip, r2
 80090f6:	4463      	add	r3, ip
 80090f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80090fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fc:	881b      	ldrh	r3, [r3, #0]
 80090fe:	b29b      	uxth	r3, r3
 8009100:	059b      	lsls	r3, r3, #22
 8009102:	0d9b      	lsrs	r3, r3, #22
 8009104:	b29a      	uxth	r2, r3
 8009106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009108:	801a      	strh	r2, [r3, #0]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009110:	d91a      	bls.n	8009148 <USB_ActivateEndpoint+0x298>
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	095b      	lsrs	r3, r3, #5
 8009118:	66bb      	str	r3, [r7, #104]	@ 0x68
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	221f      	movs	r2, #31
 8009120:	4013      	ands	r3, r2
 8009122:	d102      	bne.n	800912a <USB_ActivateEndpoint+0x27a>
 8009124:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009126:	3b01      	subs	r3, #1
 8009128:	66bb      	str	r3, [r7, #104]	@ 0x68
 800912a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912c:	881b      	ldrh	r3, [r3, #0]
 800912e:	b29a      	uxth	r2, r3
 8009130:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009132:	b29b      	uxth	r3, r3
 8009134:	029b      	lsls	r3, r3, #10
 8009136:	b29b      	uxth	r3, r3
 8009138:	4313      	orrs	r3, r2
 800913a:	b29b      	uxth	r3, r3
 800913c:	4a10      	ldr	r2, [pc, #64]	@ (8009180 <USB_ActivateEndpoint+0x2d0>)
 800913e:	4313      	orrs	r3, r2
 8009140:	b29a      	uxth	r2, r3
 8009142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009144:	801a      	strh	r2, [r3, #0]
 8009146:	e034      	b.n	80091b2 <USB_ActivateEndpoint+0x302>
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d119      	bne.n	8009184 <USB_ActivateEndpoint+0x2d4>
 8009150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	b29b      	uxth	r3, r3
 8009156:	4a0a      	ldr	r2, [pc, #40]	@ (8009180 <USB_ActivateEndpoint+0x2d0>)
 8009158:	4313      	orrs	r3, r2
 800915a:	b29a      	uxth	r2, r3
 800915c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915e:	801a      	strh	r2, [r3, #0]
 8009160:	e027      	b.n	80091b2 <USB_ActivateEndpoint+0x302>
 8009162:	46c0      	nop			@ (mov r8, r8)
 8009164:	ffff898f 	.word	0xffff898f
 8009168:	ffff8080 	.word	0xffff8080
 800916c:	ffff8f8f 	.word	0xffff8f8f
 8009170:	ffff80c0 	.word	0xffff80c0
 8009174:	ffff8fbf 	.word	0xffff8fbf
 8009178:	00000404 	.word	0x00000404
 800917c:	00000406 	.word	0x00000406
 8009180:	ffff8000 	.word	0xffff8000
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	085b      	lsrs	r3, r3, #1
 800918a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	2201      	movs	r2, #1
 8009192:	4013      	ands	r3, r2
 8009194:	d002      	beq.n	800919c <USB_ActivateEndpoint+0x2ec>
 8009196:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009198:	3301      	adds	r3, #1
 800919a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800919c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	029b      	lsls	r3, r3, #10
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	4313      	orrs	r3, r2
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	18d2      	adds	r2, r2, r3
 80091bc:	2122      	movs	r1, #34	@ 0x22
 80091be:	187b      	adds	r3, r7, r1
 80091c0:	8812      	ldrh	r2, [r2, #0]
 80091c2:	801a      	strh	r2, [r3, #0]
 80091c4:	187b      	adds	r3, r7, r1
 80091c6:	881a      	ldrh	r2, [r3, #0]
 80091c8:	2380      	movs	r3, #128	@ 0x80
 80091ca:	01db      	lsls	r3, r3, #7
 80091cc:	4013      	ands	r3, r2
 80091ce:	d016      	beq.n	80091fe <USB_ActivateEndpoint+0x34e>
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	18d3      	adds	r3, r2, r3
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	b29a      	uxth	r2, r3
 80091de:	2020      	movs	r0, #32
 80091e0:	183b      	adds	r3, r7, r0
 80091e2:	49dd      	ldr	r1, [pc, #884]	@ (8009558 <USB_ActivateEndpoint+0x6a8>)
 80091e4:	400a      	ands	r2, r1
 80091e6:	801a      	strh	r2, [r3, #0]
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	18d3      	adds	r3, r2, r3
 80091f2:	183a      	adds	r2, r7, r0
 80091f4:	8812      	ldrh	r2, [r2, #0]
 80091f6:	49d9      	ldr	r1, [pc, #868]	@ (800955c <USB_ActivateEndpoint+0x6ac>)
 80091f8:	430a      	orrs	r2, r1
 80091fa:	b292      	uxth	r2, r2
 80091fc:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d125      	bne.n	8009252 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	18d3      	adds	r3, r2, r3
 8009210:	881b      	ldrh	r3, [r3, #0]
 8009212:	b29a      	uxth	r2, r3
 8009214:	201c      	movs	r0, #28
 8009216:	183b      	adds	r3, r7, r0
 8009218:	49d1      	ldr	r1, [pc, #836]	@ (8009560 <USB_ActivateEndpoint+0x6b0>)
 800921a:	400a      	ands	r2, r1
 800921c:	801a      	strh	r2, [r3, #0]
 800921e:	183b      	adds	r3, r7, r0
 8009220:	183a      	adds	r2, r7, r0
 8009222:	8812      	ldrh	r2, [r2, #0]
 8009224:	2180      	movs	r1, #128	@ 0x80
 8009226:	0149      	lsls	r1, r1, #5
 8009228:	404a      	eors	r2, r1
 800922a:	801a      	strh	r2, [r3, #0]
 800922c:	183b      	adds	r3, r7, r0
 800922e:	183a      	adds	r2, r7, r0
 8009230:	8812      	ldrh	r2, [r2, #0]
 8009232:	2180      	movs	r1, #128	@ 0x80
 8009234:	0189      	lsls	r1, r1, #6
 8009236:	404a      	eors	r2, r1
 8009238:	801a      	strh	r2, [r3, #0]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	18d3      	adds	r3, r2, r3
 8009244:	183a      	adds	r2, r7, r0
 8009246:	8812      	ldrh	r2, [r2, #0]
 8009248:	49c6      	ldr	r1, [pc, #792]	@ (8009564 <USB_ActivateEndpoint+0x6b4>)
 800924a:	430a      	orrs	r2, r1
 800924c:	b292      	uxth	r2, r2
 800924e:	801a      	strh	r2, [r3, #0]
 8009250:	e1c2      	b.n	80095d8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	18d3      	adds	r3, r2, r3
 800925c:	881b      	ldrh	r3, [r3, #0]
 800925e:	b29a      	uxth	r2, r3
 8009260:	201e      	movs	r0, #30
 8009262:	183b      	adds	r3, r7, r0
 8009264:	49be      	ldr	r1, [pc, #760]	@ (8009560 <USB_ActivateEndpoint+0x6b0>)
 8009266:	400a      	ands	r2, r1
 8009268:	801a      	strh	r2, [r3, #0]
 800926a:	183b      	adds	r3, r7, r0
 800926c:	183a      	adds	r2, r7, r0
 800926e:	8812      	ldrh	r2, [r2, #0]
 8009270:	2180      	movs	r1, #128	@ 0x80
 8009272:	0189      	lsls	r1, r1, #6
 8009274:	404a      	eors	r2, r1
 8009276:	801a      	strh	r2, [r3, #0]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	18d3      	adds	r3, r2, r3
 8009282:	183a      	adds	r2, r7, r0
 8009284:	8812      	ldrh	r2, [r2, #0]
 8009286:	49b7      	ldr	r1, [pc, #732]	@ (8009564 <USB_ActivateEndpoint+0x6b4>)
 8009288:	430a      	orrs	r2, r1
 800928a:	b292      	uxth	r2, r2
 800928c:	801a      	strh	r2, [r3, #0]
 800928e:	e1a3      	b.n	80095d8 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	78db      	ldrb	r3, [r3, #3]
 8009294:	2b02      	cmp	r3, #2
 8009296:	d117      	bne.n	80092c8 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	18d3      	adds	r3, r2, r3
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	2062      	movs	r0, #98	@ 0x62
 80092a8:	183b      	adds	r3, r7, r0
 80092aa:	49ab      	ldr	r1, [pc, #684]	@ (8009558 <USB_ActivateEndpoint+0x6a8>)
 80092ac:	400a      	ands	r2, r1
 80092ae:	801a      	strh	r2, [r3, #0]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	18d3      	adds	r3, r2, r3
 80092ba:	183a      	adds	r2, r7, r0
 80092bc:	8812      	ldrh	r2, [r2, #0]
 80092be:	49aa      	ldr	r1, [pc, #680]	@ (8009568 <USB_ActivateEndpoint+0x6b8>)
 80092c0:	430a      	orrs	r2, r1
 80092c2:	b292      	uxth	r2, r2
 80092c4:	801a      	strh	r2, [r3, #0]
 80092c6:	e016      	b.n	80092f6 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	18d3      	adds	r3, r2, r3
 80092d2:	881b      	ldrh	r3, [r3, #0]
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	2064      	movs	r0, #100	@ 0x64
 80092d8:	183b      	adds	r3, r7, r0
 80092da:	49a4      	ldr	r1, [pc, #656]	@ (800956c <USB_ActivateEndpoint+0x6bc>)
 80092dc:	400a      	ands	r2, r1
 80092de:	801a      	strh	r2, [r3, #0]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	18d3      	adds	r3, r2, r3
 80092ea:	183a      	adds	r2, r7, r0
 80092ec:	8812      	ldrh	r2, [r2, #0]
 80092ee:	499d      	ldr	r1, [pc, #628]	@ (8009564 <USB_ActivateEndpoint+0x6b4>)
 80092f0:	430a      	orrs	r2, r1
 80092f2:	b292      	uxth	r2, r2
 80092f4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2250      	movs	r2, #80	@ 0x50
 80092fe:	5a9b      	ldrh	r3, [r3, r2]
 8009300:	b29b      	uxth	r3, r3
 8009302:	001a      	movs	r2, r3
 8009304:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009306:	189b      	adds	r3, r3, r2
 8009308:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	00da      	lsls	r2, r3, #3
 8009310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009312:	18d3      	adds	r3, r2, r3
 8009314:	2280      	movs	r2, #128	@ 0x80
 8009316:	00d2      	lsls	r2, r2, #3
 8009318:	4694      	mov	ip, r2
 800931a:	4463      	add	r3, ip
 800931c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	891b      	ldrh	r3, [r3, #8]
 8009322:	085b      	lsrs	r3, r3, #1
 8009324:	b29b      	uxth	r3, r3
 8009326:	18db      	adds	r3, r3, r3
 8009328:	b29a      	uxth	r2, r3
 800932a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800932c:	801a      	strh	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	657b      	str	r3, [r7, #84]	@ 0x54
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2250      	movs	r2, #80	@ 0x50
 8009336:	5a9b      	ldrh	r3, [r3, r2]
 8009338:	b29b      	uxth	r3, r3
 800933a:	001a      	movs	r2, r3
 800933c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800933e:	189b      	adds	r3, r3, r2
 8009340:	657b      	str	r3, [r7, #84]	@ 0x54
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	00da      	lsls	r2, r3, #3
 8009348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800934a:	18d3      	adds	r3, r2, r3
 800934c:	4a88      	ldr	r2, [pc, #544]	@ (8009570 <USB_ActivateEndpoint+0x6c0>)
 800934e:	4694      	mov	ip, r2
 8009350:	4463      	add	r3, ip
 8009352:	653b      	str	r3, [r7, #80]	@ 0x50
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	895b      	ldrh	r3, [r3, #10]
 8009358:	085b      	lsrs	r3, r3, #1
 800935a:	b29b      	uxth	r3, r3
 800935c:	18db      	adds	r3, r3, r3
 800935e:	b29a      	uxth	r2, r3
 8009360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009362:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	785b      	ldrb	r3, [r3, #1]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d000      	beq.n	800936e <USB_ActivateEndpoint+0x4be>
 800936c:	e087      	b.n	800947e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	18d2      	adds	r2, r2, r3
 8009378:	2140      	movs	r1, #64	@ 0x40
 800937a:	187b      	adds	r3, r7, r1
 800937c:	8812      	ldrh	r2, [r2, #0]
 800937e:	801a      	strh	r2, [r3, #0]
 8009380:	187b      	adds	r3, r7, r1
 8009382:	881a      	ldrh	r2, [r3, #0]
 8009384:	2380      	movs	r3, #128	@ 0x80
 8009386:	01db      	lsls	r3, r3, #7
 8009388:	4013      	ands	r3, r2
 800938a:	d016      	beq.n	80093ba <USB_ActivateEndpoint+0x50a>
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	18d3      	adds	r3, r2, r3
 8009396:	881b      	ldrh	r3, [r3, #0]
 8009398:	b29a      	uxth	r2, r3
 800939a:	203e      	movs	r0, #62	@ 0x3e
 800939c:	183b      	adds	r3, r7, r0
 800939e:	496e      	ldr	r1, [pc, #440]	@ (8009558 <USB_ActivateEndpoint+0x6a8>)
 80093a0:	400a      	ands	r2, r1
 80093a2:	801a      	strh	r2, [r3, #0]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	18d3      	adds	r3, r2, r3
 80093ae:	183a      	adds	r2, r7, r0
 80093b0:	8812      	ldrh	r2, [r2, #0]
 80093b2:	496a      	ldr	r1, [pc, #424]	@ (800955c <USB_ActivateEndpoint+0x6ac>)
 80093b4:	430a      	orrs	r2, r1
 80093b6:	b292      	uxth	r2, r2
 80093b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	18d2      	adds	r2, r2, r3
 80093c4:	213c      	movs	r1, #60	@ 0x3c
 80093c6:	187b      	adds	r3, r7, r1
 80093c8:	8812      	ldrh	r2, [r2, #0]
 80093ca:	801a      	strh	r2, [r3, #0]
 80093cc:	187b      	adds	r3, r7, r1
 80093ce:	881b      	ldrh	r3, [r3, #0]
 80093d0:	2240      	movs	r2, #64	@ 0x40
 80093d2:	4013      	ands	r3, r2
 80093d4:	d016      	beq.n	8009404 <USB_ActivateEndpoint+0x554>
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	18d3      	adds	r3, r2, r3
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	203a      	movs	r0, #58	@ 0x3a
 80093e6:	183b      	adds	r3, r7, r0
 80093e8:	495b      	ldr	r1, [pc, #364]	@ (8009558 <USB_ActivateEndpoint+0x6a8>)
 80093ea:	400a      	ands	r2, r1
 80093ec:	801a      	strh	r2, [r3, #0]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	18d3      	adds	r3, r2, r3
 80093f8:	183a      	adds	r2, r7, r0
 80093fa:	8812      	ldrh	r2, [r2, #0]
 80093fc:	495d      	ldr	r1, [pc, #372]	@ (8009574 <USB_ActivateEndpoint+0x6c4>)
 80093fe:	430a      	orrs	r2, r1
 8009400:	b292      	uxth	r2, r2
 8009402:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	18d3      	adds	r3, r2, r3
 800940e:	881b      	ldrh	r3, [r3, #0]
 8009410:	b29a      	uxth	r2, r3
 8009412:	2038      	movs	r0, #56	@ 0x38
 8009414:	183b      	adds	r3, r7, r0
 8009416:	4952      	ldr	r1, [pc, #328]	@ (8009560 <USB_ActivateEndpoint+0x6b0>)
 8009418:	400a      	ands	r2, r1
 800941a:	801a      	strh	r2, [r3, #0]
 800941c:	183b      	adds	r3, r7, r0
 800941e:	183a      	adds	r2, r7, r0
 8009420:	8812      	ldrh	r2, [r2, #0]
 8009422:	2180      	movs	r1, #128	@ 0x80
 8009424:	0149      	lsls	r1, r1, #5
 8009426:	404a      	eors	r2, r1
 8009428:	801a      	strh	r2, [r3, #0]
 800942a:	183b      	adds	r3, r7, r0
 800942c:	183a      	adds	r2, r7, r0
 800942e:	8812      	ldrh	r2, [r2, #0]
 8009430:	2180      	movs	r1, #128	@ 0x80
 8009432:	0189      	lsls	r1, r1, #6
 8009434:	404a      	eors	r2, r1
 8009436:	801a      	strh	r2, [r3, #0]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	18d3      	adds	r3, r2, r3
 8009442:	183a      	adds	r2, r7, r0
 8009444:	8812      	ldrh	r2, [r2, #0]
 8009446:	4947      	ldr	r1, [pc, #284]	@ (8009564 <USB_ActivateEndpoint+0x6b4>)
 8009448:	430a      	orrs	r2, r1
 800944a:	b292      	uxth	r2, r2
 800944c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	18d3      	adds	r3, r2, r3
 8009458:	881b      	ldrh	r3, [r3, #0]
 800945a:	b29a      	uxth	r2, r3
 800945c:	2036      	movs	r0, #54	@ 0x36
 800945e:	183b      	adds	r3, r7, r0
 8009460:	4945      	ldr	r1, [pc, #276]	@ (8009578 <USB_ActivateEndpoint+0x6c8>)
 8009462:	400a      	ands	r2, r1
 8009464:	801a      	strh	r2, [r3, #0]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	18d3      	adds	r3, r2, r3
 8009470:	183a      	adds	r2, r7, r0
 8009472:	8812      	ldrh	r2, [r2, #0]
 8009474:	493b      	ldr	r1, [pc, #236]	@ (8009564 <USB_ActivateEndpoint+0x6b4>)
 8009476:	430a      	orrs	r2, r1
 8009478:	b292      	uxth	r2, r2
 800947a:	801a      	strh	r2, [r3, #0]
 800947c:	e0ac      	b.n	80095d8 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	18d2      	adds	r2, r2, r3
 8009488:	214e      	movs	r1, #78	@ 0x4e
 800948a:	187b      	adds	r3, r7, r1
 800948c:	8812      	ldrh	r2, [r2, #0]
 800948e:	801a      	strh	r2, [r3, #0]
 8009490:	187b      	adds	r3, r7, r1
 8009492:	881a      	ldrh	r2, [r3, #0]
 8009494:	2380      	movs	r3, #128	@ 0x80
 8009496:	01db      	lsls	r3, r3, #7
 8009498:	4013      	ands	r3, r2
 800949a:	d016      	beq.n	80094ca <USB_ActivateEndpoint+0x61a>
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	18d3      	adds	r3, r2, r3
 80094a6:	881b      	ldrh	r3, [r3, #0]
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	204c      	movs	r0, #76	@ 0x4c
 80094ac:	183b      	adds	r3, r7, r0
 80094ae:	492a      	ldr	r1, [pc, #168]	@ (8009558 <USB_ActivateEndpoint+0x6a8>)
 80094b0:	400a      	ands	r2, r1
 80094b2:	801a      	strh	r2, [r3, #0]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	18d3      	adds	r3, r2, r3
 80094be:	183a      	adds	r2, r7, r0
 80094c0:	8812      	ldrh	r2, [r2, #0]
 80094c2:	4926      	ldr	r1, [pc, #152]	@ (800955c <USB_ActivateEndpoint+0x6ac>)
 80094c4:	430a      	orrs	r2, r1
 80094c6:	b292      	uxth	r2, r2
 80094c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	18d2      	adds	r2, r2, r3
 80094d4:	214a      	movs	r1, #74	@ 0x4a
 80094d6:	187b      	adds	r3, r7, r1
 80094d8:	8812      	ldrh	r2, [r2, #0]
 80094da:	801a      	strh	r2, [r3, #0]
 80094dc:	187b      	adds	r3, r7, r1
 80094de:	881b      	ldrh	r3, [r3, #0]
 80094e0:	2240      	movs	r2, #64	@ 0x40
 80094e2:	4013      	ands	r3, r2
 80094e4:	d016      	beq.n	8009514 <USB_ActivateEndpoint+0x664>
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	18d3      	adds	r3, r2, r3
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	2048      	movs	r0, #72	@ 0x48
 80094f6:	183b      	adds	r3, r7, r0
 80094f8:	4917      	ldr	r1, [pc, #92]	@ (8009558 <USB_ActivateEndpoint+0x6a8>)
 80094fa:	400a      	ands	r2, r1
 80094fc:	801a      	strh	r2, [r3, #0]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	18d3      	adds	r3, r2, r3
 8009508:	183a      	adds	r2, r7, r0
 800950a:	8812      	ldrh	r2, [r2, #0]
 800950c:	4919      	ldr	r1, [pc, #100]	@ (8009574 <USB_ActivateEndpoint+0x6c4>)
 800950e:	430a      	orrs	r2, r1
 8009510:	b292      	uxth	r2, r2
 8009512:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	78db      	ldrb	r3, [r3, #3]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d02f      	beq.n	800957c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	18d3      	adds	r3, r2, r3
 8009526:	881b      	ldrh	r3, [r3, #0]
 8009528:	b29a      	uxth	r2, r3
 800952a:	2044      	movs	r0, #68	@ 0x44
 800952c:	183b      	adds	r3, r7, r0
 800952e:	4912      	ldr	r1, [pc, #72]	@ (8009578 <USB_ActivateEndpoint+0x6c8>)
 8009530:	400a      	ands	r2, r1
 8009532:	801a      	strh	r2, [r3, #0]
 8009534:	183b      	adds	r3, r7, r0
 8009536:	183a      	adds	r2, r7, r0
 8009538:	8812      	ldrh	r2, [r2, #0]
 800953a:	2120      	movs	r1, #32
 800953c:	404a      	eors	r2, r1
 800953e:	801a      	strh	r2, [r3, #0]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	18d3      	adds	r3, r2, r3
 800954a:	183a      	adds	r2, r7, r0
 800954c:	8812      	ldrh	r2, [r2, #0]
 800954e:	4905      	ldr	r1, [pc, #20]	@ (8009564 <USB_ActivateEndpoint+0x6b4>)
 8009550:	430a      	orrs	r2, r1
 8009552:	b292      	uxth	r2, r2
 8009554:	801a      	strh	r2, [r3, #0]
 8009556:	e028      	b.n	80095aa <USB_ActivateEndpoint+0x6fa>
 8009558:	ffff8f8f 	.word	0xffff8f8f
 800955c:	ffffc080 	.word	0xffffc080
 8009560:	ffffbf8f 	.word	0xffffbf8f
 8009564:	ffff8080 	.word	0xffff8080
 8009568:	ffff8180 	.word	0xffff8180
 800956c:	ffff8e8f 	.word	0xffff8e8f
 8009570:	00000404 	.word	0x00000404
 8009574:	ffff80c0 	.word	0xffff80c0
 8009578:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	18d3      	adds	r3, r2, r3
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	b29a      	uxth	r2, r3
 800958a:	2046      	movs	r0, #70	@ 0x46
 800958c:	183b      	adds	r3, r7, r0
 800958e:	4916      	ldr	r1, [pc, #88]	@ (80095e8 <USB_ActivateEndpoint+0x738>)
 8009590:	400a      	ands	r2, r1
 8009592:	801a      	strh	r2, [r3, #0]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	18d3      	adds	r3, r2, r3
 800959e:	183a      	adds	r2, r7, r0
 80095a0:	8812      	ldrh	r2, [r2, #0]
 80095a2:	4912      	ldr	r1, [pc, #72]	@ (80095ec <USB_ActivateEndpoint+0x73c>)
 80095a4:	430a      	orrs	r2, r1
 80095a6:	b292      	uxth	r2, r2
 80095a8:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	18d3      	adds	r3, r2, r3
 80095b4:	881b      	ldrh	r3, [r3, #0]
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	2042      	movs	r0, #66	@ 0x42
 80095ba:	183b      	adds	r3, r7, r0
 80095bc:	490c      	ldr	r1, [pc, #48]	@ (80095f0 <USB_ActivateEndpoint+0x740>)
 80095be:	400a      	ands	r2, r1
 80095c0:	801a      	strh	r2, [r3, #0]
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	18d3      	adds	r3, r2, r3
 80095cc:	183a      	adds	r2, r7, r0
 80095ce:	8812      	ldrh	r2, [r2, #0]
 80095d0:	4906      	ldr	r1, [pc, #24]	@ (80095ec <USB_ActivateEndpoint+0x73c>)
 80095d2:	430a      	orrs	r2, r1
 80095d4:	b292      	uxth	r2, r2
 80095d6:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80095d8:	236f      	movs	r3, #111	@ 0x6f
 80095da:	18fb      	adds	r3, r7, r3
 80095dc:	781b      	ldrb	r3, [r3, #0]
}
 80095de:	0018      	movs	r0, r3
 80095e0:	46bd      	mov	sp, r7
 80095e2:	b01c      	add	sp, #112	@ 0x70
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	46c0      	nop			@ (mov r8, r8)
 80095e8:	ffff8fbf 	.word	0xffff8fbf
 80095ec:	ffff8080 	.word	0xffff8080
 80095f0:	ffffbf8f 	.word	0xffffbf8f

080095f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b08c      	sub	sp, #48	@ 0x30
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	7b1b      	ldrb	r3, [r3, #12]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d000      	beq.n	8009608 <USB_DeactivateEndpoint+0x14>
 8009606:	e07e      	b.n	8009706 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	785b      	ldrb	r3, [r3, #1]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d03c      	beq.n	800968a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	18d2      	adds	r2, r2, r3
 800961a:	210c      	movs	r1, #12
 800961c:	187b      	adds	r3, r7, r1
 800961e:	8812      	ldrh	r2, [r2, #0]
 8009620:	801a      	strh	r2, [r3, #0]
 8009622:	187b      	adds	r3, r7, r1
 8009624:	881b      	ldrh	r3, [r3, #0]
 8009626:	2240      	movs	r2, #64	@ 0x40
 8009628:	4013      	ands	r3, r2
 800962a:	d016      	beq.n	800965a <USB_DeactivateEndpoint+0x66>
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	18d3      	adds	r3, r2, r3
 8009636:	881b      	ldrh	r3, [r3, #0]
 8009638:	b29a      	uxth	r2, r3
 800963a:	200a      	movs	r0, #10
 800963c:	183b      	adds	r3, r7, r0
 800963e:	49c7      	ldr	r1, [pc, #796]	@ (800995c <USB_DeactivateEndpoint+0x368>)
 8009640:	400a      	ands	r2, r1
 8009642:	801a      	strh	r2, [r3, #0]
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	18d3      	adds	r3, r2, r3
 800964e:	183a      	adds	r2, r7, r0
 8009650:	8812      	ldrh	r2, [r2, #0]
 8009652:	49c3      	ldr	r1, [pc, #780]	@ (8009960 <USB_DeactivateEndpoint+0x36c>)
 8009654:	430a      	orrs	r2, r1
 8009656:	b292      	uxth	r2, r2
 8009658:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	18d3      	adds	r3, r2, r3
 8009664:	881b      	ldrh	r3, [r3, #0]
 8009666:	b29a      	uxth	r2, r3
 8009668:	2008      	movs	r0, #8
 800966a:	183b      	adds	r3, r7, r0
 800966c:	49bd      	ldr	r1, [pc, #756]	@ (8009964 <USB_DeactivateEndpoint+0x370>)
 800966e:	400a      	ands	r2, r1
 8009670:	801a      	strh	r2, [r3, #0]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	18d3      	adds	r3, r2, r3
 800967c:	183a      	adds	r2, r7, r0
 800967e:	8812      	ldrh	r2, [r2, #0]
 8009680:	49b9      	ldr	r1, [pc, #740]	@ (8009968 <USB_DeactivateEndpoint+0x374>)
 8009682:	430a      	orrs	r2, r1
 8009684:	b292      	uxth	r2, r2
 8009686:	801a      	strh	r2, [r3, #0]
 8009688:	e163      	b.n	8009952 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	18d2      	adds	r2, r2, r3
 8009694:	2112      	movs	r1, #18
 8009696:	187b      	adds	r3, r7, r1
 8009698:	8812      	ldrh	r2, [r2, #0]
 800969a:	801a      	strh	r2, [r3, #0]
 800969c:	187b      	adds	r3, r7, r1
 800969e:	881a      	ldrh	r2, [r3, #0]
 80096a0:	2380      	movs	r3, #128	@ 0x80
 80096a2:	01db      	lsls	r3, r3, #7
 80096a4:	4013      	ands	r3, r2
 80096a6:	d016      	beq.n	80096d6 <USB_DeactivateEndpoint+0xe2>
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	18d3      	adds	r3, r2, r3
 80096b2:	881b      	ldrh	r3, [r3, #0]
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	2010      	movs	r0, #16
 80096b8:	183b      	adds	r3, r7, r0
 80096ba:	49a8      	ldr	r1, [pc, #672]	@ (800995c <USB_DeactivateEndpoint+0x368>)
 80096bc:	400a      	ands	r2, r1
 80096be:	801a      	strh	r2, [r3, #0]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	18d3      	adds	r3, r2, r3
 80096ca:	183a      	adds	r2, r7, r0
 80096cc:	8812      	ldrh	r2, [r2, #0]
 80096ce:	49a7      	ldr	r1, [pc, #668]	@ (800996c <USB_DeactivateEndpoint+0x378>)
 80096d0:	430a      	orrs	r2, r1
 80096d2:	b292      	uxth	r2, r2
 80096d4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	18d3      	adds	r3, r2, r3
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	200e      	movs	r0, #14
 80096e6:	183b      	adds	r3, r7, r0
 80096e8:	49a1      	ldr	r1, [pc, #644]	@ (8009970 <USB_DeactivateEndpoint+0x37c>)
 80096ea:	400a      	ands	r2, r1
 80096ec:	801a      	strh	r2, [r3, #0]
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	18d3      	adds	r3, r2, r3
 80096f8:	183a      	adds	r2, r7, r0
 80096fa:	8812      	ldrh	r2, [r2, #0]
 80096fc:	499a      	ldr	r1, [pc, #616]	@ (8009968 <USB_DeactivateEndpoint+0x374>)
 80096fe:	430a      	orrs	r2, r1
 8009700:	b292      	uxth	r2, r2
 8009702:	801a      	strh	r2, [r3, #0]
 8009704:	e125      	b.n	8009952 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	785b      	ldrb	r3, [r3, #1]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d000      	beq.n	8009710 <USB_DeactivateEndpoint+0x11c>
 800970e:	e090      	b.n	8009832 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	18d2      	adds	r2, r2, r3
 800971a:	2120      	movs	r1, #32
 800971c:	187b      	adds	r3, r7, r1
 800971e:	8812      	ldrh	r2, [r2, #0]
 8009720:	801a      	strh	r2, [r3, #0]
 8009722:	187b      	adds	r3, r7, r1
 8009724:	881a      	ldrh	r2, [r3, #0]
 8009726:	2380      	movs	r3, #128	@ 0x80
 8009728:	01db      	lsls	r3, r3, #7
 800972a:	4013      	ands	r3, r2
 800972c:	d016      	beq.n	800975c <USB_DeactivateEndpoint+0x168>
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	18d3      	adds	r3, r2, r3
 8009738:	881b      	ldrh	r3, [r3, #0]
 800973a:	b29a      	uxth	r2, r3
 800973c:	201e      	movs	r0, #30
 800973e:	183b      	adds	r3, r7, r0
 8009740:	4986      	ldr	r1, [pc, #536]	@ (800995c <USB_DeactivateEndpoint+0x368>)
 8009742:	400a      	ands	r2, r1
 8009744:	801a      	strh	r2, [r3, #0]
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	18d3      	adds	r3, r2, r3
 8009750:	183a      	adds	r2, r7, r0
 8009752:	8812      	ldrh	r2, [r2, #0]
 8009754:	4985      	ldr	r1, [pc, #532]	@ (800996c <USB_DeactivateEndpoint+0x378>)
 8009756:	430a      	orrs	r2, r1
 8009758:	b292      	uxth	r2, r2
 800975a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	18d2      	adds	r2, r2, r3
 8009766:	211c      	movs	r1, #28
 8009768:	187b      	adds	r3, r7, r1
 800976a:	8812      	ldrh	r2, [r2, #0]
 800976c:	801a      	strh	r2, [r3, #0]
 800976e:	187b      	adds	r3, r7, r1
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	2240      	movs	r2, #64	@ 0x40
 8009774:	4013      	ands	r3, r2
 8009776:	d016      	beq.n	80097a6 <USB_DeactivateEndpoint+0x1b2>
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	18d3      	adds	r3, r2, r3
 8009782:	881b      	ldrh	r3, [r3, #0]
 8009784:	b29a      	uxth	r2, r3
 8009786:	201a      	movs	r0, #26
 8009788:	183b      	adds	r3, r7, r0
 800978a:	4974      	ldr	r1, [pc, #464]	@ (800995c <USB_DeactivateEndpoint+0x368>)
 800978c:	400a      	ands	r2, r1
 800978e:	801a      	strh	r2, [r3, #0]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	18d3      	adds	r3, r2, r3
 800979a:	183a      	adds	r2, r7, r0
 800979c:	8812      	ldrh	r2, [r2, #0]
 800979e:	4970      	ldr	r1, [pc, #448]	@ (8009960 <USB_DeactivateEndpoint+0x36c>)
 80097a0:	430a      	orrs	r2, r1
 80097a2:	b292      	uxth	r2, r2
 80097a4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	18d3      	adds	r3, r2, r3
 80097b0:	881b      	ldrh	r3, [r3, #0]
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	2018      	movs	r0, #24
 80097b6:	183b      	adds	r3, r7, r0
 80097b8:	4968      	ldr	r1, [pc, #416]	@ (800995c <USB_DeactivateEndpoint+0x368>)
 80097ba:	400a      	ands	r2, r1
 80097bc:	801a      	strh	r2, [r3, #0]
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	18d3      	adds	r3, r2, r3
 80097c8:	183a      	adds	r2, r7, r0
 80097ca:	8812      	ldrh	r2, [r2, #0]
 80097cc:	4964      	ldr	r1, [pc, #400]	@ (8009960 <USB_DeactivateEndpoint+0x36c>)
 80097ce:	430a      	orrs	r2, r1
 80097d0:	b292      	uxth	r2, r2
 80097d2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	18d3      	adds	r3, r2, r3
 80097de:	881b      	ldrh	r3, [r3, #0]
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	2016      	movs	r0, #22
 80097e4:	183b      	adds	r3, r7, r0
 80097e6:	4962      	ldr	r1, [pc, #392]	@ (8009970 <USB_DeactivateEndpoint+0x37c>)
 80097e8:	400a      	ands	r2, r1
 80097ea:	801a      	strh	r2, [r3, #0]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	18d3      	adds	r3, r2, r3
 80097f6:	183a      	adds	r2, r7, r0
 80097f8:	8812      	ldrh	r2, [r2, #0]
 80097fa:	495b      	ldr	r1, [pc, #364]	@ (8009968 <USB_DeactivateEndpoint+0x374>)
 80097fc:	430a      	orrs	r2, r1
 80097fe:	b292      	uxth	r2, r2
 8009800:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	18d3      	adds	r3, r2, r3
 800980c:	881b      	ldrh	r3, [r3, #0]
 800980e:	b29a      	uxth	r2, r3
 8009810:	2014      	movs	r0, #20
 8009812:	183b      	adds	r3, r7, r0
 8009814:	4953      	ldr	r1, [pc, #332]	@ (8009964 <USB_DeactivateEndpoint+0x370>)
 8009816:	400a      	ands	r2, r1
 8009818:	801a      	strh	r2, [r3, #0]
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	18d3      	adds	r3, r2, r3
 8009824:	183a      	adds	r2, r7, r0
 8009826:	8812      	ldrh	r2, [r2, #0]
 8009828:	494f      	ldr	r1, [pc, #316]	@ (8009968 <USB_DeactivateEndpoint+0x374>)
 800982a:	430a      	orrs	r2, r1
 800982c:	b292      	uxth	r2, r2
 800982e:	801a      	strh	r2, [r3, #0]
 8009830:	e08f      	b.n	8009952 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	18d2      	adds	r2, r2, r3
 800983c:	212e      	movs	r1, #46	@ 0x2e
 800983e:	187b      	adds	r3, r7, r1
 8009840:	8812      	ldrh	r2, [r2, #0]
 8009842:	801a      	strh	r2, [r3, #0]
 8009844:	187b      	adds	r3, r7, r1
 8009846:	881a      	ldrh	r2, [r3, #0]
 8009848:	2380      	movs	r3, #128	@ 0x80
 800984a:	01db      	lsls	r3, r3, #7
 800984c:	4013      	ands	r3, r2
 800984e:	d016      	beq.n	800987e <USB_DeactivateEndpoint+0x28a>
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	18d3      	adds	r3, r2, r3
 800985a:	881b      	ldrh	r3, [r3, #0]
 800985c:	b29a      	uxth	r2, r3
 800985e:	202c      	movs	r0, #44	@ 0x2c
 8009860:	183b      	adds	r3, r7, r0
 8009862:	493e      	ldr	r1, [pc, #248]	@ (800995c <USB_DeactivateEndpoint+0x368>)
 8009864:	400a      	ands	r2, r1
 8009866:	801a      	strh	r2, [r3, #0]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	18d3      	adds	r3, r2, r3
 8009872:	183a      	adds	r2, r7, r0
 8009874:	8812      	ldrh	r2, [r2, #0]
 8009876:	493d      	ldr	r1, [pc, #244]	@ (800996c <USB_DeactivateEndpoint+0x378>)
 8009878:	430a      	orrs	r2, r1
 800987a:	b292      	uxth	r2, r2
 800987c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	18d2      	adds	r2, r2, r3
 8009888:	212a      	movs	r1, #42	@ 0x2a
 800988a:	187b      	adds	r3, r7, r1
 800988c:	8812      	ldrh	r2, [r2, #0]
 800988e:	801a      	strh	r2, [r3, #0]
 8009890:	187b      	adds	r3, r7, r1
 8009892:	881b      	ldrh	r3, [r3, #0]
 8009894:	2240      	movs	r2, #64	@ 0x40
 8009896:	4013      	ands	r3, r2
 8009898:	d016      	beq.n	80098c8 <USB_DeactivateEndpoint+0x2d4>
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	18d3      	adds	r3, r2, r3
 80098a4:	881b      	ldrh	r3, [r3, #0]
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	2028      	movs	r0, #40	@ 0x28
 80098aa:	183b      	adds	r3, r7, r0
 80098ac:	492b      	ldr	r1, [pc, #172]	@ (800995c <USB_DeactivateEndpoint+0x368>)
 80098ae:	400a      	ands	r2, r1
 80098b0:	801a      	strh	r2, [r3, #0]
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	18d3      	adds	r3, r2, r3
 80098bc:	183a      	adds	r2, r7, r0
 80098be:	8812      	ldrh	r2, [r2, #0]
 80098c0:	4927      	ldr	r1, [pc, #156]	@ (8009960 <USB_DeactivateEndpoint+0x36c>)
 80098c2:	430a      	orrs	r2, r1
 80098c4:	b292      	uxth	r2, r2
 80098c6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	18d3      	adds	r3, r2, r3
 80098d2:	881b      	ldrh	r3, [r3, #0]
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	2026      	movs	r0, #38	@ 0x26
 80098d8:	183b      	adds	r3, r7, r0
 80098da:	4920      	ldr	r1, [pc, #128]	@ (800995c <USB_DeactivateEndpoint+0x368>)
 80098dc:	400a      	ands	r2, r1
 80098de:	801a      	strh	r2, [r3, #0]
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	18d3      	adds	r3, r2, r3
 80098ea:	183a      	adds	r2, r7, r0
 80098ec:	8812      	ldrh	r2, [r2, #0]
 80098ee:	491f      	ldr	r1, [pc, #124]	@ (800996c <USB_DeactivateEndpoint+0x378>)
 80098f0:	430a      	orrs	r2, r1
 80098f2:	b292      	uxth	r2, r2
 80098f4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	18d3      	adds	r3, r2, r3
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	b29a      	uxth	r2, r3
 8009904:	2024      	movs	r0, #36	@ 0x24
 8009906:	183b      	adds	r3, r7, r0
 8009908:	4916      	ldr	r1, [pc, #88]	@ (8009964 <USB_DeactivateEndpoint+0x370>)
 800990a:	400a      	ands	r2, r1
 800990c:	801a      	strh	r2, [r3, #0]
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	18d3      	adds	r3, r2, r3
 8009918:	183a      	adds	r2, r7, r0
 800991a:	8812      	ldrh	r2, [r2, #0]
 800991c:	4912      	ldr	r1, [pc, #72]	@ (8009968 <USB_DeactivateEndpoint+0x374>)
 800991e:	430a      	orrs	r2, r1
 8009920:	b292      	uxth	r2, r2
 8009922:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	18d3      	adds	r3, r2, r3
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	b29a      	uxth	r2, r3
 8009932:	2022      	movs	r0, #34	@ 0x22
 8009934:	183b      	adds	r3, r7, r0
 8009936:	490e      	ldr	r1, [pc, #56]	@ (8009970 <USB_DeactivateEndpoint+0x37c>)
 8009938:	400a      	ands	r2, r1
 800993a:	801a      	strh	r2, [r3, #0]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	18d3      	adds	r3, r2, r3
 8009946:	183a      	adds	r2, r7, r0
 8009948:	8812      	ldrh	r2, [r2, #0]
 800994a:	4907      	ldr	r1, [pc, #28]	@ (8009968 <USB_DeactivateEndpoint+0x374>)
 800994c:	430a      	orrs	r2, r1
 800994e:	b292      	uxth	r2, r2
 8009950:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	0018      	movs	r0, r3
 8009956:	46bd      	mov	sp, r7
 8009958:	b00c      	add	sp, #48	@ 0x30
 800995a:	bd80      	pop	{r7, pc}
 800995c:	ffff8f8f 	.word	0xffff8f8f
 8009960:	ffff80c0 	.word	0xffff80c0
 8009964:	ffff8fbf 	.word	0xffff8fbf
 8009968:	ffff8080 	.word	0xffff8080
 800996c:	ffffc080 	.word	0xffffc080
 8009970:	ffffbf8f 	.word	0xffffbf8f

08009974 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009974:	b590      	push	{r4, r7, lr}
 8009976:	b0c3      	sub	sp, #268	@ 0x10c
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	785b      	ldrb	r3, [r3, #1]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d001      	beq.n	800998a <USB_EPStartXfer+0x16>
 8009986:	f000 fd2d 	bl	800a3e4 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	699a      	ldr	r2, [r3, #24]
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	429a      	cmp	r2, r3
 8009994:	d905      	bls.n	80099a2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	1d7a      	adds	r2, r7, #5
 800999c:	32ff      	adds	r2, #255	@ 0xff
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	e004      	b.n	80099ac <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	1d7a      	adds	r2, r7, #5
 80099a8:	32ff      	adds	r2, #255	@ 0xff
 80099aa:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	7b1b      	ldrb	r3, [r3, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d125      	bne.n	8009a00 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	6959      	ldr	r1, [r3, #20]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	88da      	ldrh	r2, [r3, #6]
 80099bc:	1d7b      	adds	r3, r7, #5
 80099be:	33ff      	adds	r3, #255	@ 0xff
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 fa47 	bl	800ae58 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	613b      	str	r3, [r7, #16]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2250      	movs	r2, #80	@ 0x50
 80099d2:	5a9b      	ldrh	r3, [r3, r2]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	001a      	movs	r2, r3
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	189b      	adds	r3, r3, r2
 80099dc:	613b      	str	r3, [r7, #16]
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	00da      	lsls	r2, r3, #3
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	18d3      	adds	r3, r2, r3
 80099e8:	4ad7      	ldr	r2, [pc, #860]	@ (8009d48 <USB_EPStartXfer+0x3d4>)
 80099ea:	4694      	mov	ip, r2
 80099ec:	4463      	add	r3, ip
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	1d7b      	adds	r3, r7, #5
 80099f2:	33ff      	adds	r3, #255	@ 0xff
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	801a      	strh	r2, [r3, #0]
 80099fc:	f000 fccd 	bl	800a39a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	78db      	ldrb	r3, [r3, #3]
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d000      	beq.n	8009a0a <USB_EPStartXfer+0x96>
 8009a08:	e362      	b.n	800a0d0 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	6a1a      	ldr	r2, [r3, #32]
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d800      	bhi.n	8009a18 <USB_EPStartXfer+0xa4>
 8009a16:	e309      	b.n	800a02c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	18d3      	adds	r3, r2, r3
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	2056      	movs	r0, #86	@ 0x56
 8009a28:	183b      	adds	r3, r7, r0
 8009a2a:	49c8      	ldr	r1, [pc, #800]	@ (8009d4c <USB_EPStartXfer+0x3d8>)
 8009a2c:	400a      	ands	r2, r1
 8009a2e:	801a      	strh	r2, [r3, #0]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	18d3      	adds	r3, r2, r3
 8009a3a:	183a      	adds	r2, r7, r0
 8009a3c:	8812      	ldrh	r2, [r2, #0]
 8009a3e:	49c4      	ldr	r1, [pc, #784]	@ (8009d50 <USB_EPStartXfer+0x3dc>)
 8009a40:	430a      	orrs	r2, r1
 8009a42:	b292      	uxth	r2, r2
 8009a44:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	6a1a      	ldr	r2, [r3, #32]
 8009a4a:	1d7b      	adds	r3, r7, #5
 8009a4c:	33ff      	adds	r3, #255	@ 0xff
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	1ad2      	subs	r2, r2, r3
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	18d3      	adds	r3, r2, r3
 8009a60:	881b      	ldrh	r3, [r3, #0]
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	001a      	movs	r2, r3
 8009a66:	2340      	movs	r3, #64	@ 0x40
 8009a68:	4013      	ands	r3, r2
 8009a6a:	d100      	bne.n	8009a6e <USB_EPStartXfer+0xfa>
 8009a6c:	e176      	b.n	8009d5c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	785b      	ldrb	r3, [r3, #1]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d000      	beq.n	8009a7c <USB_EPStartXfer+0x108>
 8009a7a:	e074      	b.n	8009b66 <USB_EPStartXfer+0x1f2>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2250      	movs	r2, #80	@ 0x50
 8009a84:	5a9b      	ldrh	r3, [r3, r2]
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	001a      	movs	r2, r3
 8009a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8c:	189b      	adds	r3, r3, r2
 8009a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	00da      	lsls	r2, r3, #3
 8009a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a98:	18d3      	adds	r3, r2, r3
 8009a9a:	4aae      	ldr	r2, [pc, #696]	@ (8009d54 <USB_EPStartXfer+0x3e0>)
 8009a9c:	4694      	mov	ip, r2
 8009a9e:	4463      	add	r3, ip
 8009aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa4:	881b      	ldrh	r3, [r3, #0]
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	059b      	lsls	r3, r3, #22
 8009aaa:	0d9b      	lsrs	r3, r3, #22
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab0:	801a      	strh	r2, [r3, #0]
 8009ab2:	1d7b      	adds	r3, r7, #5
 8009ab4:	33ff      	adds	r3, #255	@ 0xff
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b3e      	cmp	r3, #62	@ 0x3e
 8009aba:	d924      	bls.n	8009b06 <USB_EPStartXfer+0x192>
 8009abc:	1d7b      	adds	r3, r7, #5
 8009abe:	33ff      	adds	r3, #255	@ 0xff
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	095b      	lsrs	r3, r3, #5
 8009ac4:	1c7a      	adds	r2, r7, #1
 8009ac6:	32ff      	adds	r2, #255	@ 0xff
 8009ac8:	6013      	str	r3, [r2, #0]
 8009aca:	1d7b      	adds	r3, r7, #5
 8009acc:	33ff      	adds	r3, #255	@ 0xff
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	221f      	movs	r2, #31
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	d106      	bne.n	8009ae4 <USB_EPStartXfer+0x170>
 8009ad6:	1c7b      	adds	r3, r7, #1
 8009ad8:	33ff      	adds	r3, #255	@ 0xff
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	3b01      	subs	r3, #1
 8009ade:	1c7a      	adds	r2, r7, #1
 8009ae0:	32ff      	adds	r2, #255	@ 0xff
 8009ae2:	6013      	str	r3, [r2, #0]
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae6:	881b      	ldrh	r3, [r3, #0]
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	1c7b      	adds	r3, r7, #1
 8009aec:	33ff      	adds	r3, #255	@ 0xff
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	029b      	lsls	r3, r3, #10
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	4313      	orrs	r3, r2
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	4a97      	ldr	r2, [pc, #604]	@ (8009d58 <USB_EPStartXfer+0x3e4>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b02:	801a      	strh	r2, [r3, #0]
 8009b04:	e04a      	b.n	8009b9c <USB_EPStartXfer+0x228>
 8009b06:	1d7b      	adds	r3, r7, #5
 8009b08:	33ff      	adds	r3, #255	@ 0xff
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d108      	bne.n	8009b22 <USB_EPStartXfer+0x1ae>
 8009b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b12:	881b      	ldrh	r3, [r3, #0]
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	4a90      	ldr	r2, [pc, #576]	@ (8009d58 <USB_EPStartXfer+0x3e4>)
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1e:	801a      	strh	r2, [r3, #0]
 8009b20:	e03c      	b.n	8009b9c <USB_EPStartXfer+0x228>
 8009b22:	1d7b      	adds	r3, r7, #5
 8009b24:	33ff      	adds	r3, #255	@ 0xff
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	085b      	lsrs	r3, r3, #1
 8009b2a:	1c7a      	adds	r2, r7, #1
 8009b2c:	32ff      	adds	r2, #255	@ 0xff
 8009b2e:	6013      	str	r3, [r2, #0]
 8009b30:	1d7b      	adds	r3, r7, #5
 8009b32:	33ff      	adds	r3, #255	@ 0xff
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2201      	movs	r2, #1
 8009b38:	4013      	ands	r3, r2
 8009b3a:	d006      	beq.n	8009b4a <USB_EPStartXfer+0x1d6>
 8009b3c:	1c7b      	adds	r3, r7, #1
 8009b3e:	33ff      	adds	r3, #255	@ 0xff
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	3301      	adds	r3, #1
 8009b44:	1c7a      	adds	r2, r7, #1
 8009b46:	32ff      	adds	r2, #255	@ 0xff
 8009b48:	6013      	str	r3, [r2, #0]
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4c:	881b      	ldrh	r3, [r3, #0]
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	1c7b      	adds	r3, r7, #1
 8009b52:	33ff      	adds	r3, #255	@ 0xff
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	029b      	lsls	r3, r3, #10
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b62:	801a      	strh	r2, [r3, #0]
 8009b64:	e01a      	b.n	8009b9c <USB_EPStartXfer+0x228>
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	785b      	ldrb	r3, [r3, #1]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d116      	bne.n	8009b9c <USB_EPStartXfer+0x228>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2250      	movs	r2, #80	@ 0x50
 8009b72:	5a9b      	ldrh	r3, [r3, r2]
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	001a      	movs	r2, r3
 8009b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7a:	189b      	adds	r3, r3, r2
 8009b7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	00da      	lsls	r2, r3, #3
 8009b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b86:	18d3      	adds	r3, r2, r3
 8009b88:	4a72      	ldr	r2, [pc, #456]	@ (8009d54 <USB_EPStartXfer+0x3e0>)
 8009b8a:	4694      	mov	ip, r2
 8009b8c:	4463      	add	r3, ip
 8009b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b90:	1d7b      	adds	r3, r7, #5
 8009b92:	33ff      	adds	r3, #255	@ 0xff
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b9c:	2076      	movs	r0, #118	@ 0x76
 8009b9e:	183b      	adds	r3, r7, r0
 8009ba0:	683a      	ldr	r2, [r7, #0]
 8009ba2:	8952      	ldrh	r2, [r2, #10]
 8009ba4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	6959      	ldr	r1, [r3, #20]
 8009baa:	1d7b      	adds	r3, r7, #5
 8009bac:	33ff      	adds	r3, #255	@ 0xff
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	b29c      	uxth	r4, r3
 8009bb2:	183b      	adds	r3, r7, r0
 8009bb4:	881a      	ldrh	r2, [r3, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	0023      	movs	r3, r4
 8009bba:	f001 f94d 	bl	800ae58 <USB_WritePMA>
            ep->xfer_buff += len;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	695a      	ldr	r2, [r3, #20]
 8009bc2:	1d7b      	adds	r3, r7, #5
 8009bc4:	33ff      	adds	r3, #255	@ 0xff
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	18d2      	adds	r2, r2, r3
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	6a1a      	ldr	r2, [r3, #32]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d908      	bls.n	8009bec <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	6a1a      	ldr	r2, [r3, #32]
 8009bde:	1d7b      	adds	r3, r7, #5
 8009be0:	33ff      	adds	r3, #255	@ 0xff
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	1ad2      	subs	r2, r2, r3
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	621a      	str	r2, [r3, #32]
 8009bea:	e007      	b.n	8009bfc <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	6a1b      	ldr	r3, [r3, #32]
 8009bf0:	1d7a      	adds	r2, r7, #5
 8009bf2:	32ff      	adds	r2, #255	@ 0xff
 8009bf4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	785b      	ldrb	r3, [r3, #1]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d000      	beq.n	8009c06 <USB_EPStartXfer+0x292>
 8009c04:	e070      	b.n	8009ce8 <USB_EPStartXfer+0x374>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	61bb      	str	r3, [r7, #24]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2250      	movs	r2, #80	@ 0x50
 8009c0e:	5a9b      	ldrh	r3, [r3, r2]
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	001a      	movs	r2, r3
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	189b      	adds	r3, r3, r2
 8009c18:	61bb      	str	r3, [r7, #24]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	00da      	lsls	r2, r3, #3
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	18d3      	adds	r3, r2, r3
 8009c24:	4a48      	ldr	r2, [pc, #288]	@ (8009d48 <USB_EPStartXfer+0x3d4>)
 8009c26:	4694      	mov	ip, r2
 8009c28:	4463      	add	r3, ip
 8009c2a:	617b      	str	r3, [r7, #20]
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	881b      	ldrh	r3, [r3, #0]
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	059b      	lsls	r3, r3, #22
 8009c34:	0d9b      	lsrs	r3, r3, #22
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	801a      	strh	r2, [r3, #0]
 8009c3c:	1d7b      	adds	r3, r7, #5
 8009c3e:	33ff      	adds	r3, #255	@ 0xff
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c44:	d922      	bls.n	8009c8c <USB_EPStartXfer+0x318>
 8009c46:	1d7b      	adds	r3, r7, #5
 8009c48:	33ff      	adds	r3, #255	@ 0xff
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	095b      	lsrs	r3, r3, #5
 8009c4e:	21fc      	movs	r1, #252	@ 0xfc
 8009c50:	187a      	adds	r2, r7, r1
 8009c52:	6013      	str	r3, [r2, #0]
 8009c54:	1d7b      	adds	r3, r7, #5
 8009c56:	33ff      	adds	r3, #255	@ 0xff
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	221f      	movs	r2, #31
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	d104      	bne.n	8009c6a <USB_EPStartXfer+0x2f6>
 8009c60:	187b      	adds	r3, r7, r1
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3b01      	subs	r3, #1
 8009c66:	187a      	adds	r2, r7, r1
 8009c68:	6013      	str	r3, [r2, #0]
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	23fc      	movs	r3, #252	@ 0xfc
 8009c72:	18fb      	adds	r3, r7, r3
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	029b      	lsls	r3, r3, #10
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	4a35      	ldr	r2, [pc, #212]	@ (8009d58 <USB_EPStartXfer+0x3e4>)
 8009c82:	4313      	orrs	r3, r2
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	801a      	strh	r2, [r3, #0]
 8009c8a:	e04a      	b.n	8009d22 <USB_EPStartXfer+0x3ae>
 8009c8c:	1d7b      	adds	r3, r7, #5
 8009c8e:	33ff      	adds	r3, #255	@ 0xff
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d108      	bne.n	8009ca8 <USB_EPStartXfer+0x334>
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	4a2e      	ldr	r2, [pc, #184]	@ (8009d58 <USB_EPStartXfer+0x3e4>)
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	801a      	strh	r2, [r3, #0]
 8009ca6:	e03c      	b.n	8009d22 <USB_EPStartXfer+0x3ae>
 8009ca8:	1d7b      	adds	r3, r7, #5
 8009caa:	33ff      	adds	r3, #255	@ 0xff
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	085b      	lsrs	r3, r3, #1
 8009cb0:	21fc      	movs	r1, #252	@ 0xfc
 8009cb2:	187a      	adds	r2, r7, r1
 8009cb4:	6013      	str	r3, [r2, #0]
 8009cb6:	1d7b      	adds	r3, r7, #5
 8009cb8:	33ff      	adds	r3, #255	@ 0xff
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	d004      	beq.n	8009ccc <USB_EPStartXfer+0x358>
 8009cc2:	187b      	adds	r3, r7, r1
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	187a      	adds	r2, r7, r1
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	b29a      	uxth	r2, r3
 8009cd2:	23fc      	movs	r3, #252	@ 0xfc
 8009cd4:	18fb      	adds	r3, r7, r3
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	029b      	lsls	r3, r3, #10
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	801a      	strh	r2, [r3, #0]
 8009ce6:	e01c      	b.n	8009d22 <USB_EPStartXfer+0x3ae>
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	785b      	ldrb	r3, [r3, #1]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d118      	bne.n	8009d22 <USB_EPStartXfer+0x3ae>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	623b      	str	r3, [r7, #32]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2250      	movs	r2, #80	@ 0x50
 8009cf8:	5a9b      	ldrh	r3, [r3, r2]
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	001a      	movs	r2, r3
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	189b      	adds	r3, r3, r2
 8009d02:	623b      	str	r3, [r7, #32]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	00da      	lsls	r2, r3, #3
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	18d3      	adds	r3, r2, r3
 8009d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8009d48 <USB_EPStartXfer+0x3d4>)
 8009d10:	4694      	mov	ip, r2
 8009d12:	4463      	add	r3, ip
 8009d14:	61fb      	str	r3, [r7, #28]
 8009d16:	1d7b      	adds	r3, r7, #5
 8009d18:	33ff      	adds	r3, #255	@ 0xff
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009d22:	2076      	movs	r0, #118	@ 0x76
 8009d24:	183b      	adds	r3, r7, r0
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	8912      	ldrh	r2, [r2, #8]
 8009d2a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	6959      	ldr	r1, [r3, #20]
 8009d30:	1d7b      	adds	r3, r7, #5
 8009d32:	33ff      	adds	r3, #255	@ 0xff
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	b29c      	uxth	r4, r3
 8009d38:	183b      	adds	r3, r7, r0
 8009d3a:	881a      	ldrh	r2, [r3, #0]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	0023      	movs	r3, r4
 8009d40:	f001 f88a 	bl	800ae58 <USB_WritePMA>
 8009d44:	e329      	b.n	800a39a <USB_EPStartXfer+0xa26>
 8009d46:	46c0      	nop			@ (mov r8, r8)
 8009d48:	00000402 	.word	0x00000402
 8009d4c:	ffff8f8f 	.word	0xffff8f8f
 8009d50:	ffff8180 	.word	0xffff8180
 8009d54:	00000406 	.word	0x00000406
 8009d58:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	785b      	ldrb	r3, [r3, #1]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d000      	beq.n	8009d66 <USB_EPStartXfer+0x3f2>
 8009d64:	e070      	b.n	8009e48 <USB_EPStartXfer+0x4d4>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2250      	movs	r2, #80	@ 0x50
 8009d6e:	5a9b      	ldrh	r3, [r3, r2]
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	001a      	movs	r2, r3
 8009d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d76:	189b      	adds	r3, r3, r2
 8009d78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	00da      	lsls	r2, r3, #3
 8009d80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d82:	18d3      	adds	r3, r2, r3
 8009d84:	4acd      	ldr	r2, [pc, #820]	@ (800a0bc <USB_EPStartXfer+0x748>)
 8009d86:	4694      	mov	ip, r2
 8009d88:	4463      	add	r3, ip
 8009d8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	059b      	lsls	r3, r3, #22
 8009d94:	0d9b      	lsrs	r3, r3, #22
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d9a:	801a      	strh	r2, [r3, #0]
 8009d9c:	1d7b      	adds	r3, r7, #5
 8009d9e:	33ff      	adds	r3, #255	@ 0xff
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009da4:	d922      	bls.n	8009dec <USB_EPStartXfer+0x478>
 8009da6:	1d7b      	adds	r3, r7, #5
 8009da8:	33ff      	adds	r3, #255	@ 0xff
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	095b      	lsrs	r3, r3, #5
 8009dae:	21f8      	movs	r1, #248	@ 0xf8
 8009db0:	187a      	adds	r2, r7, r1
 8009db2:	6013      	str	r3, [r2, #0]
 8009db4:	1d7b      	adds	r3, r7, #5
 8009db6:	33ff      	adds	r3, #255	@ 0xff
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	221f      	movs	r2, #31
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	d104      	bne.n	8009dca <USB_EPStartXfer+0x456>
 8009dc0:	187b      	adds	r3, r7, r1
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	187a      	adds	r2, r7, r1
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dcc:	881b      	ldrh	r3, [r3, #0]
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	23f8      	movs	r3, #248	@ 0xf8
 8009dd2:	18fb      	adds	r3, r7, r3
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	029b      	lsls	r3, r3, #10
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	4ab7      	ldr	r2, [pc, #732]	@ (800a0c0 <USB_EPStartXfer+0x74c>)
 8009de2:	4313      	orrs	r3, r2
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009de8:	801a      	strh	r2, [r3, #0]
 8009dea:	e04a      	b.n	8009e82 <USB_EPStartXfer+0x50e>
 8009dec:	1d7b      	adds	r3, r7, #5
 8009dee:	33ff      	adds	r3, #255	@ 0xff
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d108      	bne.n	8009e08 <USB_EPStartXfer+0x494>
 8009df6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009df8:	881b      	ldrh	r3, [r3, #0]
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	4ab0      	ldr	r2, [pc, #704]	@ (800a0c0 <USB_EPStartXfer+0x74c>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e04:	801a      	strh	r2, [r3, #0]
 8009e06:	e03c      	b.n	8009e82 <USB_EPStartXfer+0x50e>
 8009e08:	1d7b      	adds	r3, r7, #5
 8009e0a:	33ff      	adds	r3, #255	@ 0xff
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	085b      	lsrs	r3, r3, #1
 8009e10:	21f8      	movs	r1, #248	@ 0xf8
 8009e12:	187a      	adds	r2, r7, r1
 8009e14:	6013      	str	r3, [r2, #0]
 8009e16:	1d7b      	adds	r3, r7, #5
 8009e18:	33ff      	adds	r3, #255	@ 0xff
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	4013      	ands	r3, r2
 8009e20:	d004      	beq.n	8009e2c <USB_EPStartXfer+0x4b8>
 8009e22:	187b      	adds	r3, r7, r1
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3301      	adds	r3, #1
 8009e28:	187a      	adds	r2, r7, r1
 8009e2a:	6013      	str	r3, [r2, #0]
 8009e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	23f8      	movs	r3, #248	@ 0xf8
 8009e34:	18fb      	adds	r3, r7, r3
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	029b      	lsls	r3, r3, #10
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e44:	801a      	strh	r2, [r3, #0]
 8009e46:	e01c      	b.n	8009e82 <USB_EPStartXfer+0x50e>
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	785b      	ldrb	r3, [r3, #1]
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d118      	bne.n	8009e82 <USB_EPStartXfer+0x50e>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2250      	movs	r2, #80	@ 0x50
 8009e58:	5a9b      	ldrh	r3, [r3, r2]
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	001a      	movs	r2, r3
 8009e5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e60:	189b      	adds	r3, r3, r2
 8009e62:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	00da      	lsls	r2, r3, #3
 8009e6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e6c:	18d3      	adds	r3, r2, r3
 8009e6e:	4a93      	ldr	r2, [pc, #588]	@ (800a0bc <USB_EPStartXfer+0x748>)
 8009e70:	4694      	mov	ip, r2
 8009e72:	4463      	add	r3, ip
 8009e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e76:	1d7b      	adds	r3, r7, #5
 8009e78:	33ff      	adds	r3, #255	@ 0xff
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009e82:	2076      	movs	r0, #118	@ 0x76
 8009e84:	183b      	adds	r3, r7, r0
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	8912      	ldrh	r2, [r2, #8]
 8009e8a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	6959      	ldr	r1, [r3, #20]
 8009e90:	1d7b      	adds	r3, r7, #5
 8009e92:	33ff      	adds	r3, #255	@ 0xff
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	b29c      	uxth	r4, r3
 8009e98:	183b      	adds	r3, r7, r0
 8009e9a:	881a      	ldrh	r2, [r3, #0]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	0023      	movs	r3, r4
 8009ea0:	f000 ffda 	bl	800ae58 <USB_WritePMA>
            ep->xfer_buff += len;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	695a      	ldr	r2, [r3, #20]
 8009ea8:	1d7b      	adds	r3, r7, #5
 8009eaa:	33ff      	adds	r3, #255	@ 0xff
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	18d2      	adds	r2, r2, r3
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	6a1a      	ldr	r2, [r3, #32]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d908      	bls.n	8009ed2 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	6a1a      	ldr	r2, [r3, #32]
 8009ec4:	1d7b      	adds	r3, r7, #5
 8009ec6:	33ff      	adds	r3, #255	@ 0xff
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	1ad2      	subs	r2, r2, r3
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	621a      	str	r2, [r3, #32]
 8009ed0:	e007      	b.n	8009ee2 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	6a1b      	ldr	r3, [r3, #32]
 8009ed6:	1d7a      	adds	r2, r7, #5
 8009ed8:	32ff      	adds	r2, #255	@ 0xff
 8009eda:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	785b      	ldrb	r3, [r3, #1]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d000      	beq.n	8009ef0 <USB_EPStartXfer+0x57c>
 8009eee:	e070      	b.n	8009fd2 <USB_EPStartXfer+0x65e>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2250      	movs	r2, #80	@ 0x50
 8009ef8:	5a9b      	ldrh	r3, [r3, r2]
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	001a      	movs	r2, r3
 8009efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f00:	189b      	adds	r3, r3, r2
 8009f02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	00da      	lsls	r2, r3, #3
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0c:	18d3      	adds	r3, r2, r3
 8009f0e:	4a6d      	ldr	r2, [pc, #436]	@ (800a0c4 <USB_EPStartXfer+0x750>)
 8009f10:	4694      	mov	ip, r2
 8009f12:	4463      	add	r3, ip
 8009f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f18:	881b      	ldrh	r3, [r3, #0]
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	059b      	lsls	r3, r3, #22
 8009f1e:	0d9b      	lsrs	r3, r3, #22
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f24:	801a      	strh	r2, [r3, #0]
 8009f26:	1d7b      	adds	r3, r7, #5
 8009f28:	33ff      	adds	r3, #255	@ 0xff
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f2e:	d922      	bls.n	8009f76 <USB_EPStartXfer+0x602>
 8009f30:	1d7b      	adds	r3, r7, #5
 8009f32:	33ff      	adds	r3, #255	@ 0xff
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	095b      	lsrs	r3, r3, #5
 8009f38:	21f4      	movs	r1, #244	@ 0xf4
 8009f3a:	187a      	adds	r2, r7, r1
 8009f3c:	6013      	str	r3, [r2, #0]
 8009f3e:	1d7b      	adds	r3, r7, #5
 8009f40:	33ff      	adds	r3, #255	@ 0xff
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	221f      	movs	r2, #31
 8009f46:	4013      	ands	r3, r2
 8009f48:	d104      	bne.n	8009f54 <USB_EPStartXfer+0x5e0>
 8009f4a:	187b      	adds	r3, r7, r1
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	187a      	adds	r2, r7, r1
 8009f52:	6013      	str	r3, [r2, #0]
 8009f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f56:	881b      	ldrh	r3, [r3, #0]
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	23f4      	movs	r3, #244	@ 0xf4
 8009f5c:	18fb      	adds	r3, r7, r3
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	029b      	lsls	r3, r3, #10
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	4313      	orrs	r3, r2
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	4a55      	ldr	r2, [pc, #340]	@ (800a0c0 <USB_EPStartXfer+0x74c>)
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f72:	801a      	strh	r2, [r3, #0]
 8009f74:	e048      	b.n	800a008 <USB_EPStartXfer+0x694>
 8009f76:	1d7b      	adds	r3, r7, #5
 8009f78:	33ff      	adds	r3, #255	@ 0xff
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d108      	bne.n	8009f92 <USB_EPStartXfer+0x61e>
 8009f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f82:	881b      	ldrh	r3, [r3, #0]
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	4a4e      	ldr	r2, [pc, #312]	@ (800a0c0 <USB_EPStartXfer+0x74c>)
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f8e:	801a      	strh	r2, [r3, #0]
 8009f90:	e03a      	b.n	800a008 <USB_EPStartXfer+0x694>
 8009f92:	1d7b      	adds	r3, r7, #5
 8009f94:	33ff      	adds	r3, #255	@ 0xff
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	085b      	lsrs	r3, r3, #1
 8009f9a:	21f4      	movs	r1, #244	@ 0xf4
 8009f9c:	187a      	adds	r2, r7, r1
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	1d7b      	adds	r3, r7, #5
 8009fa2:	33ff      	adds	r3, #255	@ 0xff
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	4013      	ands	r3, r2
 8009faa:	d004      	beq.n	8009fb6 <USB_EPStartXfer+0x642>
 8009fac:	187b      	adds	r3, r7, r1
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	187a      	adds	r2, r7, r1
 8009fb4:	6013      	str	r3, [r2, #0]
 8009fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb8:	881b      	ldrh	r3, [r3, #0]
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	23f4      	movs	r3, #244	@ 0xf4
 8009fbe:	18fb      	adds	r3, r7, r3
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	029b      	lsls	r3, r3, #10
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fce:	801a      	strh	r2, [r3, #0]
 8009fd0:	e01a      	b.n	800a008 <USB_EPStartXfer+0x694>
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	785b      	ldrb	r3, [r3, #1]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d116      	bne.n	800a008 <USB_EPStartXfer+0x694>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2250      	movs	r2, #80	@ 0x50
 8009fde:	5a9b      	ldrh	r3, [r3, r2]
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	001a      	movs	r2, r3
 8009fe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fe6:	189b      	adds	r3, r3, r2
 8009fe8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	00da      	lsls	r2, r3, #3
 8009ff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ff2:	18d3      	adds	r3, r2, r3
 8009ff4:	4a33      	ldr	r2, [pc, #204]	@ (800a0c4 <USB_EPStartXfer+0x750>)
 8009ff6:	4694      	mov	ip, r2
 8009ff8:	4463      	add	r3, ip
 8009ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ffc:	1d7b      	adds	r3, r7, #5
 8009ffe:	33ff      	adds	r3, #255	@ 0xff
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	b29a      	uxth	r2, r3
 800a004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a006:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a008:	2076      	movs	r0, #118	@ 0x76
 800a00a:	183b      	adds	r3, r7, r0
 800a00c:	683a      	ldr	r2, [r7, #0]
 800a00e:	8952      	ldrh	r2, [r2, #10]
 800a010:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	6959      	ldr	r1, [r3, #20]
 800a016:	1d7b      	adds	r3, r7, #5
 800a018:	33ff      	adds	r3, #255	@ 0xff
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	b29c      	uxth	r4, r3
 800a01e:	183b      	adds	r3, r7, r0
 800a020:	881a      	ldrh	r2, [r3, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	0023      	movs	r3, r4
 800a026:	f000 ff17 	bl	800ae58 <USB_WritePMA>
 800a02a:	e1b6      	b.n	800a39a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	6a1b      	ldr	r3, [r3, #32]
 800a030:	1d7a      	adds	r2, r7, #5
 800a032:	32ff      	adds	r2, #255	@ 0xff
 800a034:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	18d3      	adds	r3, r2, r3
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	b29a      	uxth	r2, r3
 800a044:	2062      	movs	r0, #98	@ 0x62
 800a046:	183b      	adds	r3, r7, r0
 800a048:	491f      	ldr	r1, [pc, #124]	@ (800a0c8 <USB_EPStartXfer+0x754>)
 800a04a:	400a      	ands	r2, r1
 800a04c:	801a      	strh	r2, [r3, #0]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	18d3      	adds	r3, r2, r3
 800a058:	183a      	adds	r2, r7, r0
 800a05a:	8812      	ldrh	r2, [r2, #0]
 800a05c:	491b      	ldr	r1, [pc, #108]	@ (800a0cc <USB_EPStartXfer+0x758>)
 800a05e:	430a      	orrs	r2, r1
 800a060:	b292      	uxth	r2, r2
 800a062:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2250      	movs	r2, #80	@ 0x50
 800a06c:	5a9b      	ldrh	r3, [r3, r2]
 800a06e:	b29b      	uxth	r3, r3
 800a070:	001a      	movs	r2, r3
 800a072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a074:	189b      	adds	r3, r3, r2
 800a076:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	00da      	lsls	r2, r3, #3
 800a07e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a080:	18d3      	adds	r3, r2, r3
 800a082:	4a0e      	ldr	r2, [pc, #56]	@ (800a0bc <USB_EPStartXfer+0x748>)
 800a084:	4694      	mov	ip, r2
 800a086:	4463      	add	r3, ip
 800a088:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a08a:	1d7b      	adds	r3, r7, #5
 800a08c:	33ff      	adds	r3, #255	@ 0xff
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	b29a      	uxth	r2, r3
 800a092:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a094:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a096:	2076      	movs	r0, #118	@ 0x76
 800a098:	183b      	adds	r3, r7, r0
 800a09a:	683a      	ldr	r2, [r7, #0]
 800a09c:	8912      	ldrh	r2, [r2, #8]
 800a09e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	6959      	ldr	r1, [r3, #20]
 800a0a4:	1d7b      	adds	r3, r7, #5
 800a0a6:	33ff      	adds	r3, #255	@ 0xff
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	b29c      	uxth	r4, r3
 800a0ac:	183b      	adds	r3, r7, r0
 800a0ae:	881a      	ldrh	r2, [r3, #0]
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	0023      	movs	r3, r4
 800a0b4:	f000 fed0 	bl	800ae58 <USB_WritePMA>
 800a0b8:	e16f      	b.n	800a39a <USB_EPStartXfer+0xa26>
 800a0ba:	46c0      	nop			@ (mov r8, r8)
 800a0bc:	00000402 	.word	0x00000402
 800a0c0:	ffff8000 	.word	0xffff8000
 800a0c4:	00000406 	.word	0x00000406
 800a0c8:	ffff8e8f 	.word	0xffff8e8f
 800a0cc:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	6a1a      	ldr	r2, [r3, #32]
 800a0d4:	1d7b      	adds	r3, r7, #5
 800a0d6:	33ff      	adds	r3, #255	@ 0xff
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	1ad2      	subs	r2, r2, r3
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	18d3      	adds	r3, r2, r3
 800a0ea:	881b      	ldrh	r3, [r3, #0]
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	001a      	movs	r2, r3
 800a0f0:	2340      	movs	r3, #64	@ 0x40
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	d100      	bne.n	800a0f8 <USB_EPStartXfer+0x784>
 800a0f6:	e0a4      	b.n	800a242 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	785b      	ldrb	r3, [r3, #1]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d000      	beq.n	800a106 <USB_EPStartXfer+0x792>
 800a104:	e070      	b.n	800a1e8 <USB_EPStartXfer+0x874>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2250      	movs	r2, #80	@ 0x50
 800a10e:	5a9b      	ldrh	r3, [r3, r2]
 800a110:	b29b      	uxth	r3, r3
 800a112:	001a      	movs	r2, r3
 800a114:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a116:	189b      	adds	r3, r3, r2
 800a118:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	00da      	lsls	r2, r3, #3
 800a120:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a122:	18d3      	adds	r3, r2, r3
 800a124:	4abc      	ldr	r2, [pc, #752]	@ (800a418 <USB_EPStartXfer+0xaa4>)
 800a126:	4694      	mov	ip, r2
 800a128:	4463      	add	r3, ip
 800a12a:	667b      	str	r3, [r7, #100]	@ 0x64
 800a12c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a12e:	881b      	ldrh	r3, [r3, #0]
 800a130:	b29b      	uxth	r3, r3
 800a132:	059b      	lsls	r3, r3, #22
 800a134:	0d9b      	lsrs	r3, r3, #22
 800a136:	b29a      	uxth	r2, r3
 800a138:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a13a:	801a      	strh	r2, [r3, #0]
 800a13c:	1d7b      	adds	r3, r7, #5
 800a13e:	33ff      	adds	r3, #255	@ 0xff
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b3e      	cmp	r3, #62	@ 0x3e
 800a144:	d922      	bls.n	800a18c <USB_EPStartXfer+0x818>
 800a146:	1d7b      	adds	r3, r7, #5
 800a148:	33ff      	adds	r3, #255	@ 0xff
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	095b      	lsrs	r3, r3, #5
 800a14e:	21f0      	movs	r1, #240	@ 0xf0
 800a150:	187a      	adds	r2, r7, r1
 800a152:	6013      	str	r3, [r2, #0]
 800a154:	1d7b      	adds	r3, r7, #5
 800a156:	33ff      	adds	r3, #255	@ 0xff
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	221f      	movs	r2, #31
 800a15c:	4013      	ands	r3, r2
 800a15e:	d104      	bne.n	800a16a <USB_EPStartXfer+0x7f6>
 800a160:	187b      	adds	r3, r7, r1
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	3b01      	subs	r3, #1
 800a166:	187a      	adds	r2, r7, r1
 800a168:	6013      	str	r3, [r2, #0]
 800a16a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a16c:	881b      	ldrh	r3, [r3, #0]
 800a16e:	b29a      	uxth	r2, r3
 800a170:	23f0      	movs	r3, #240	@ 0xf0
 800a172:	18fb      	adds	r3, r7, r3
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	b29b      	uxth	r3, r3
 800a178:	029b      	lsls	r3, r3, #10
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	4313      	orrs	r3, r2
 800a17e:	b29b      	uxth	r3, r3
 800a180:	4aa6      	ldr	r2, [pc, #664]	@ (800a41c <USB_EPStartXfer+0xaa8>)
 800a182:	4313      	orrs	r3, r2
 800a184:	b29a      	uxth	r2, r3
 800a186:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a188:	801a      	strh	r2, [r3, #0]
 800a18a:	e048      	b.n	800a21e <USB_EPStartXfer+0x8aa>
 800a18c:	1d7b      	adds	r3, r7, #5
 800a18e:	33ff      	adds	r3, #255	@ 0xff
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d108      	bne.n	800a1a8 <USB_EPStartXfer+0x834>
 800a196:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a198:	881b      	ldrh	r3, [r3, #0]
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	4a9f      	ldr	r2, [pc, #636]	@ (800a41c <USB_EPStartXfer+0xaa8>)
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1a4:	801a      	strh	r2, [r3, #0]
 800a1a6:	e03a      	b.n	800a21e <USB_EPStartXfer+0x8aa>
 800a1a8:	1d7b      	adds	r3, r7, #5
 800a1aa:	33ff      	adds	r3, #255	@ 0xff
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	085b      	lsrs	r3, r3, #1
 800a1b0:	21f0      	movs	r1, #240	@ 0xf0
 800a1b2:	187a      	adds	r2, r7, r1
 800a1b4:	6013      	str	r3, [r2, #0]
 800a1b6:	1d7b      	adds	r3, r7, #5
 800a1b8:	33ff      	adds	r3, #255	@ 0xff
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	4013      	ands	r3, r2
 800a1c0:	d004      	beq.n	800a1cc <USB_EPStartXfer+0x858>
 800a1c2:	187b      	adds	r3, r7, r1
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	187a      	adds	r2, r7, r1
 800a1ca:	6013      	str	r3, [r2, #0]
 800a1cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1ce:	881b      	ldrh	r3, [r3, #0]
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	23f0      	movs	r3, #240	@ 0xf0
 800a1d4:	18fb      	adds	r3, r7, r3
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	029b      	lsls	r3, r3, #10
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1e4:	801a      	strh	r2, [r3, #0]
 800a1e6:	e01a      	b.n	800a21e <USB_EPStartXfer+0x8aa>
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	785b      	ldrb	r3, [r3, #1]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d116      	bne.n	800a21e <USB_EPStartXfer+0x8aa>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2250      	movs	r2, #80	@ 0x50
 800a1f4:	5a9b      	ldrh	r3, [r3, r2]
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	001a      	movs	r2, r3
 800a1fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1fc:	189b      	adds	r3, r3, r2
 800a1fe:	673b      	str	r3, [r7, #112]	@ 0x70
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	00da      	lsls	r2, r3, #3
 800a206:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a208:	18d3      	adds	r3, r2, r3
 800a20a:	4a83      	ldr	r2, [pc, #524]	@ (800a418 <USB_EPStartXfer+0xaa4>)
 800a20c:	4694      	mov	ip, r2
 800a20e:	4463      	add	r3, ip
 800a210:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a212:	1d7b      	adds	r3, r7, #5
 800a214:	33ff      	adds	r3, #255	@ 0xff
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	b29a      	uxth	r2, r3
 800a21a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a21c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a21e:	2076      	movs	r0, #118	@ 0x76
 800a220:	183b      	adds	r3, r7, r0
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	8952      	ldrh	r2, [r2, #10]
 800a226:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	6959      	ldr	r1, [r3, #20]
 800a22c:	1d7b      	adds	r3, r7, #5
 800a22e:	33ff      	adds	r3, #255	@ 0xff
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	b29c      	uxth	r4, r3
 800a234:	183b      	adds	r3, r7, r0
 800a236:	881a      	ldrh	r2, [r3, #0]
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	0023      	movs	r3, r4
 800a23c:	f000 fe0c 	bl	800ae58 <USB_WritePMA>
 800a240:	e0ab      	b.n	800a39a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	785b      	ldrb	r3, [r3, #1]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d000      	beq.n	800a24c <USB_EPStartXfer+0x8d8>
 800a24a:	e070      	b.n	800a32e <USB_EPStartXfer+0x9ba>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2250      	movs	r2, #80	@ 0x50
 800a254:	5a9b      	ldrh	r3, [r3, r2]
 800a256:	b29b      	uxth	r3, r3
 800a258:	001a      	movs	r2, r3
 800a25a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a25c:	189b      	adds	r3, r3, r2
 800a25e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	00da      	lsls	r2, r3, #3
 800a266:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a268:	18d3      	adds	r3, r2, r3
 800a26a:	4a6d      	ldr	r2, [pc, #436]	@ (800a420 <USB_EPStartXfer+0xaac>)
 800a26c:	4694      	mov	ip, r2
 800a26e:	4463      	add	r3, ip
 800a270:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a272:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a274:	881b      	ldrh	r3, [r3, #0]
 800a276:	b29b      	uxth	r3, r3
 800a278:	059b      	lsls	r3, r3, #22
 800a27a:	0d9b      	lsrs	r3, r3, #22
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a280:	801a      	strh	r2, [r3, #0]
 800a282:	1d7b      	adds	r3, r7, #5
 800a284:	33ff      	adds	r3, #255	@ 0xff
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2b3e      	cmp	r3, #62	@ 0x3e
 800a28a:	d922      	bls.n	800a2d2 <USB_EPStartXfer+0x95e>
 800a28c:	1d7b      	adds	r3, r7, #5
 800a28e:	33ff      	adds	r3, #255	@ 0xff
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	095b      	lsrs	r3, r3, #5
 800a294:	21ec      	movs	r1, #236	@ 0xec
 800a296:	187a      	adds	r2, r7, r1
 800a298:	6013      	str	r3, [r2, #0]
 800a29a:	1d7b      	adds	r3, r7, #5
 800a29c:	33ff      	adds	r3, #255	@ 0xff
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	221f      	movs	r2, #31
 800a2a2:	4013      	ands	r3, r2
 800a2a4:	d104      	bne.n	800a2b0 <USB_EPStartXfer+0x93c>
 800a2a6:	187b      	adds	r3, r7, r1
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	187a      	adds	r2, r7, r1
 800a2ae:	6013      	str	r3, [r2, #0]
 800a2b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2b2:	881b      	ldrh	r3, [r3, #0]
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	23ec      	movs	r3, #236	@ 0xec
 800a2b8:	18fb      	adds	r3, r7, r3
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	029b      	lsls	r3, r3, #10
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	4a55      	ldr	r2, [pc, #340]	@ (800a41c <USB_EPStartXfer+0xaa8>)
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2ce:	801a      	strh	r2, [r3, #0]
 800a2d0:	e052      	b.n	800a378 <USB_EPStartXfer+0xa04>
 800a2d2:	1d7b      	adds	r3, r7, #5
 800a2d4:	33ff      	adds	r3, #255	@ 0xff
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d108      	bne.n	800a2ee <USB_EPStartXfer+0x97a>
 800a2dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2de:	881b      	ldrh	r3, [r3, #0]
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	4a4e      	ldr	r2, [pc, #312]	@ (800a41c <USB_EPStartXfer+0xaa8>)
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2ea:	801a      	strh	r2, [r3, #0]
 800a2ec:	e044      	b.n	800a378 <USB_EPStartXfer+0xa04>
 800a2ee:	1d7b      	adds	r3, r7, #5
 800a2f0:	33ff      	adds	r3, #255	@ 0xff
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	085b      	lsrs	r3, r3, #1
 800a2f6:	21ec      	movs	r1, #236	@ 0xec
 800a2f8:	187a      	adds	r2, r7, r1
 800a2fa:	6013      	str	r3, [r2, #0]
 800a2fc:	1d7b      	adds	r3, r7, #5
 800a2fe:	33ff      	adds	r3, #255	@ 0xff
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2201      	movs	r2, #1
 800a304:	4013      	ands	r3, r2
 800a306:	d004      	beq.n	800a312 <USB_EPStartXfer+0x99e>
 800a308:	187b      	adds	r3, r7, r1
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3301      	adds	r3, #1
 800a30e:	187a      	adds	r2, r7, r1
 800a310:	6013      	str	r3, [r2, #0]
 800a312:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a314:	881b      	ldrh	r3, [r3, #0]
 800a316:	b29a      	uxth	r2, r3
 800a318:	23ec      	movs	r3, #236	@ 0xec
 800a31a:	18fb      	adds	r3, r7, r3
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	b29b      	uxth	r3, r3
 800a320:	029b      	lsls	r3, r3, #10
 800a322:	b29b      	uxth	r3, r3
 800a324:	4313      	orrs	r3, r2
 800a326:	b29a      	uxth	r2, r3
 800a328:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a32a:	801a      	strh	r2, [r3, #0]
 800a32c:	e024      	b.n	800a378 <USB_EPStartXfer+0xa04>
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	785b      	ldrb	r3, [r3, #1]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d120      	bne.n	800a378 <USB_EPStartXfer+0xa04>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2184      	movs	r1, #132	@ 0x84
 800a33a:	187a      	adds	r2, r7, r1
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2250      	movs	r2, #80	@ 0x50
 800a342:	5a9b      	ldrh	r3, [r3, r2]
 800a344:	b29b      	uxth	r3, r3
 800a346:	001a      	movs	r2, r3
 800a348:	187b      	adds	r3, r7, r1
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	189b      	adds	r3, r3, r2
 800a34e:	187a      	adds	r2, r7, r1
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	00da      	lsls	r2, r3, #3
 800a358:	187b      	adds	r3, r7, r1
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	18d3      	adds	r3, r2, r3
 800a35e:	4a30      	ldr	r2, [pc, #192]	@ (800a420 <USB_EPStartXfer+0xaac>)
 800a360:	4694      	mov	ip, r2
 800a362:	4463      	add	r3, ip
 800a364:	2180      	movs	r1, #128	@ 0x80
 800a366:	187a      	adds	r2, r7, r1
 800a368:	6013      	str	r3, [r2, #0]
 800a36a:	1d7b      	adds	r3, r7, #5
 800a36c:	33ff      	adds	r3, #255	@ 0xff
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	b29a      	uxth	r2, r3
 800a372:	187b      	adds	r3, r7, r1
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a378:	2076      	movs	r0, #118	@ 0x76
 800a37a:	183b      	adds	r3, r7, r0
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	8912      	ldrh	r2, [r2, #8]
 800a380:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	6959      	ldr	r1, [r3, #20]
 800a386:	1d7b      	adds	r3, r7, #5
 800a388:	33ff      	adds	r3, #255	@ 0xff
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	b29c      	uxth	r4, r3
 800a38e:	183b      	adds	r3, r7, r0
 800a390:	881a      	ldrh	r2, [r3, #0]
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	0023      	movs	r3, r4
 800a396:	f000 fd5f 	bl	800ae58 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	18d3      	adds	r3, r2, r3
 800a3a4:	881b      	ldrh	r3, [r3, #0]
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	200a      	movs	r0, #10
 800a3aa:	183b      	adds	r3, r7, r0
 800a3ac:	491d      	ldr	r1, [pc, #116]	@ (800a424 <USB_EPStartXfer+0xab0>)
 800a3ae:	400a      	ands	r2, r1
 800a3b0:	801a      	strh	r2, [r3, #0]
 800a3b2:	183b      	adds	r3, r7, r0
 800a3b4:	183a      	adds	r2, r7, r0
 800a3b6:	8812      	ldrh	r2, [r2, #0]
 800a3b8:	2110      	movs	r1, #16
 800a3ba:	404a      	eors	r2, r1
 800a3bc:	801a      	strh	r2, [r3, #0]
 800a3be:	183b      	adds	r3, r7, r0
 800a3c0:	183a      	adds	r2, r7, r0
 800a3c2:	8812      	ldrh	r2, [r2, #0]
 800a3c4:	2120      	movs	r1, #32
 800a3c6:	404a      	eors	r2, r1
 800a3c8:	801a      	strh	r2, [r3, #0]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	18d3      	adds	r3, r2, r3
 800a3d4:	183a      	adds	r2, r7, r0
 800a3d6:	8812      	ldrh	r2, [r2, #0]
 800a3d8:	4913      	ldr	r1, [pc, #76]	@ (800a428 <USB_EPStartXfer+0xab4>)
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	b292      	uxth	r2, r2
 800a3de:	801a      	strh	r2, [r3, #0]
 800a3e0:	f000 fbf4 	bl	800abcc <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	7b1b      	ldrb	r3, [r3, #12]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d000      	beq.n	800a3ee <USB_EPStartXfer+0xa7a>
 800a3ec:	e0a9      	b.n	800a542 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	699a      	ldr	r2, [r3, #24]
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d918      	bls.n	800a42c <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	1d7a      	adds	r2, r7, #5
 800a400:	32ff      	adds	r2, #255	@ 0xff
 800a402:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	699a      	ldr	r2, [r3, #24]
 800a408:	1d7b      	adds	r3, r7, #5
 800a40a:	33ff      	adds	r3, #255	@ 0xff
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	1ad2      	subs	r2, r2, r3
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	619a      	str	r2, [r3, #24]
 800a414:	e012      	b.n	800a43c <USB_EPStartXfer+0xac8>
 800a416:	46c0      	nop			@ (mov r8, r8)
 800a418:	00000406 	.word	0x00000406
 800a41c:	ffff8000 	.word	0xffff8000
 800a420:	00000402 	.word	0x00000402
 800a424:	ffff8fbf 	.word	0xffff8fbf
 800a428:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	699b      	ldr	r3, [r3, #24]
 800a430:	1d7a      	adds	r2, r7, #5
 800a432:	32ff      	adds	r2, #255	@ 0xff
 800a434:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	2200      	movs	r2, #0
 800a43a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2190      	movs	r1, #144	@ 0x90
 800a440:	187a      	adds	r2, r7, r1
 800a442:	6013      	str	r3, [r2, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2250      	movs	r2, #80	@ 0x50
 800a448:	5a9b      	ldrh	r3, [r3, r2]
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	001a      	movs	r2, r3
 800a44e:	187b      	adds	r3, r7, r1
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	189b      	adds	r3, r3, r2
 800a454:	187a      	adds	r2, r7, r1
 800a456:	6013      	str	r3, [r2, #0]
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	00da      	lsls	r2, r3, #3
 800a45e:	187b      	adds	r3, r7, r1
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	18d3      	adds	r3, r2, r3
 800a464:	4acf      	ldr	r2, [pc, #828]	@ (800a7a4 <USB_EPStartXfer+0xe30>)
 800a466:	4694      	mov	ip, r2
 800a468:	4463      	add	r3, ip
 800a46a:	218c      	movs	r1, #140	@ 0x8c
 800a46c:	187a      	adds	r2, r7, r1
 800a46e:	6013      	str	r3, [r2, #0]
 800a470:	187b      	adds	r3, r7, r1
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	881b      	ldrh	r3, [r3, #0]
 800a476:	b29b      	uxth	r3, r3
 800a478:	059b      	lsls	r3, r3, #22
 800a47a:	0d9b      	lsrs	r3, r3, #22
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	187b      	adds	r3, r7, r1
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	801a      	strh	r2, [r3, #0]
 800a484:	1d7b      	adds	r3, r7, #5
 800a486:	33ff      	adds	r3, #255	@ 0xff
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a48c:	d925      	bls.n	800a4da <USB_EPStartXfer+0xb66>
 800a48e:	1d7b      	adds	r3, r7, #5
 800a490:	33ff      	adds	r3, #255	@ 0xff
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	095b      	lsrs	r3, r3, #5
 800a496:	21e8      	movs	r1, #232	@ 0xe8
 800a498:	187a      	adds	r2, r7, r1
 800a49a:	6013      	str	r3, [r2, #0]
 800a49c:	1d7b      	adds	r3, r7, #5
 800a49e:	33ff      	adds	r3, #255	@ 0xff
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	221f      	movs	r2, #31
 800a4a4:	4013      	ands	r3, r2
 800a4a6:	d104      	bne.n	800a4b2 <USB_EPStartXfer+0xb3e>
 800a4a8:	187b      	adds	r3, r7, r1
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	187a      	adds	r2, r7, r1
 800a4b0:	6013      	str	r3, [r2, #0]
 800a4b2:	218c      	movs	r1, #140	@ 0x8c
 800a4b4:	187b      	adds	r3, r7, r1
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	881b      	ldrh	r3, [r3, #0]
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	23e8      	movs	r3, #232	@ 0xe8
 800a4be:	18fb      	adds	r3, r7, r3
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	029b      	lsls	r3, r3, #10
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	4ab6      	ldr	r2, [pc, #728]	@ (800a7a8 <USB_EPStartXfer+0xe34>)
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	187b      	adds	r3, r7, r1
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	801a      	strh	r2, [r3, #0]
 800a4d8:	e353      	b.n	800ab82 <USB_EPStartXfer+0x120e>
 800a4da:	1d7b      	adds	r3, r7, #5
 800a4dc:	33ff      	adds	r3, #255	@ 0xff
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10b      	bne.n	800a4fc <USB_EPStartXfer+0xb88>
 800a4e4:	218c      	movs	r1, #140	@ 0x8c
 800a4e6:	187b      	adds	r3, r7, r1
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	4aae      	ldr	r2, [pc, #696]	@ (800a7a8 <USB_EPStartXfer+0xe34>)
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	b29a      	uxth	r2, r3
 800a4f4:	187b      	adds	r3, r7, r1
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	801a      	strh	r2, [r3, #0]
 800a4fa:	e342      	b.n	800ab82 <USB_EPStartXfer+0x120e>
 800a4fc:	1d7b      	adds	r3, r7, #5
 800a4fe:	33ff      	adds	r3, #255	@ 0xff
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	085b      	lsrs	r3, r3, #1
 800a504:	21e8      	movs	r1, #232	@ 0xe8
 800a506:	187a      	adds	r2, r7, r1
 800a508:	6013      	str	r3, [r2, #0]
 800a50a:	1d7b      	adds	r3, r7, #5
 800a50c:	33ff      	adds	r3, #255	@ 0xff
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2201      	movs	r2, #1
 800a512:	4013      	ands	r3, r2
 800a514:	d004      	beq.n	800a520 <USB_EPStartXfer+0xbac>
 800a516:	187b      	adds	r3, r7, r1
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	3301      	adds	r3, #1
 800a51c:	187a      	adds	r2, r7, r1
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	218c      	movs	r1, #140	@ 0x8c
 800a522:	187b      	adds	r3, r7, r1
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	b29a      	uxth	r2, r3
 800a52a:	23e8      	movs	r3, #232	@ 0xe8
 800a52c:	18fb      	adds	r3, r7, r3
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	b29b      	uxth	r3, r3
 800a532:	029b      	lsls	r3, r3, #10
 800a534:	b29b      	uxth	r3, r3
 800a536:	4313      	orrs	r3, r2
 800a538:	b29a      	uxth	r2, r3
 800a53a:	187b      	adds	r3, r7, r1
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	801a      	strh	r2, [r3, #0]
 800a540:	e31f      	b.n	800ab82 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	78db      	ldrb	r3, [r3, #3]
 800a546:	2b02      	cmp	r3, #2
 800a548:	d000      	beq.n	800a54c <USB_EPStartXfer+0xbd8>
 800a54a:	e191      	b.n	800a870 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	785b      	ldrb	r3, [r3, #1]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d000      	beq.n	800a556 <USB_EPStartXfer+0xbe2>
 800a554:	e07c      	b.n	800a650 <USB_EPStartXfer+0xcdc>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	21ac      	movs	r1, #172	@ 0xac
 800a55a:	187a      	adds	r2, r7, r1
 800a55c:	6013      	str	r3, [r2, #0]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2250      	movs	r2, #80	@ 0x50
 800a562:	5a9b      	ldrh	r3, [r3, r2]
 800a564:	b29b      	uxth	r3, r3
 800a566:	001a      	movs	r2, r3
 800a568:	187b      	adds	r3, r7, r1
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	189b      	adds	r3, r3, r2
 800a56e:	187a      	adds	r2, r7, r1
 800a570:	6013      	str	r3, [r2, #0]
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	00da      	lsls	r2, r3, #3
 800a578:	187b      	adds	r3, r7, r1
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	18d3      	adds	r3, r2, r3
 800a57e:	4a8b      	ldr	r2, [pc, #556]	@ (800a7ac <USB_EPStartXfer+0xe38>)
 800a580:	4694      	mov	ip, r2
 800a582:	4463      	add	r3, ip
 800a584:	21a8      	movs	r1, #168	@ 0xa8
 800a586:	187a      	adds	r2, r7, r1
 800a588:	6013      	str	r3, [r2, #0]
 800a58a:	187b      	adds	r3, r7, r1
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	881b      	ldrh	r3, [r3, #0]
 800a590:	b29b      	uxth	r3, r3
 800a592:	059b      	lsls	r3, r3, #22
 800a594:	0d9b      	lsrs	r3, r3, #22
 800a596:	b29a      	uxth	r2, r3
 800a598:	187b      	adds	r3, r7, r1
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	801a      	strh	r2, [r3, #0]
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a5a4:	d923      	bls.n	800a5ee <USB_EPStartXfer+0xc7a>
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	095b      	lsrs	r3, r3, #5
 800a5ac:	21e4      	movs	r1, #228	@ 0xe4
 800a5ae:	187a      	adds	r2, r7, r1
 800a5b0:	6013      	str	r3, [r2, #0]
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	221f      	movs	r2, #31
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	d104      	bne.n	800a5c6 <USB_EPStartXfer+0xc52>
 800a5bc:	187b      	adds	r3, r7, r1
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	187a      	adds	r2, r7, r1
 800a5c4:	6013      	str	r3, [r2, #0]
 800a5c6:	21a8      	movs	r1, #168	@ 0xa8
 800a5c8:	187b      	adds	r3, r7, r1
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	881b      	ldrh	r3, [r3, #0]
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	23e4      	movs	r3, #228	@ 0xe4
 800a5d2:	18fb      	adds	r3, r7, r3
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	029b      	lsls	r3, r3, #10
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	4a71      	ldr	r2, [pc, #452]	@ (800a7a8 <USB_EPStartXfer+0xe34>)
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	187b      	adds	r3, r7, r1
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	801a      	strh	r2, [r3, #0]
 800a5ec:	e054      	b.n	800a698 <USB_EPStartXfer+0xd24>
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10b      	bne.n	800a60e <USB_EPStartXfer+0xc9a>
 800a5f6:	21a8      	movs	r1, #168	@ 0xa8
 800a5f8:	187b      	adds	r3, r7, r1
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	881b      	ldrh	r3, [r3, #0]
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	4a69      	ldr	r2, [pc, #420]	@ (800a7a8 <USB_EPStartXfer+0xe34>)
 800a602:	4313      	orrs	r3, r2
 800a604:	b29a      	uxth	r2, r3
 800a606:	187b      	adds	r3, r7, r1
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	801a      	strh	r2, [r3, #0]
 800a60c:	e044      	b.n	800a698 <USB_EPStartXfer+0xd24>
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	085b      	lsrs	r3, r3, #1
 800a614:	21e4      	movs	r1, #228	@ 0xe4
 800a616:	187a      	adds	r2, r7, r1
 800a618:	6013      	str	r3, [r2, #0]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	2201      	movs	r2, #1
 800a620:	4013      	ands	r3, r2
 800a622:	d004      	beq.n	800a62e <USB_EPStartXfer+0xcba>
 800a624:	187b      	adds	r3, r7, r1
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	3301      	adds	r3, #1
 800a62a:	187a      	adds	r2, r7, r1
 800a62c:	6013      	str	r3, [r2, #0]
 800a62e:	21a8      	movs	r1, #168	@ 0xa8
 800a630:	187b      	adds	r3, r7, r1
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	b29a      	uxth	r2, r3
 800a638:	23e4      	movs	r3, #228	@ 0xe4
 800a63a:	18fb      	adds	r3, r7, r3
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	b29b      	uxth	r3, r3
 800a640:	029b      	lsls	r3, r3, #10
 800a642:	b29b      	uxth	r3, r3
 800a644:	4313      	orrs	r3, r2
 800a646:	b29a      	uxth	r2, r3
 800a648:	187b      	adds	r3, r7, r1
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	801a      	strh	r2, [r3, #0]
 800a64e:	e023      	b.n	800a698 <USB_EPStartXfer+0xd24>
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	785b      	ldrb	r3, [r3, #1]
 800a654:	2b01      	cmp	r3, #1
 800a656:	d11f      	bne.n	800a698 <USB_EPStartXfer+0xd24>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	21b4      	movs	r1, #180	@ 0xb4
 800a65c:	187a      	adds	r2, r7, r1
 800a65e:	6013      	str	r3, [r2, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2250      	movs	r2, #80	@ 0x50
 800a664:	5a9b      	ldrh	r3, [r3, r2]
 800a666:	b29b      	uxth	r3, r3
 800a668:	001a      	movs	r2, r3
 800a66a:	187b      	adds	r3, r7, r1
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	189b      	adds	r3, r3, r2
 800a670:	187a      	adds	r2, r7, r1
 800a672:	6013      	str	r3, [r2, #0]
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	00da      	lsls	r2, r3, #3
 800a67a:	187b      	adds	r3, r7, r1
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	18d3      	adds	r3, r2, r3
 800a680:	4a4a      	ldr	r2, [pc, #296]	@ (800a7ac <USB_EPStartXfer+0xe38>)
 800a682:	4694      	mov	ip, r2
 800a684:	4463      	add	r3, ip
 800a686:	21b0      	movs	r1, #176	@ 0xb0
 800a688:	187a      	adds	r2, r7, r1
 800a68a:	6013      	str	r3, [r2, #0]
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	b29a      	uxth	r2, r3
 800a692:	187b      	adds	r3, r7, r1
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	801a      	strh	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	22a4      	movs	r2, #164	@ 0xa4
 800a69c:	18ba      	adds	r2, r7, r2
 800a69e:	6013      	str	r3, [r2, #0]
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	785b      	ldrb	r3, [r3, #1]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d000      	beq.n	800a6aa <USB_EPStartXfer+0xd36>
 800a6a8:	e082      	b.n	800a7b0 <USB_EPStartXfer+0xe3c>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	219c      	movs	r1, #156	@ 0x9c
 800a6ae:	187a      	adds	r2, r7, r1
 800a6b0:	6013      	str	r3, [r2, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2250      	movs	r2, #80	@ 0x50
 800a6b6:	5a9b      	ldrh	r3, [r3, r2]
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	001a      	movs	r2, r3
 800a6bc:	187b      	adds	r3, r7, r1
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	189b      	adds	r3, r3, r2
 800a6c2:	187a      	adds	r2, r7, r1
 800a6c4:	6013      	str	r3, [r2, #0]
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	00da      	lsls	r2, r3, #3
 800a6cc:	187b      	adds	r3, r7, r1
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	18d3      	adds	r3, r2, r3
 800a6d2:	4a34      	ldr	r2, [pc, #208]	@ (800a7a4 <USB_EPStartXfer+0xe30>)
 800a6d4:	4694      	mov	ip, r2
 800a6d6:	4463      	add	r3, ip
 800a6d8:	2198      	movs	r1, #152	@ 0x98
 800a6da:	187a      	adds	r2, r7, r1
 800a6dc:	6013      	str	r3, [r2, #0]
 800a6de:	187b      	adds	r3, r7, r1
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	881b      	ldrh	r3, [r3, #0]
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	059b      	lsls	r3, r3, #22
 800a6e8:	0d9b      	lsrs	r3, r3, #22
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	187b      	adds	r3, r7, r1
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	801a      	strh	r2, [r3, #0]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6f8:	d923      	bls.n	800a742 <USB_EPStartXfer+0xdce>
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	095b      	lsrs	r3, r3, #5
 800a700:	21e0      	movs	r1, #224	@ 0xe0
 800a702:	187a      	adds	r2, r7, r1
 800a704:	6013      	str	r3, [r2, #0]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	221f      	movs	r2, #31
 800a70c:	4013      	ands	r3, r2
 800a70e:	d104      	bne.n	800a71a <USB_EPStartXfer+0xda6>
 800a710:	187b      	adds	r3, r7, r1
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3b01      	subs	r3, #1
 800a716:	187a      	adds	r2, r7, r1
 800a718:	6013      	str	r3, [r2, #0]
 800a71a:	2198      	movs	r1, #152	@ 0x98
 800a71c:	187b      	adds	r3, r7, r1
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	881b      	ldrh	r3, [r3, #0]
 800a722:	b29a      	uxth	r2, r3
 800a724:	23e0      	movs	r3, #224	@ 0xe0
 800a726:	18fb      	adds	r3, r7, r3
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	029b      	lsls	r3, r3, #10
 800a72e:	b29b      	uxth	r3, r3
 800a730:	4313      	orrs	r3, r2
 800a732:	b29b      	uxth	r3, r3
 800a734:	4a1c      	ldr	r2, [pc, #112]	@ (800a7a8 <USB_EPStartXfer+0xe34>)
 800a736:	4313      	orrs	r3, r2
 800a738:	b29a      	uxth	r2, r3
 800a73a:	187b      	adds	r3, r7, r1
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	801a      	strh	r2, [r3, #0]
 800a740:	e057      	b.n	800a7f2 <USB_EPStartXfer+0xe7e>
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10b      	bne.n	800a762 <USB_EPStartXfer+0xdee>
 800a74a:	2198      	movs	r1, #152	@ 0x98
 800a74c:	187b      	adds	r3, r7, r1
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	881b      	ldrh	r3, [r3, #0]
 800a752:	b29b      	uxth	r3, r3
 800a754:	4a14      	ldr	r2, [pc, #80]	@ (800a7a8 <USB_EPStartXfer+0xe34>)
 800a756:	4313      	orrs	r3, r2
 800a758:	b29a      	uxth	r2, r3
 800a75a:	187b      	adds	r3, r7, r1
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	801a      	strh	r2, [r3, #0]
 800a760:	e047      	b.n	800a7f2 <USB_EPStartXfer+0xe7e>
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	085b      	lsrs	r3, r3, #1
 800a768:	21e0      	movs	r1, #224	@ 0xe0
 800a76a:	187a      	adds	r2, r7, r1
 800a76c:	6013      	str	r3, [r2, #0]
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	2201      	movs	r2, #1
 800a774:	4013      	ands	r3, r2
 800a776:	d004      	beq.n	800a782 <USB_EPStartXfer+0xe0e>
 800a778:	187b      	adds	r3, r7, r1
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	3301      	adds	r3, #1
 800a77e:	187a      	adds	r2, r7, r1
 800a780:	6013      	str	r3, [r2, #0]
 800a782:	2198      	movs	r1, #152	@ 0x98
 800a784:	187b      	adds	r3, r7, r1
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	881b      	ldrh	r3, [r3, #0]
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	23e0      	movs	r3, #224	@ 0xe0
 800a78e:	18fb      	adds	r3, r7, r3
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	b29b      	uxth	r3, r3
 800a794:	029b      	lsls	r3, r3, #10
 800a796:	b29b      	uxth	r3, r3
 800a798:	4313      	orrs	r3, r2
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	187b      	adds	r3, r7, r1
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	801a      	strh	r2, [r3, #0]
 800a7a2:	e026      	b.n	800a7f2 <USB_EPStartXfer+0xe7e>
 800a7a4:	00000406 	.word	0x00000406
 800a7a8:	ffff8000 	.word	0xffff8000
 800a7ac:	00000402 	.word	0x00000402
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	785b      	ldrb	r3, [r3, #1]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d11c      	bne.n	800a7f2 <USB_EPStartXfer+0xe7e>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2250      	movs	r2, #80	@ 0x50
 800a7bc:	5a9b      	ldrh	r3, [r3, r2]
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	001a      	movs	r2, r3
 800a7c2:	21a4      	movs	r1, #164	@ 0xa4
 800a7c4:	187b      	adds	r3, r7, r1
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	189b      	adds	r3, r3, r2
 800a7ca:	187a      	adds	r2, r7, r1
 800a7cc:	6013      	str	r3, [r2, #0]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	00da      	lsls	r2, r3, #3
 800a7d4:	187b      	adds	r3, r7, r1
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	18d3      	adds	r3, r2, r3
 800a7da:	4ad2      	ldr	r2, [pc, #840]	@ (800ab24 <USB_EPStartXfer+0x11b0>)
 800a7dc:	4694      	mov	ip, r2
 800a7de:	4463      	add	r3, ip
 800a7e0:	21a0      	movs	r1, #160	@ 0xa0
 800a7e2:	187a      	adds	r2, r7, r1
 800a7e4:	6013      	str	r3, [r2, #0]
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	187b      	adds	r3, r7, r1
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	69db      	ldr	r3, [r3, #28]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d100      	bne.n	800a7fc <USB_EPStartXfer+0xe88>
 800a7fa:	e1c2      	b.n	800ab82 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	18d2      	adds	r2, r2, r3
 800a806:	2196      	movs	r1, #150	@ 0x96
 800a808:	187b      	adds	r3, r7, r1
 800a80a:	8812      	ldrh	r2, [r2, #0]
 800a80c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a80e:	187b      	adds	r3, r7, r1
 800a810:	881a      	ldrh	r2, [r3, #0]
 800a812:	2380      	movs	r3, #128	@ 0x80
 800a814:	01db      	lsls	r3, r3, #7
 800a816:	4013      	ands	r3, r2
 800a818:	d004      	beq.n	800a824 <USB_EPStartXfer+0xeb0>
 800a81a:	187b      	adds	r3, r7, r1
 800a81c:	881b      	ldrh	r3, [r3, #0]
 800a81e:	2240      	movs	r2, #64	@ 0x40
 800a820:	4013      	ands	r3, r2
 800a822:	d10d      	bne.n	800a840 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a824:	2196      	movs	r1, #150	@ 0x96
 800a826:	187b      	adds	r3, r7, r1
 800a828:	881a      	ldrh	r2, [r3, #0]
 800a82a:	2380      	movs	r3, #128	@ 0x80
 800a82c:	01db      	lsls	r3, r3, #7
 800a82e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a830:	d000      	beq.n	800a834 <USB_EPStartXfer+0xec0>
 800a832:	e1a6      	b.n	800ab82 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a834:	187b      	adds	r3, r7, r1
 800a836:	881b      	ldrh	r3, [r3, #0]
 800a838:	2240      	movs	r2, #64	@ 0x40
 800a83a:	4013      	ands	r3, r2
 800a83c:	d000      	beq.n	800a840 <USB_EPStartXfer+0xecc>
 800a83e:	e1a0      	b.n	800ab82 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	18d3      	adds	r3, r2, r3
 800a84a:	881b      	ldrh	r3, [r3, #0]
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	2094      	movs	r0, #148	@ 0x94
 800a850:	183b      	adds	r3, r7, r0
 800a852:	49b5      	ldr	r1, [pc, #724]	@ (800ab28 <USB_EPStartXfer+0x11b4>)
 800a854:	400a      	ands	r2, r1
 800a856:	801a      	strh	r2, [r3, #0]
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	18d3      	adds	r3, r2, r3
 800a862:	183a      	adds	r2, r7, r0
 800a864:	8812      	ldrh	r2, [r2, #0]
 800a866:	49b1      	ldr	r1, [pc, #708]	@ (800ab2c <USB_EPStartXfer+0x11b8>)
 800a868:	430a      	orrs	r2, r1
 800a86a:	b292      	uxth	r2, r2
 800a86c:	801a      	strh	r2, [r3, #0]
 800a86e:	e188      	b.n	800ab82 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	78db      	ldrb	r3, [r3, #3]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d000      	beq.n	800a87a <USB_EPStartXfer+0xf06>
 800a878:	e181      	b.n	800ab7e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	699a      	ldr	r2, [r3, #24]
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	429a      	cmp	r2, r3
 800a884:	d90d      	bls.n	800a8a2 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	1d7a      	adds	r2, r7, #5
 800a88c:	32ff      	adds	r2, #255	@ 0xff
 800a88e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	699a      	ldr	r2, [r3, #24]
 800a894:	1d7b      	adds	r3, r7, #5
 800a896:	33ff      	adds	r3, #255	@ 0xff
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	1ad2      	subs	r2, r2, r3
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	619a      	str	r2, [r3, #24]
 800a8a0:	e007      	b.n	800a8b2 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	1d7a      	adds	r2, r7, #5
 800a8a8:	32ff      	adds	r2, #255	@ 0xff
 800a8aa:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	785b      	ldrb	r3, [r3, #1]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d000      	beq.n	800a8bc <USB_EPStartXfer+0xf48>
 800a8ba:	e082      	b.n	800a9c2 <USB_EPStartXfer+0x104e>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	21cc      	movs	r1, #204	@ 0xcc
 800a8c0:	187a      	adds	r2, r7, r1
 800a8c2:	6013      	str	r3, [r2, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2250      	movs	r2, #80	@ 0x50
 800a8c8:	5a9b      	ldrh	r3, [r3, r2]
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	001a      	movs	r2, r3
 800a8ce:	187b      	adds	r3, r7, r1
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	189b      	adds	r3, r3, r2
 800a8d4:	187a      	adds	r2, r7, r1
 800a8d6:	6013      	str	r3, [r2, #0]
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	00da      	lsls	r2, r3, #3
 800a8de:	187b      	adds	r3, r7, r1
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	18d3      	adds	r3, r2, r3
 800a8e4:	4a92      	ldr	r2, [pc, #584]	@ (800ab30 <USB_EPStartXfer+0x11bc>)
 800a8e6:	4694      	mov	ip, r2
 800a8e8:	4463      	add	r3, ip
 800a8ea:	21c8      	movs	r1, #200	@ 0xc8
 800a8ec:	187a      	adds	r2, r7, r1
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	187b      	adds	r3, r7, r1
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	881b      	ldrh	r3, [r3, #0]
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	059b      	lsls	r3, r3, #22
 800a8fa:	0d9b      	lsrs	r3, r3, #22
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	187b      	adds	r3, r7, r1
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	801a      	strh	r2, [r3, #0]
 800a904:	1d7b      	adds	r3, r7, #5
 800a906:	33ff      	adds	r3, #255	@ 0xff
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a90c:	d925      	bls.n	800a95a <USB_EPStartXfer+0xfe6>
 800a90e:	1d7b      	adds	r3, r7, #5
 800a910:	33ff      	adds	r3, #255	@ 0xff
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	095b      	lsrs	r3, r3, #5
 800a916:	21dc      	movs	r1, #220	@ 0xdc
 800a918:	187a      	adds	r2, r7, r1
 800a91a:	6013      	str	r3, [r2, #0]
 800a91c:	1d7b      	adds	r3, r7, #5
 800a91e:	33ff      	adds	r3, #255	@ 0xff
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	221f      	movs	r2, #31
 800a924:	4013      	ands	r3, r2
 800a926:	d104      	bne.n	800a932 <USB_EPStartXfer+0xfbe>
 800a928:	187b      	adds	r3, r7, r1
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	187a      	adds	r2, r7, r1
 800a930:	6013      	str	r3, [r2, #0]
 800a932:	21c8      	movs	r1, #200	@ 0xc8
 800a934:	187b      	adds	r3, r7, r1
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	881b      	ldrh	r3, [r3, #0]
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	23dc      	movs	r3, #220	@ 0xdc
 800a93e:	18fb      	adds	r3, r7, r3
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	b29b      	uxth	r3, r3
 800a944:	029b      	lsls	r3, r3, #10
 800a946:	b29b      	uxth	r3, r3
 800a948:	4313      	orrs	r3, r2
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	4a79      	ldr	r2, [pc, #484]	@ (800ab34 <USB_EPStartXfer+0x11c0>)
 800a94e:	4313      	orrs	r3, r2
 800a950:	b29a      	uxth	r2, r3
 800a952:	187b      	adds	r3, r7, r1
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	801a      	strh	r2, [r3, #0]
 800a958:	e058      	b.n	800aa0c <USB_EPStartXfer+0x1098>
 800a95a:	1d7b      	adds	r3, r7, #5
 800a95c:	33ff      	adds	r3, #255	@ 0xff
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10b      	bne.n	800a97c <USB_EPStartXfer+0x1008>
 800a964:	21c8      	movs	r1, #200	@ 0xc8
 800a966:	187b      	adds	r3, r7, r1
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	881b      	ldrh	r3, [r3, #0]
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	4a71      	ldr	r2, [pc, #452]	@ (800ab34 <USB_EPStartXfer+0x11c0>)
 800a970:	4313      	orrs	r3, r2
 800a972:	b29a      	uxth	r2, r3
 800a974:	187b      	adds	r3, r7, r1
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	801a      	strh	r2, [r3, #0]
 800a97a:	e047      	b.n	800aa0c <USB_EPStartXfer+0x1098>
 800a97c:	1d7b      	adds	r3, r7, #5
 800a97e:	33ff      	adds	r3, #255	@ 0xff
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	085b      	lsrs	r3, r3, #1
 800a984:	21dc      	movs	r1, #220	@ 0xdc
 800a986:	187a      	adds	r2, r7, r1
 800a988:	6013      	str	r3, [r2, #0]
 800a98a:	1d7b      	adds	r3, r7, #5
 800a98c:	33ff      	adds	r3, #255	@ 0xff
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2201      	movs	r2, #1
 800a992:	4013      	ands	r3, r2
 800a994:	d004      	beq.n	800a9a0 <USB_EPStartXfer+0x102c>
 800a996:	187b      	adds	r3, r7, r1
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	3301      	adds	r3, #1
 800a99c:	187a      	adds	r2, r7, r1
 800a99e:	6013      	str	r3, [r2, #0]
 800a9a0:	21c8      	movs	r1, #200	@ 0xc8
 800a9a2:	187b      	adds	r3, r7, r1
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	881b      	ldrh	r3, [r3, #0]
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	23dc      	movs	r3, #220	@ 0xdc
 800a9ac:	18fb      	adds	r3, r7, r3
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	029b      	lsls	r3, r3, #10
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	187b      	adds	r3, r7, r1
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	801a      	strh	r2, [r3, #0]
 800a9c0:	e024      	b.n	800aa0c <USB_EPStartXfer+0x1098>
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	785b      	ldrb	r3, [r3, #1]
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d120      	bne.n	800aa0c <USB_EPStartXfer+0x1098>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	21d4      	movs	r1, #212	@ 0xd4
 800a9ce:	187a      	adds	r2, r7, r1
 800a9d0:	6013      	str	r3, [r2, #0]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2250      	movs	r2, #80	@ 0x50
 800a9d6:	5a9b      	ldrh	r3, [r3, r2]
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	001a      	movs	r2, r3
 800a9dc:	187b      	adds	r3, r7, r1
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	189b      	adds	r3, r3, r2
 800a9e2:	187a      	adds	r2, r7, r1
 800a9e4:	6013      	str	r3, [r2, #0]
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	00da      	lsls	r2, r3, #3
 800a9ec:	187b      	adds	r3, r7, r1
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	18d3      	adds	r3, r2, r3
 800a9f2:	4a4f      	ldr	r2, [pc, #316]	@ (800ab30 <USB_EPStartXfer+0x11bc>)
 800a9f4:	4694      	mov	ip, r2
 800a9f6:	4463      	add	r3, ip
 800a9f8:	21d0      	movs	r1, #208	@ 0xd0
 800a9fa:	187a      	adds	r2, r7, r1
 800a9fc:	6013      	str	r3, [r2, #0]
 800a9fe:	1d7b      	adds	r3, r7, #5
 800aa00:	33ff      	adds	r3, #255	@ 0xff
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	187b      	adds	r3, r7, r1
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	801a      	strh	r2, [r3, #0]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	22c4      	movs	r2, #196	@ 0xc4
 800aa10:	18ba      	adds	r2, r7, r2
 800aa12:	6013      	str	r3, [r2, #0]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	785b      	ldrb	r3, [r3, #1]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d000      	beq.n	800aa1e <USB_EPStartXfer+0x10aa>
 800aa1c:	e08c      	b.n	800ab38 <USB_EPStartXfer+0x11c4>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	21bc      	movs	r1, #188	@ 0xbc
 800aa22:	187a      	adds	r2, r7, r1
 800aa24:	6013      	str	r3, [r2, #0]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2250      	movs	r2, #80	@ 0x50
 800aa2a:	5a9b      	ldrh	r3, [r3, r2]
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	001a      	movs	r2, r3
 800aa30:	187b      	adds	r3, r7, r1
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	189b      	adds	r3, r3, r2
 800aa36:	187a      	adds	r2, r7, r1
 800aa38:	6013      	str	r3, [r2, #0]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	00da      	lsls	r2, r3, #3
 800aa40:	187b      	adds	r3, r7, r1
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	18d3      	adds	r3, r2, r3
 800aa46:	4a37      	ldr	r2, [pc, #220]	@ (800ab24 <USB_EPStartXfer+0x11b0>)
 800aa48:	4694      	mov	ip, r2
 800aa4a:	4463      	add	r3, ip
 800aa4c:	21b8      	movs	r1, #184	@ 0xb8
 800aa4e:	187a      	adds	r2, r7, r1
 800aa50:	6013      	str	r3, [r2, #0]
 800aa52:	187b      	adds	r3, r7, r1
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	881b      	ldrh	r3, [r3, #0]
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	059b      	lsls	r3, r3, #22
 800aa5c:	0d9b      	lsrs	r3, r3, #22
 800aa5e:	b29a      	uxth	r2, r3
 800aa60:	187b      	adds	r3, r7, r1
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	801a      	strh	r2, [r3, #0]
 800aa66:	1d7b      	adds	r3, r7, #5
 800aa68:	33ff      	adds	r3, #255	@ 0xff
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa6e:	d925      	bls.n	800aabc <USB_EPStartXfer+0x1148>
 800aa70:	1d7b      	adds	r3, r7, #5
 800aa72:	33ff      	adds	r3, #255	@ 0xff
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	095b      	lsrs	r3, r3, #5
 800aa78:	21d8      	movs	r1, #216	@ 0xd8
 800aa7a:	187a      	adds	r2, r7, r1
 800aa7c:	6013      	str	r3, [r2, #0]
 800aa7e:	1d7b      	adds	r3, r7, #5
 800aa80:	33ff      	adds	r3, #255	@ 0xff
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	221f      	movs	r2, #31
 800aa86:	4013      	ands	r3, r2
 800aa88:	d104      	bne.n	800aa94 <USB_EPStartXfer+0x1120>
 800aa8a:	187b      	adds	r3, r7, r1
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	187a      	adds	r2, r7, r1
 800aa92:	6013      	str	r3, [r2, #0]
 800aa94:	21b8      	movs	r1, #184	@ 0xb8
 800aa96:	187b      	adds	r3, r7, r1
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	b29a      	uxth	r2, r3
 800aa9e:	23d8      	movs	r3, #216	@ 0xd8
 800aaa0:	18fb      	adds	r3, r7, r3
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	029b      	lsls	r3, r3, #10
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	4a21      	ldr	r2, [pc, #132]	@ (800ab34 <USB_EPStartXfer+0x11c0>)
 800aab0:	4313      	orrs	r3, r2
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	187b      	adds	r3, r7, r1
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	801a      	strh	r2, [r3, #0]
 800aaba:	e062      	b.n	800ab82 <USB_EPStartXfer+0x120e>
 800aabc:	1d7b      	adds	r3, r7, #5
 800aabe:	33ff      	adds	r3, #255	@ 0xff
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10b      	bne.n	800aade <USB_EPStartXfer+0x116a>
 800aac6:	21b8      	movs	r1, #184	@ 0xb8
 800aac8:	187b      	adds	r3, r7, r1
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	881b      	ldrh	r3, [r3, #0]
 800aace:	b29b      	uxth	r3, r3
 800aad0:	4a18      	ldr	r2, [pc, #96]	@ (800ab34 <USB_EPStartXfer+0x11c0>)
 800aad2:	4313      	orrs	r3, r2
 800aad4:	b29a      	uxth	r2, r3
 800aad6:	187b      	adds	r3, r7, r1
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	801a      	strh	r2, [r3, #0]
 800aadc:	e051      	b.n	800ab82 <USB_EPStartXfer+0x120e>
 800aade:	1d7b      	adds	r3, r7, #5
 800aae0:	33ff      	adds	r3, #255	@ 0xff
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	085b      	lsrs	r3, r3, #1
 800aae6:	21d8      	movs	r1, #216	@ 0xd8
 800aae8:	187a      	adds	r2, r7, r1
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	1d7b      	adds	r3, r7, #5
 800aaee:	33ff      	adds	r3, #255	@ 0xff
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	4013      	ands	r3, r2
 800aaf6:	d004      	beq.n	800ab02 <USB_EPStartXfer+0x118e>
 800aaf8:	187b      	adds	r3, r7, r1
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	3301      	adds	r3, #1
 800aafe:	187a      	adds	r2, r7, r1
 800ab00:	6013      	str	r3, [r2, #0]
 800ab02:	21b8      	movs	r1, #184	@ 0xb8
 800ab04:	187b      	adds	r3, r7, r1
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	881b      	ldrh	r3, [r3, #0]
 800ab0a:	b29a      	uxth	r2, r3
 800ab0c:	23d8      	movs	r3, #216	@ 0xd8
 800ab0e:	18fb      	adds	r3, r7, r3
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	029b      	lsls	r3, r3, #10
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	b29a      	uxth	r2, r3
 800ab1c:	187b      	adds	r3, r7, r1
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	801a      	strh	r2, [r3, #0]
 800ab22:	e02e      	b.n	800ab82 <USB_EPStartXfer+0x120e>
 800ab24:	00000406 	.word	0x00000406
 800ab28:	ffff8f8f 	.word	0xffff8f8f
 800ab2c:	ffff80c0 	.word	0xffff80c0
 800ab30:	00000402 	.word	0x00000402
 800ab34:	ffff8000 	.word	0xffff8000
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	785b      	ldrb	r3, [r3, #1]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d120      	bne.n	800ab82 <USB_EPStartXfer+0x120e>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2250      	movs	r2, #80	@ 0x50
 800ab44:	5a9b      	ldrh	r3, [r3, r2]
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	001a      	movs	r2, r3
 800ab4a:	21c4      	movs	r1, #196	@ 0xc4
 800ab4c:	187b      	adds	r3, r7, r1
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	189b      	adds	r3, r3, r2
 800ab52:	187a      	adds	r2, r7, r1
 800ab54:	6013      	str	r3, [r2, #0]
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	00da      	lsls	r2, r3, #3
 800ab5c:	187b      	adds	r3, r7, r1
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	18d3      	adds	r3, r2, r3
 800ab62:	4a1d      	ldr	r2, [pc, #116]	@ (800abd8 <USB_EPStartXfer+0x1264>)
 800ab64:	4694      	mov	ip, r2
 800ab66:	4463      	add	r3, ip
 800ab68:	21c0      	movs	r1, #192	@ 0xc0
 800ab6a:	187a      	adds	r2, r7, r1
 800ab6c:	6013      	str	r3, [r2, #0]
 800ab6e:	1d7b      	adds	r3, r7, #5
 800ab70:	33ff      	adds	r3, #255	@ 0xff
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	187b      	adds	r3, r7, r1
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	801a      	strh	r2, [r3, #0]
 800ab7c:	e001      	b.n	800ab82 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e025      	b.n	800abce <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	18d3      	adds	r3, r2, r3
 800ab8c:	881b      	ldrh	r3, [r3, #0]
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	208a      	movs	r0, #138	@ 0x8a
 800ab92:	183b      	adds	r3, r7, r0
 800ab94:	4911      	ldr	r1, [pc, #68]	@ (800abdc <USB_EPStartXfer+0x1268>)
 800ab96:	400a      	ands	r2, r1
 800ab98:	801a      	strh	r2, [r3, #0]
 800ab9a:	183b      	adds	r3, r7, r0
 800ab9c:	183a      	adds	r2, r7, r0
 800ab9e:	8812      	ldrh	r2, [r2, #0]
 800aba0:	2180      	movs	r1, #128	@ 0x80
 800aba2:	0149      	lsls	r1, r1, #5
 800aba4:	404a      	eors	r2, r1
 800aba6:	801a      	strh	r2, [r3, #0]
 800aba8:	183b      	adds	r3, r7, r0
 800abaa:	183a      	adds	r2, r7, r0
 800abac:	8812      	ldrh	r2, [r2, #0]
 800abae:	2180      	movs	r1, #128	@ 0x80
 800abb0:	0189      	lsls	r1, r1, #6
 800abb2:	404a      	eors	r2, r1
 800abb4:	801a      	strh	r2, [r3, #0]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	18d3      	adds	r3, r2, r3
 800abc0:	183a      	adds	r2, r7, r0
 800abc2:	8812      	ldrh	r2, [r2, #0]
 800abc4:	4906      	ldr	r1, [pc, #24]	@ (800abe0 <USB_EPStartXfer+0x126c>)
 800abc6:	430a      	orrs	r2, r1
 800abc8:	b292      	uxth	r2, r2
 800abca:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	0018      	movs	r0, r3
 800abd0:	46bd      	mov	sp, r7
 800abd2:	b043      	add	sp, #268	@ 0x10c
 800abd4:	bd90      	pop	{r4, r7, pc}
 800abd6:	46c0      	nop			@ (mov r8, r8)
 800abd8:	00000406 	.word	0x00000406
 800abdc:	ffffbf8f 	.word	0xffffbf8f
 800abe0:	ffff8080 	.word	0xffff8080

0800abe4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	785b      	ldrb	r3, [r3, #1]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d01d      	beq.n	800ac32 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	18d3      	adds	r3, r2, r3
 800ac00:	881b      	ldrh	r3, [r3, #0]
 800ac02:	b29a      	uxth	r2, r3
 800ac04:	200c      	movs	r0, #12
 800ac06:	183b      	adds	r3, r7, r0
 800ac08:	491b      	ldr	r1, [pc, #108]	@ (800ac78 <USB_EPSetStall+0x94>)
 800ac0a:	400a      	ands	r2, r1
 800ac0c:	801a      	strh	r2, [r3, #0]
 800ac0e:	183b      	adds	r3, r7, r0
 800ac10:	183a      	adds	r2, r7, r0
 800ac12:	8812      	ldrh	r2, [r2, #0]
 800ac14:	2110      	movs	r1, #16
 800ac16:	404a      	eors	r2, r1
 800ac18:	801a      	strh	r2, [r3, #0]
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	18d3      	adds	r3, r2, r3
 800ac24:	183a      	adds	r2, r7, r0
 800ac26:	8812      	ldrh	r2, [r2, #0]
 800ac28:	4914      	ldr	r1, [pc, #80]	@ (800ac7c <USB_EPSetStall+0x98>)
 800ac2a:	430a      	orrs	r2, r1
 800ac2c:	b292      	uxth	r2, r2
 800ac2e:	801a      	strh	r2, [r3, #0]
 800ac30:	e01d      	b.n	800ac6e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	18d3      	adds	r3, r2, r3
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	200e      	movs	r0, #14
 800ac42:	183b      	adds	r3, r7, r0
 800ac44:	490e      	ldr	r1, [pc, #56]	@ (800ac80 <USB_EPSetStall+0x9c>)
 800ac46:	400a      	ands	r2, r1
 800ac48:	801a      	strh	r2, [r3, #0]
 800ac4a:	183b      	adds	r3, r7, r0
 800ac4c:	183a      	adds	r2, r7, r0
 800ac4e:	8812      	ldrh	r2, [r2, #0]
 800ac50:	2180      	movs	r1, #128	@ 0x80
 800ac52:	0149      	lsls	r1, r1, #5
 800ac54:	404a      	eors	r2, r1
 800ac56:	801a      	strh	r2, [r3, #0]
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	18d3      	adds	r3, r2, r3
 800ac62:	183a      	adds	r2, r7, r0
 800ac64:	8812      	ldrh	r2, [r2, #0]
 800ac66:	4905      	ldr	r1, [pc, #20]	@ (800ac7c <USB_EPSetStall+0x98>)
 800ac68:	430a      	orrs	r2, r1
 800ac6a:	b292      	uxth	r2, r2
 800ac6c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	0018      	movs	r0, r3
 800ac72:	46bd      	mov	sp, r7
 800ac74:	b004      	add	sp, #16
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	ffff8fbf 	.word	0xffff8fbf
 800ac7c:	ffff8080 	.word	0xffff8080
 800ac80:	ffffbf8f 	.word	0xffffbf8f

0800ac84 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	7b1b      	ldrb	r3, [r3, #12]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d000      	beq.n	800ac98 <USB_EPClearStall+0x14>
 800ac96:	e095      	b.n	800adc4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	785b      	ldrb	r3, [r3, #1]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d046      	beq.n	800ad2e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	18d2      	adds	r2, r2, r3
 800acaa:	2110      	movs	r1, #16
 800acac:	187b      	adds	r3, r7, r1
 800acae:	8812      	ldrh	r2, [r2, #0]
 800acb0:	801a      	strh	r2, [r3, #0]
 800acb2:	187b      	adds	r3, r7, r1
 800acb4:	881b      	ldrh	r3, [r3, #0]
 800acb6:	2240      	movs	r2, #64	@ 0x40
 800acb8:	4013      	ands	r3, r2
 800acba:	d016      	beq.n	800acea <USB_EPClearStall+0x66>
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	18d3      	adds	r3, r2, r3
 800acc6:	881b      	ldrh	r3, [r3, #0]
 800acc8:	b29a      	uxth	r2, r3
 800acca:	200e      	movs	r0, #14
 800accc:	183b      	adds	r3, r7, r0
 800acce:	4940      	ldr	r1, [pc, #256]	@ (800add0 <USB_EPClearStall+0x14c>)
 800acd0:	400a      	ands	r2, r1
 800acd2:	801a      	strh	r2, [r3, #0]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	18d3      	adds	r3, r2, r3
 800acde:	183a      	adds	r2, r7, r0
 800ace0:	8812      	ldrh	r2, [r2, #0]
 800ace2:	493c      	ldr	r1, [pc, #240]	@ (800add4 <USB_EPClearStall+0x150>)
 800ace4:	430a      	orrs	r2, r1
 800ace6:	b292      	uxth	r2, r2
 800ace8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	78db      	ldrb	r3, [r3, #3]
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d068      	beq.n	800adc4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	18d3      	adds	r3, r2, r3
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	b29a      	uxth	r2, r3
 800ad00:	200c      	movs	r0, #12
 800ad02:	183b      	adds	r3, r7, r0
 800ad04:	4934      	ldr	r1, [pc, #208]	@ (800add8 <USB_EPClearStall+0x154>)
 800ad06:	400a      	ands	r2, r1
 800ad08:	801a      	strh	r2, [r3, #0]
 800ad0a:	183b      	adds	r3, r7, r0
 800ad0c:	183a      	adds	r2, r7, r0
 800ad0e:	8812      	ldrh	r2, [r2, #0]
 800ad10:	2120      	movs	r1, #32
 800ad12:	404a      	eors	r2, r1
 800ad14:	801a      	strh	r2, [r3, #0]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	18d3      	adds	r3, r2, r3
 800ad20:	183a      	adds	r2, r7, r0
 800ad22:	8812      	ldrh	r2, [r2, #0]
 800ad24:	492d      	ldr	r1, [pc, #180]	@ (800addc <USB_EPClearStall+0x158>)
 800ad26:	430a      	orrs	r2, r1
 800ad28:	b292      	uxth	r2, r2
 800ad2a:	801a      	strh	r2, [r3, #0]
 800ad2c:	e04a      	b.n	800adc4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	18d2      	adds	r2, r2, r3
 800ad38:	2116      	movs	r1, #22
 800ad3a:	187b      	adds	r3, r7, r1
 800ad3c:	8812      	ldrh	r2, [r2, #0]
 800ad3e:	801a      	strh	r2, [r3, #0]
 800ad40:	187b      	adds	r3, r7, r1
 800ad42:	881a      	ldrh	r2, [r3, #0]
 800ad44:	2380      	movs	r3, #128	@ 0x80
 800ad46:	01db      	lsls	r3, r3, #7
 800ad48:	4013      	ands	r3, r2
 800ad4a:	d016      	beq.n	800ad7a <USB_EPClearStall+0xf6>
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	18d3      	adds	r3, r2, r3
 800ad56:	881b      	ldrh	r3, [r3, #0]
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	2014      	movs	r0, #20
 800ad5c:	183b      	adds	r3, r7, r0
 800ad5e:	491c      	ldr	r1, [pc, #112]	@ (800add0 <USB_EPClearStall+0x14c>)
 800ad60:	400a      	ands	r2, r1
 800ad62:	801a      	strh	r2, [r3, #0]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	18d3      	adds	r3, r2, r3
 800ad6e:	183a      	adds	r2, r7, r0
 800ad70:	8812      	ldrh	r2, [r2, #0]
 800ad72:	491b      	ldr	r1, [pc, #108]	@ (800ade0 <USB_EPClearStall+0x15c>)
 800ad74:	430a      	orrs	r2, r1
 800ad76:	b292      	uxth	r2, r2
 800ad78:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	18d3      	adds	r3, r2, r3
 800ad84:	881b      	ldrh	r3, [r3, #0]
 800ad86:	b29a      	uxth	r2, r3
 800ad88:	2012      	movs	r0, #18
 800ad8a:	183b      	adds	r3, r7, r0
 800ad8c:	4915      	ldr	r1, [pc, #84]	@ (800ade4 <USB_EPClearStall+0x160>)
 800ad8e:	400a      	ands	r2, r1
 800ad90:	801a      	strh	r2, [r3, #0]
 800ad92:	183b      	adds	r3, r7, r0
 800ad94:	183a      	adds	r2, r7, r0
 800ad96:	8812      	ldrh	r2, [r2, #0]
 800ad98:	2180      	movs	r1, #128	@ 0x80
 800ad9a:	0149      	lsls	r1, r1, #5
 800ad9c:	404a      	eors	r2, r1
 800ad9e:	801a      	strh	r2, [r3, #0]
 800ada0:	183b      	adds	r3, r7, r0
 800ada2:	183a      	adds	r2, r7, r0
 800ada4:	8812      	ldrh	r2, [r2, #0]
 800ada6:	2180      	movs	r1, #128	@ 0x80
 800ada8:	0189      	lsls	r1, r1, #6
 800adaa:	404a      	eors	r2, r1
 800adac:	801a      	strh	r2, [r3, #0]
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	18d3      	adds	r3, r2, r3
 800adb8:	183a      	adds	r2, r7, r0
 800adba:	8812      	ldrh	r2, [r2, #0]
 800adbc:	4907      	ldr	r1, [pc, #28]	@ (800addc <USB_EPClearStall+0x158>)
 800adbe:	430a      	orrs	r2, r1
 800adc0:	b292      	uxth	r2, r2
 800adc2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	0018      	movs	r0, r3
 800adc8:	46bd      	mov	sp, r7
 800adca:	b006      	add	sp, #24
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	46c0      	nop			@ (mov r8, r8)
 800add0:	ffff8f8f 	.word	0xffff8f8f
 800add4:	ffff80c0 	.word	0xffff80c0
 800add8:	ffff8fbf 	.word	0xffff8fbf
 800addc:	ffff8080 	.word	0xffff8080
 800ade0:	ffffc080 	.word	0xffffc080
 800ade4:	ffffbf8f 	.word	0xffffbf8f

0800ade8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	000a      	movs	r2, r1
 800adf2:	1cfb      	adds	r3, r7, #3
 800adf4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800adf6:	1cfb      	adds	r3, r7, #3
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d103      	bne.n	800ae06 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	224c      	movs	r2, #76	@ 0x4c
 800ae02:	2180      	movs	r1, #128	@ 0x80
 800ae04:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	0018      	movs	r0, r3
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	b002      	add	sp, #8
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2258      	movs	r2, #88	@ 0x58
 800ae1c:	5a9b      	ldrh	r3, [r3, r2]
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	4a05      	ldr	r2, [pc, #20]	@ (800ae38 <USB_DevConnect+0x28>)
 800ae22:	4313      	orrs	r3, r2
 800ae24:	b299      	uxth	r1, r3
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2258      	movs	r2, #88	@ 0x58
 800ae2a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	0018      	movs	r0, r3
 800ae30:	46bd      	mov	sp, r7
 800ae32:	b002      	add	sp, #8
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	46c0      	nop			@ (mov r8, r8)
 800ae38:	ffff8000 	.word	0xffff8000

0800ae3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2244      	movs	r2, #68	@ 0x44
 800ae48:	5a9b      	ldrh	r3, [r3, r2]
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
}
 800ae50:	0018      	movs	r0, r3
 800ae52:	46bd      	mov	sp, r7
 800ae54:	b004      	add	sp, #16
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b08a      	sub	sp, #40	@ 0x28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	0019      	movs	r1, r3
 800ae64:	1dbb      	adds	r3, r7, #6
 800ae66:	801a      	strh	r2, [r3, #0]
 800ae68:	1d3b      	adds	r3, r7, #4
 800ae6a:	1c0a      	adds	r2, r1, #0
 800ae6c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ae6e:	1d3b      	adds	r3, r7, #4
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	3301      	adds	r3, #1
 800ae74:	085b      	lsrs	r3, r3, #1
 800ae76:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ae80:	1dbb      	adds	r3, r7, #6
 800ae82:	881a      	ldrh	r2, [r3, #0]
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	18d3      	adds	r3, r2, r3
 800ae88:	2280      	movs	r2, #128	@ 0x80
 800ae8a:	00d2      	lsls	r2, r2, #3
 800ae8c:	4694      	mov	ip, r2
 800ae8e:	4463      	add	r3, ip
 800ae90:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae96:	e020      	b.n	800aeda <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	781a      	ldrb	r2, [r3, #0]
 800ae9c:	2112      	movs	r1, #18
 800ae9e:	187b      	adds	r3, r7, r1
 800aea0:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	3301      	adds	r3, #1
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	021b      	lsls	r3, r3, #8
 800aeaa:	b21a      	sxth	r2, r3
 800aeac:	187b      	adds	r3, r7, r1
 800aeae:	2000      	movs	r0, #0
 800aeb0:	5e1b      	ldrsh	r3, [r3, r0]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	b21a      	sxth	r2, r3
 800aeb6:	187b      	adds	r3, r7, r1
 800aeb8:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800aeba:	6a3b      	ldr	r3, [r7, #32]
 800aebc:	187a      	adds	r2, r7, r1
 800aebe:	8812      	ldrh	r2, [r2, #0]
 800aec0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800aec2:	6a3b      	ldr	r3, [r7, #32]
 800aec4:	3302      	adds	r3, #2
 800aec6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	3301      	adds	r3, #1
 800aecc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	3301      	adds	r3, #1
 800aed2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800aed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed6:	3b01      	subs	r3, #1
 800aed8:	627b      	str	r3, [r7, #36]	@ 0x24
 800aeda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1db      	bne.n	800ae98 <USB_WritePMA+0x40>
  }
}
 800aee0:	46c0      	nop			@ (mov r8, r8)
 800aee2:	46c0      	nop			@ (mov r8, r8)
 800aee4:	46bd      	mov	sp, r7
 800aee6:	b00a      	add	sp, #40	@ 0x28
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b08a      	sub	sp, #40	@ 0x28
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	60f8      	str	r0, [r7, #12]
 800aef2:	60b9      	str	r1, [r7, #8]
 800aef4:	0019      	movs	r1, r3
 800aef6:	1dbb      	adds	r3, r7, #6
 800aef8:	801a      	strh	r2, [r3, #0]
 800aefa:	1d3b      	adds	r3, r7, #4
 800aefc:	1c0a      	adds	r2, r1, #0
 800aefe:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800af00:	1d3b      	adds	r3, r7, #4
 800af02:	881b      	ldrh	r3, [r3, #0]
 800af04:	085b      	lsrs	r3, r3, #1
 800af06:	b29b      	uxth	r3, r3
 800af08:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af12:	1dbb      	adds	r3, r7, #6
 800af14:	881a      	ldrh	r2, [r3, #0]
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	18d3      	adds	r3, r2, r3
 800af1a:	2280      	movs	r2, #128	@ 0x80
 800af1c:	00d2      	lsls	r2, r2, #3
 800af1e:	4694      	mov	ip, r2
 800af20:	4463      	add	r3, ip
 800af22:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	627b      	str	r3, [r7, #36]	@ 0x24
 800af28:	e018      	b.n	800af5c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800af2a:	6a3b      	ldr	r3, [r7, #32]
 800af2c:	881b      	ldrh	r3, [r3, #0]
 800af2e:	b29b      	uxth	r3, r3
 800af30:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	3302      	adds	r3, #2
 800af36:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	b2da      	uxtb	r2, r3
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	3301      	adds	r3, #1
 800af44:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	0a1b      	lsrs	r3, r3, #8
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	3301      	adds	r3, #1
 800af54:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800af56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af58:	3b01      	subs	r3, #1
 800af5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800af5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1e3      	bne.n	800af2a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800af62:	1d3b      	adds	r3, r7, #4
 800af64:	881b      	ldrh	r3, [r3, #0]
 800af66:	2201      	movs	r2, #1
 800af68:	4013      	ands	r3, r2
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d007      	beq.n	800af80 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800af70:	6a3b      	ldr	r3, [r7, #32]
 800af72:	881b      	ldrh	r3, [r3, #0]
 800af74:	b29b      	uxth	r3, r3
 800af76:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	b2da      	uxtb	r2, r3
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	701a      	strb	r2, [r3, #0]
  }
}
 800af80:	46c0      	nop			@ (mov r8, r8)
 800af82:	46bd      	mov	sp, r7
 800af84:	b00a      	add	sp, #40	@ 0x28
 800af86:	bd80      	pop	{r7, pc}

0800af88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	000a      	movs	r2, r1
 800af92:	1cfb      	adds	r3, r7, #3
 800af94:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800af96:	230f      	movs	r3, #15
 800af98:	18fb      	adds	r3, r7, r3
 800af9a:	2200      	movs	r2, #0
 800af9c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	7c1b      	ldrb	r3, [r3, #16]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d116      	bne.n	800afd4 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800afa6:	2380      	movs	r3, #128	@ 0x80
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	2202      	movs	r2, #2
 800afae:	2181      	movs	r1, #129	@ 0x81
 800afb0:	f002 f89d 	bl	800d0ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800afba:	2380      	movs	r3, #128	@ 0x80
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	2202      	movs	r2, #2
 800afc2:	2101      	movs	r1, #1
 800afc4:	f002 f893 	bl	800d0ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	23b6      	movs	r3, #182	@ 0xb6
 800afcc:	005b      	lsls	r3, r3, #1
 800afce:	2101      	movs	r1, #1
 800afd0:	50d1      	str	r1, [r2, r3]
 800afd2:	e013      	b.n	800affc <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	2340      	movs	r3, #64	@ 0x40
 800afd8:	2202      	movs	r2, #2
 800afda:	2181      	movs	r1, #129	@ 0x81
 800afdc:	f002 f887 	bl	800d0ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	2340      	movs	r3, #64	@ 0x40
 800afea:	2202      	movs	r2, #2
 800afec:	2101      	movs	r1, #1
 800afee:	f002 f87e 	bl	800d0ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	23b6      	movs	r3, #182	@ 0xb6
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	2101      	movs	r1, #1
 800affa:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	2308      	movs	r3, #8
 800b000:	2203      	movs	r2, #3
 800b002:	2182      	movs	r1, #130	@ 0x82
 800b004:	f002 f873 	bl	800d0ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b00e:	2387      	movs	r3, #135	@ 0x87
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	0018      	movs	r0, r3
 800b014:	f002 fa04 	bl	800d420 <USBD_static_malloc>
 800b018:	0001      	movs	r1, r0
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	23ae      	movs	r3, #174	@ 0xae
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	23ae      	movs	r3, #174	@ 0xae
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	58d3      	ldr	r3, [r2, r3]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d104      	bne.n	800b038 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800b02e:	230f      	movs	r3, #15
 800b030:	18fb      	adds	r3, r7, r3
 800b032:	2201      	movs	r2, #1
 800b034:	701a      	strb	r2, [r3, #0]
 800b036:	e02c      	b.n	800b092 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	23ae      	movs	r3, #174	@ 0xae
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	58d3      	ldr	r3, [r2, r3]
 800b040:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	23af      	movs	r3, #175	@ 0xaf
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	58d3      	ldr	r3, [r2, r3]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	2385      	movs	r3, #133	@ 0x85
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	2100      	movs	r1, #0
 800b056:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800b058:	68ba      	ldr	r2, [r7, #8]
 800b05a:	2386      	movs	r3, #134	@ 0x86
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	2100      	movs	r1, #0
 800b060:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	7c1b      	ldrb	r3, [r3, #16]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d10a      	bne.n	800b080 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b06a:	68ba      	ldr	r2, [r7, #8]
 800b06c:	2381      	movs	r3, #129	@ 0x81
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	58d2      	ldr	r2, [r2, r3]
 800b072:	2380      	movs	r3, #128	@ 0x80
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	2101      	movs	r1, #1
 800b07a:	f002 f983 	bl	800d384 <USBD_LL_PrepareReceive>
 800b07e:	e008      	b.n	800b092 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b080:	68ba      	ldr	r2, [r7, #8]
 800b082:	2381      	movs	r3, #129	@ 0x81
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	58d2      	ldr	r2, [r2, r3]
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	2340      	movs	r3, #64	@ 0x40
 800b08c:	2101      	movs	r1, #1
 800b08e:	f002 f979 	bl	800d384 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b092:	230f      	movs	r3, #15
 800b094:	18fb      	adds	r3, r7, r3
 800b096:	781b      	ldrb	r3, [r3, #0]
}
 800b098:	0018      	movs	r0, r3
 800b09a:	46bd      	mov	sp, r7
 800b09c:	b004      	add	sp, #16
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	000a      	movs	r2, r1
 800b0aa:	1cfb      	adds	r3, r7, #3
 800b0ac:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800b0ae:	230f      	movs	r3, #15
 800b0b0:	18fb      	adds	r3, r7, r3
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2181      	movs	r1, #129	@ 0x81
 800b0ba:	0018      	movs	r0, r3
 800b0bc:	f002 f84e 	bl	800d15c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2101      	movs	r1, #1
 800b0ca:	0018      	movs	r0, r3
 800b0cc:	f002 f846 	bl	800d15c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	23b6      	movs	r3, #182	@ 0xb6
 800b0d4:	005b      	lsls	r3, r3, #1
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2182      	movs	r1, #130	@ 0x82
 800b0de:	0018      	movs	r0, r3
 800b0e0:	f002 f83c 	bl	800d15c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	23ae      	movs	r3, #174	@ 0xae
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	58d3      	ldr	r3, [r2, r3]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d011      	beq.n	800b11a <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	23af      	movs	r3, #175	@ 0xaf
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	58d3      	ldr	r3, [r2, r3]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	23ae      	movs	r3, #174	@ 0xae
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	58d3      	ldr	r3, [r2, r3]
 800b10a:	0018      	movs	r0, r3
 800b10c:	f002 f994 	bl	800d438 <USBD_static_free>
    pdev->pClassData = NULL;
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	23ae      	movs	r3, #174	@ 0xae
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	2100      	movs	r1, #0
 800b118:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800b11a:	230f      	movs	r3, #15
 800b11c:	18fb      	adds	r3, r7, r3
 800b11e:	781b      	ldrb	r3, [r3, #0]
}
 800b120:	0018      	movs	r0, r3
 800b122:	46bd      	mov	sp, r7
 800b124:	b004      	add	sp, #16
 800b126:	bd80      	pop	{r7, pc}

0800b128 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	23ae      	movs	r3, #174	@ 0xae
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	58d3      	ldr	r3, [r2, r3]
 800b13a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b13c:	230f      	movs	r3, #15
 800b13e:	18fb      	adds	r3, r7, r3
 800b140:	2200      	movs	r2, #0
 800b142:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800b144:	230c      	movs	r3, #12
 800b146:	18fb      	adds	r3, r7, r3
 800b148:	2200      	movs	r2, #0
 800b14a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800b14c:	2317      	movs	r3, #23
 800b14e:	18fb      	adds	r3, r7, r3
 800b150:	2200      	movs	r2, #0
 800b152:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	001a      	movs	r2, r3
 800b15a:	2360      	movs	r3, #96	@ 0x60
 800b15c:	4013      	ands	r3, r2
 800b15e:	d03d      	beq.n	800b1dc <USBD_CDC_Setup+0xb4>
 800b160:	2b20      	cmp	r3, #32
 800b162:	d000      	beq.n	800b166 <USBD_CDC_Setup+0x3e>
 800b164:	e094      	b.n	800b290 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	88db      	ldrh	r3, [r3, #6]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d02b      	beq.n	800b1c6 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	b25b      	sxtb	r3, r3
 800b174:	2b00      	cmp	r3, #0
 800b176:	da12      	bge.n	800b19e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	23af      	movs	r3, #175	@ 0xaf
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	58d3      	ldr	r3, [r2, r3]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	683a      	ldr	r2, [r7, #0]
 800b184:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b186:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	88d2      	ldrh	r2, [r2, #6]
 800b18c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b18e:	6939      	ldr	r1, [r7, #16]
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	88da      	ldrh	r2, [r3, #6]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	0018      	movs	r0, r3
 800b198:	f001 fbaf 	bl	800c8fa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b19c:	e083      	b.n	800b2a6 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	7859      	ldrb	r1, [r3, #1]
 800b1a2:	693a      	ldr	r2, [r7, #16]
 800b1a4:	2380      	movs	r3, #128	@ 0x80
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	88db      	ldrh	r3, [r3, #6]
 800b1ae:	b2d9      	uxtb	r1, r3
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	4a40      	ldr	r2, [pc, #256]	@ (800b2b4 <USBD_CDC_Setup+0x18c>)
 800b1b4:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b1b6:	6939      	ldr	r1, [r7, #16]
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	88da      	ldrh	r2, [r3, #6]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	0018      	movs	r0, r3
 800b1c0:	f001 fbce 	bl	800c960 <USBD_CtlPrepareRx>
      break;
 800b1c4:	e06f      	b.n	800b2a6 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	23af      	movs	r3, #175	@ 0xaf
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	58d3      	ldr	r3, [r2, r3]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	683a      	ldr	r2, [r7, #0]
 800b1d2:	7850      	ldrb	r0, [r2, #1]
 800b1d4:	6839      	ldr	r1, [r7, #0]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	4798      	blx	r3
      break;
 800b1da:	e064      	b.n	800b2a6 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	785b      	ldrb	r3, [r3, #1]
 800b1e0:	2b0b      	cmp	r3, #11
 800b1e2:	d037      	beq.n	800b254 <USBD_CDC_Setup+0x12c>
 800b1e4:	dc47      	bgt.n	800b276 <USBD_CDC_Setup+0x14e>
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d002      	beq.n	800b1f0 <USBD_CDC_Setup+0xc8>
 800b1ea:	2b0a      	cmp	r3, #10
 800b1ec:	d019      	beq.n	800b222 <USBD_CDC_Setup+0xfa>
 800b1ee:	e042      	b.n	800b276 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	23a7      	movs	r3, #167	@ 0xa7
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	5cd3      	ldrb	r3, [r2, r3]
 800b1f8:	2b03      	cmp	r3, #3
 800b1fa:	d107      	bne.n	800b20c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b1fc:	230c      	movs	r3, #12
 800b1fe:	18f9      	adds	r1, r7, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2202      	movs	r2, #2
 800b204:	0018      	movs	r0, r3
 800b206:	f001 fb78 	bl	800c8fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b20a:	e040      	b.n	800b28e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b20c:	683a      	ldr	r2, [r7, #0]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	0011      	movs	r1, r2
 800b212:	0018      	movs	r0, r3
 800b214:	f001 faf3 	bl	800c7fe <USBD_CtlError>
            ret = USBD_FAIL;
 800b218:	2317      	movs	r3, #23
 800b21a:	18fb      	adds	r3, r7, r3
 800b21c:	2202      	movs	r2, #2
 800b21e:	701a      	strb	r2, [r3, #0]
          break;
 800b220:	e035      	b.n	800b28e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	23a7      	movs	r3, #167	@ 0xa7
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	5cd3      	ldrb	r3, [r2, r3]
 800b22a:	2b03      	cmp	r3, #3
 800b22c:	d107      	bne.n	800b23e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b22e:	230f      	movs	r3, #15
 800b230:	18f9      	adds	r1, r7, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2201      	movs	r2, #1
 800b236:	0018      	movs	r0, r3
 800b238:	f001 fb5f 	bl	800c8fa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b23c:	e027      	b.n	800b28e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b23e:	683a      	ldr	r2, [r7, #0]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	0011      	movs	r1, r2
 800b244:	0018      	movs	r0, r3
 800b246:	f001 fada 	bl	800c7fe <USBD_CtlError>
            ret = USBD_FAIL;
 800b24a:	2317      	movs	r3, #23
 800b24c:	18fb      	adds	r3, r7, r3
 800b24e:	2202      	movs	r2, #2
 800b250:	701a      	strb	r2, [r3, #0]
          break;
 800b252:	e01c      	b.n	800b28e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	23a7      	movs	r3, #167	@ 0xa7
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	5cd3      	ldrb	r3, [r2, r3]
 800b25c:	2b03      	cmp	r3, #3
 800b25e:	d015      	beq.n	800b28c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800b260:	683a      	ldr	r2, [r7, #0]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	0011      	movs	r1, r2
 800b266:	0018      	movs	r0, r3
 800b268:	f001 fac9 	bl	800c7fe <USBD_CtlError>
            ret = USBD_FAIL;
 800b26c:	2317      	movs	r3, #23
 800b26e:	18fb      	adds	r3, r7, r3
 800b270:	2202      	movs	r2, #2
 800b272:	701a      	strb	r2, [r3, #0]
          }
          break;
 800b274:	e00a      	b.n	800b28c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800b276:	683a      	ldr	r2, [r7, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	0011      	movs	r1, r2
 800b27c:	0018      	movs	r0, r3
 800b27e:	f001 fabe 	bl	800c7fe <USBD_CtlError>
          ret = USBD_FAIL;
 800b282:	2317      	movs	r3, #23
 800b284:	18fb      	adds	r3, r7, r3
 800b286:	2202      	movs	r2, #2
 800b288:	701a      	strb	r2, [r3, #0]
          break;
 800b28a:	e000      	b.n	800b28e <USBD_CDC_Setup+0x166>
          break;
 800b28c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800b28e:	e00a      	b.n	800b2a6 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800b290:	683a      	ldr	r2, [r7, #0]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	0011      	movs	r1, r2
 800b296:	0018      	movs	r0, r3
 800b298:	f001 fab1 	bl	800c7fe <USBD_CtlError>
      ret = USBD_FAIL;
 800b29c:	2317      	movs	r3, #23
 800b29e:	18fb      	adds	r3, r7, r3
 800b2a0:	2202      	movs	r2, #2
 800b2a2:	701a      	strb	r2, [r3, #0]
      break;
 800b2a4:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800b2a6:	2317      	movs	r3, #23
 800b2a8:	18fb      	adds	r3, r7, r3
 800b2aa:	781b      	ldrb	r3, [r3, #0]
}
 800b2ac:	0018      	movs	r0, r3
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	b006      	add	sp, #24
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	00000201 	.word	0x00000201

0800b2b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	000a      	movs	r2, r1
 800b2c2:	1cfb      	adds	r3, r7, #3
 800b2c4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	23ae      	movs	r3, #174	@ 0xae
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	58d3      	ldr	r3, [r2, r3]
 800b2ce:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	23b0      	movs	r3, #176	@ 0xb0
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	58d3      	ldr	r3, [r2, r3]
 800b2d8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	23ae      	movs	r3, #174	@ 0xae
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	58d3      	ldr	r3, [r2, r3]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d03e      	beq.n	800b364 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b2e6:	1cfb      	adds	r3, r7, #3
 800b2e8:	781a      	ldrb	r2, [r3, #0]
 800b2ea:	6879      	ldr	r1, [r7, #4]
 800b2ec:	0013      	movs	r3, r2
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	189b      	adds	r3, r3, r2
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	18cb      	adds	r3, r1, r3
 800b2f6:	331c      	adds	r3, #28
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d02b      	beq.n	800b356 <USBD_CDC_DataIn+0x9e>
 800b2fe:	1cfb      	adds	r3, r7, #3
 800b300:	781a      	ldrb	r2, [r3, #0]
 800b302:	6879      	ldr	r1, [r7, #4]
 800b304:	0013      	movs	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	189b      	adds	r3, r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	18cb      	adds	r3, r1, r3
 800b30e:	331c      	adds	r3, #28
 800b310:	6818      	ldr	r0, [r3, #0]
 800b312:	1cfb      	adds	r3, r7, #3
 800b314:	781a      	ldrb	r2, [r3, #0]
 800b316:	68b9      	ldr	r1, [r7, #8]
 800b318:	0013      	movs	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	189b      	adds	r3, r3, r2
 800b31e:	00db      	lsls	r3, r3, #3
 800b320:	18cb      	adds	r3, r1, r3
 800b322:	3338      	adds	r3, #56	@ 0x38
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	0019      	movs	r1, r3
 800b328:	f7f4 ff86 	bl	8000238 <__aeabi_uidivmod>
 800b32c:	1e0b      	subs	r3, r1, #0
 800b32e:	d112      	bne.n	800b356 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b330:	1cfb      	adds	r3, r7, #3
 800b332:	781a      	ldrb	r2, [r3, #0]
 800b334:	6879      	ldr	r1, [r7, #4]
 800b336:	0013      	movs	r3, r2
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	189b      	adds	r3, r3, r2
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	18cb      	adds	r3, r1, r3
 800b340:	331c      	adds	r3, #28
 800b342:	2200      	movs	r2, #0
 800b344:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b346:	1cfb      	adds	r3, r7, #3
 800b348:	7819      	ldrb	r1, [r3, #0]
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	2300      	movs	r3, #0
 800b34e:	2200      	movs	r2, #0
 800b350:	f001 ffe1 	bl	800d316 <USBD_LL_Transmit>
 800b354:	e004      	b.n	800b360 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	2385      	movs	r3, #133	@ 0x85
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	2100      	movs	r1, #0
 800b35e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800b360:	2300      	movs	r3, #0
 800b362:	e000      	b.n	800b366 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800b364:	2302      	movs	r3, #2
  }
}
 800b366:	0018      	movs	r0, r3
 800b368:	46bd      	mov	sp, r7
 800b36a:	b004      	add	sp, #16
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b36e:	b580      	push	{r7, lr}
 800b370:	b084      	sub	sp, #16
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
 800b376:	000a      	movs	r2, r1
 800b378:	1cfb      	adds	r3, r7, #3
 800b37a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	23ae      	movs	r3, #174	@ 0xae
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	58d3      	ldr	r3, [r2, r3]
 800b384:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b386:	1cfb      	adds	r3, r7, #3
 800b388:	781a      	ldrb	r2, [r3, #0]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	0011      	movs	r1, r2
 800b38e:	0018      	movs	r0, r3
 800b390:	f002 f82f 	bl	800d3f2 <USBD_LL_GetRxDataSize>
 800b394:	0001      	movs	r1, r0
 800b396:	68fa      	ldr	r2, [r7, #12]
 800b398:	2383      	movs	r3, #131	@ 0x83
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	23ae      	movs	r3, #174	@ 0xae
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	58d3      	ldr	r3, [r2, r3]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d011      	beq.n	800b3ce <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	23af      	movs	r3, #175	@ 0xaf
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	58d3      	ldr	r3, [r2, r3]
 800b3b2:	68da      	ldr	r2, [r3, #12]
 800b3b4:	68f9      	ldr	r1, [r7, #12]
 800b3b6:	2381      	movs	r3, #129	@ 0x81
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	58c8      	ldr	r0, [r1, r3]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2183      	movs	r1, #131	@ 0x83
 800b3c0:	0089      	lsls	r1, r1, #2
 800b3c2:	468c      	mov	ip, r1
 800b3c4:	4463      	add	r3, ip
 800b3c6:	0019      	movs	r1, r3
 800b3c8:	4790      	blx	r2

    return USBD_OK;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	e000      	b.n	800b3d0 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800b3ce:	2302      	movs	r3, #2
  }
}
 800b3d0:	0018      	movs	r0, r3
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	b004      	add	sp, #16
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b3d8:	b590      	push	{r4, r7, lr}
 800b3da:	b085      	sub	sp, #20
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	23ae      	movs	r3, #174	@ 0xae
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	58d3      	ldr	r3, [r2, r3]
 800b3e8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	23af      	movs	r3, #175	@ 0xaf
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	58d3      	ldr	r3, [r2, r3]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d018      	beq.n	800b428 <USBD_CDC_EP0_RxReady+0x50>
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	2380      	movs	r3, #128	@ 0x80
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	5cd3      	ldrb	r3, [r2, r3]
 800b3fe:	2bff      	cmp	r3, #255	@ 0xff
 800b400:	d012      	beq.n	800b428 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	23af      	movs	r3, #175	@ 0xaf
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	58d3      	ldr	r3, [r2, r3]
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	68f9      	ldr	r1, [r7, #12]
 800b40e:	2280      	movs	r2, #128	@ 0x80
 800b410:	0092      	lsls	r2, r2, #2
 800b412:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800b414:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	4c06      	ldr	r4, [pc, #24]	@ (800b434 <USBD_CDC_EP0_RxReady+0x5c>)
 800b41a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b41c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	2380      	movs	r3, #128	@ 0x80
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	21ff      	movs	r1, #255	@ 0xff
 800b426:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	0018      	movs	r0, r3
 800b42c:	46bd      	mov	sp, r7
 800b42e:	b005      	add	sp, #20
 800b430:	bd90      	pop	{r4, r7, pc}
 800b432:	46c0      	nop			@ (mov r8, r8)
 800b434:	00000201 	.word	0x00000201

0800b438 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2243      	movs	r2, #67	@ 0x43
 800b444:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b446:	4b02      	ldr	r3, [pc, #8]	@ (800b450 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800b448:	0018      	movs	r0, r3
 800b44a:	46bd      	mov	sp, r7
 800b44c:	b002      	add	sp, #8
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	200000d8 	.word	0x200000d8

0800b454 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2243      	movs	r2, #67	@ 0x43
 800b460:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b462:	4b02      	ldr	r3, [pc, #8]	@ (800b46c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800b464:	0018      	movs	r0, r3
 800b466:	46bd      	mov	sp, r7
 800b468:	b002      	add	sp, #8
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	20000094 	.word	0x20000094

0800b470 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2243      	movs	r2, #67	@ 0x43
 800b47c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b47e:	4b02      	ldr	r3, [pc, #8]	@ (800b488 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800b480:	0018      	movs	r0, r3
 800b482:	46bd      	mov	sp, r7
 800b484:	b002      	add	sp, #8
 800b486:	bd80      	pop	{r7, pc}
 800b488:	2000011c 	.word	0x2000011c

0800b48c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	220a      	movs	r2, #10
 800b498:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b49a:	4b02      	ldr	r3, [pc, #8]	@ (800b4a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800b49c:	0018      	movs	r0, r3
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	b002      	add	sp, #8
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	20000050 	.word	0x20000050

0800b4a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b4b2:	200f      	movs	r0, #15
 800b4b4:	183b      	adds	r3, r7, r0
 800b4b6:	2202      	movs	r2, #2
 800b4b8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d007      	beq.n	800b4d0 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	23af      	movs	r3, #175	@ 0xaf
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	6839      	ldr	r1, [r7, #0]
 800b4c8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800b4ca:	183b      	adds	r3, r7, r0
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800b4d0:	230f      	movs	r3, #15
 800b4d2:	18fb      	adds	r3, r7, r3
 800b4d4:	781b      	ldrb	r3, [r3, #0]
}
 800b4d6:	0018      	movs	r0, r3
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	b004      	add	sp, #16
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b086      	sub	sp, #24
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	60f8      	str	r0, [r7, #12]
 800b4e6:	60b9      	str	r1, [r7, #8]
 800b4e8:	1dbb      	adds	r3, r7, #6
 800b4ea:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	23ae      	movs	r3, #174	@ 0xae
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	58d3      	ldr	r3, [r2, r3]
 800b4f4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b4f6:	697a      	ldr	r2, [r7, #20]
 800b4f8:	2382      	movs	r3, #130	@ 0x82
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	68b9      	ldr	r1, [r7, #8]
 800b4fe:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800b500:	1dbb      	adds	r3, r7, #6
 800b502:	8819      	ldrh	r1, [r3, #0]
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	2384      	movs	r3, #132	@ 0x84
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	0018      	movs	r0, r3
 800b510:	46bd      	mov	sp, r7
 800b512:	b006      	add	sp, #24
 800b514:	bd80      	pop	{r7, pc}

0800b516 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b084      	sub	sp, #16
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
 800b51e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	23ae      	movs	r3, #174	@ 0xae
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	58d3      	ldr	r3, [r2, r3]
 800b528:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	2381      	movs	r3, #129	@ 0x81
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	6839      	ldr	r1, [r7, #0]
 800b532:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	0018      	movs	r0, r3
 800b538:	46bd      	mov	sp, r7
 800b53a:	b004      	add	sp, #16
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b084      	sub	sp, #16
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	23ae      	movs	r3, #174	@ 0xae
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	58d3      	ldr	r3, [r2, r3]
 800b54e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	23ae      	movs	r3, #174	@ 0xae
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	58d3      	ldr	r3, [r2, r3]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d022      	beq.n	800b5a2 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	2385      	movs	r3, #133	@ 0x85
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	58d3      	ldr	r3, [r2, r3]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d11a      	bne.n	800b59e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	2385      	movs	r3, #133	@ 0x85
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	2101      	movs	r1, #1
 800b570:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	2384      	movs	r3, #132	@ 0x84
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	58d2      	ldr	r2, [r2, r3]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	2382      	movs	r3, #130	@ 0x82
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	2384      	movs	r3, #132	@ 0x84
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b58e:	b29b      	uxth	r3, r3
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	000a      	movs	r2, r1
 800b594:	2181      	movs	r1, #129	@ 0x81
 800b596:	f001 febe 	bl	800d316 <USBD_LL_Transmit>

      return USBD_OK;
 800b59a:	2300      	movs	r3, #0
 800b59c:	e002      	b.n	800b5a4 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e000      	b.n	800b5a4 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800b5a2:	2302      	movs	r3, #2
  }
}
 800b5a4:	0018      	movs	r0, r3
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	b004      	add	sp, #16
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	23ae      	movs	r3, #174	@ 0xae
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	58d3      	ldr	r3, [r2, r3]
 800b5bc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	23ae      	movs	r3, #174	@ 0xae
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	58d3      	ldr	r3, [r2, r3]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d019      	beq.n	800b5fe <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	7c1b      	ldrb	r3, [r3, #16]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d10a      	bne.n	800b5e8 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b5d2:	68fa      	ldr	r2, [r7, #12]
 800b5d4:	2381      	movs	r3, #129	@ 0x81
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	58d2      	ldr	r2, [r2, r3]
 800b5da:	2380      	movs	r3, #128	@ 0x80
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	2101      	movs	r1, #1
 800b5e2:	f001 fecf 	bl	800d384 <USBD_LL_PrepareReceive>
 800b5e6:	e008      	b.n	800b5fa <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	2381      	movs	r3, #129	@ 0x81
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	58d2      	ldr	r2, [r2, r3]
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	2340      	movs	r3, #64	@ 0x40
 800b5f4:	2101      	movs	r1, #1
 800b5f6:	f001 fec5 	bl	800d384 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	e000      	b.n	800b600 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800b5fe:	2302      	movs	r3, #2
  }
}
 800b600:	0018      	movs	r0, r3
 800b602:	46bd      	mov	sp, r7
 800b604:	b004      	add	sp, #16
 800b606:	bd80      	pop	{r7, pc}

0800b608 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	1dfb      	adds	r3, r7, #7
 800b614:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d101      	bne.n	800b620 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b61c:	2302      	movs	r3, #2
 800b61e:	e020      	b.n	800b662 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	23ad      	movs	r3, #173	@ 0xad
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	58d3      	ldr	r3, [r2, r3]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d004      	beq.n	800b636 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	23ad      	movs	r3, #173	@ 0xad
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	2100      	movs	r1, #0
 800b634:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d004      	beq.n	800b646 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	23ac      	movs	r3, #172	@ 0xac
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	68b9      	ldr	r1, [r7, #8]
 800b644:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b646:	68fa      	ldr	r2, [r7, #12]
 800b648:	23a7      	movs	r3, #167	@ 0xa7
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	2101      	movs	r1, #1
 800b64e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	1dfa      	adds	r2, r7, #7
 800b654:	7812      	ldrb	r2, [r2, #0]
 800b656:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	0018      	movs	r0, r3
 800b65c:	f001 fcbe 	bl	800cfdc <USBD_LL_Init>

  return USBD_OK;
 800b660:	2300      	movs	r3, #0
}
 800b662:	0018      	movs	r0, r3
 800b664:	46bd      	mov	sp, r7
 800b666:	b004      	add	sp, #16
 800b668:	bd80      	pop	{r7, pc}

0800b66a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b084      	sub	sp, #16
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
 800b672:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b674:	200f      	movs	r0, #15
 800b676:	183b      	adds	r3, r7, r0
 800b678:	2200      	movs	r2, #0
 800b67a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d008      	beq.n	800b694 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	23ad      	movs	r3, #173	@ 0xad
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800b68c:	183b      	adds	r3, r7, r0
 800b68e:	2200      	movs	r2, #0
 800b690:	701a      	strb	r2, [r3, #0]
 800b692:	e003      	b.n	800b69c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b694:	230f      	movs	r3, #15
 800b696:	18fb      	adds	r3, r7, r3
 800b698:	2202      	movs	r2, #2
 800b69a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b69c:	230f      	movs	r3, #15
 800b69e:	18fb      	adds	r3, r7, r3
 800b6a0:	781b      	ldrb	r3, [r3, #0]
}
 800b6a2:	0018      	movs	r0, r3
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	b004      	add	sp, #16
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b082      	sub	sp, #8
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	0018      	movs	r0, r3
 800b6b6:	f001 fcf5 	bl	800d0a4 <USBD_LL_Start>

  return USBD_OK;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	0018      	movs	r0, r3
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	b002      	add	sp, #8
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	0018      	movs	r0, r3
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	b002      	add	sp, #8
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b6d6:	b590      	push	{r4, r7, lr}
 800b6d8:	b085      	sub	sp, #20
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	000a      	movs	r2, r1
 800b6e0:	1cfb      	adds	r3, r7, #3
 800b6e2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b6e4:	240f      	movs	r4, #15
 800b6e6:	193b      	adds	r3, r7, r4
 800b6e8:	2202      	movs	r2, #2
 800b6ea:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	23ad      	movs	r3, #173	@ 0xad
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	58d3      	ldr	r3, [r2, r3]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00e      	beq.n	800b716 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	23ad      	movs	r3, #173	@ 0xad
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	58d3      	ldr	r3, [r2, r3]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	1cfa      	adds	r2, r7, #3
 800b704:	7811      	ldrb	r1, [r2, #0]
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	0010      	movs	r0, r2
 800b70a:	4798      	blx	r3
 800b70c:	1e03      	subs	r3, r0, #0
 800b70e:	d102      	bne.n	800b716 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800b710:	193b      	adds	r3, r7, r4
 800b712:	2200      	movs	r2, #0
 800b714:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800b716:	230f      	movs	r3, #15
 800b718:	18fb      	adds	r3, r7, r3
 800b71a:	781b      	ldrb	r3, [r3, #0]
}
 800b71c:	0018      	movs	r0, r3
 800b71e:	46bd      	mov	sp, r7
 800b720:	b005      	add	sp, #20
 800b722:	bd90      	pop	{r4, r7, pc}

0800b724 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	000a      	movs	r2, r1
 800b72e:	1cfb      	adds	r3, r7, #3
 800b730:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	23ad      	movs	r3, #173	@ 0xad
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	58d3      	ldr	r3, [r2, r3]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	1cfa      	adds	r2, r7, #3
 800b73e:	7811      	ldrb	r1, [r2, #0]
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	0010      	movs	r0, r2
 800b744:	4798      	blx	r3

  return USBD_OK;
 800b746:	2300      	movs	r3, #0
}
 800b748:	0018      	movs	r0, r3
 800b74a:	46bd      	mov	sp, r7
 800b74c:	b002      	add	sp, #8
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	22aa      	movs	r2, #170	@ 0xaa
 800b75e:	0092      	lsls	r2, r2, #2
 800b760:	4694      	mov	ip, r2
 800b762:	4463      	add	r3, ip
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	0011      	movs	r1, r2
 800b768:	0018      	movs	r0, r3
 800b76a:	f001 f810 	bl	800c78e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	23a5      	movs	r3, #165	@ 0xa5
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	2101      	movs	r1, #1
 800b776:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a23      	ldr	r2, [pc, #140]	@ (800b808 <USBD_LL_SetupStage+0xb8>)
 800b77c:	5a9b      	ldrh	r3, [r3, r2]
 800b77e:	0019      	movs	r1, r3
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	23a6      	movs	r3, #166	@ 0xa6
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	23aa      	movs	r3, #170	@ 0xaa
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	5cd3      	ldrb	r3, [r2, r3]
 800b790:	001a      	movs	r2, r3
 800b792:	231f      	movs	r3, #31
 800b794:	4013      	ands	r3, r2
 800b796:	2b02      	cmp	r3, #2
 800b798:	d019      	beq.n	800b7ce <USBD_LL_SetupStage+0x7e>
 800b79a:	d822      	bhi.n	800b7e2 <USBD_LL_SetupStage+0x92>
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <USBD_LL_SetupStage+0x56>
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d00a      	beq.n	800b7ba <USBD_LL_SetupStage+0x6a>
 800b7a4:	e01d      	b.n	800b7e2 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	22aa      	movs	r2, #170	@ 0xaa
 800b7aa:	0092      	lsls	r2, r2, #2
 800b7ac:	189a      	adds	r2, r3, r2
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	0011      	movs	r1, r2
 800b7b2:	0018      	movs	r0, r3
 800b7b4:	f000 fa10 	bl	800bbd8 <USBD_StdDevReq>
      break;
 800b7b8:	e020      	b.n	800b7fc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	22aa      	movs	r2, #170	@ 0xaa
 800b7be:	0092      	lsls	r2, r2, #2
 800b7c0:	189a      	adds	r2, r3, r2
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	0011      	movs	r1, r2
 800b7c6:	0018      	movs	r0, r3
 800b7c8:	f000 fa78 	bl	800bcbc <USBD_StdItfReq>
      break;
 800b7cc:	e016      	b.n	800b7fc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	22aa      	movs	r2, #170	@ 0xaa
 800b7d2:	0092      	lsls	r2, r2, #2
 800b7d4:	189a      	adds	r2, r3, r2
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	0011      	movs	r1, r2
 800b7da:	0018      	movs	r0, r3
 800b7dc:	f000 fac5 	bl	800bd6a <USBD_StdEPReq>
      break;
 800b7e0:	e00c      	b.n	800b7fc <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	23aa      	movs	r3, #170	@ 0xaa
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	5cd3      	ldrb	r3, [r2, r3]
 800b7ea:	227f      	movs	r2, #127	@ 0x7f
 800b7ec:	4393      	bics	r3, r2
 800b7ee:	b2da      	uxtb	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	0011      	movs	r1, r2
 800b7f4:	0018      	movs	r0, r3
 800b7f6:	f001 fcdc 	bl	800d1b2 <USBD_LL_StallEP>
      break;
 800b7fa:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800b7fc:	2300      	movs	r3, #0
}
 800b7fe:	0018      	movs	r0, r3
 800b800:	46bd      	mov	sp, r7
 800b802:	b002      	add	sp, #8
 800b804:	bd80      	pop	{r7, pc}
 800b806:	46c0      	nop			@ (mov r8, r8)
 800b808:	000002ae 	.word	0x000002ae

0800b80c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	607a      	str	r2, [r7, #4]
 800b816:	200b      	movs	r0, #11
 800b818:	183b      	adds	r3, r7, r0
 800b81a:	1c0a      	adds	r2, r1, #0
 800b81c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b81e:	183b      	adds	r3, r7, r0
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d154      	bne.n	800b8d0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	3355      	adds	r3, #85	@ 0x55
 800b82a:	33ff      	adds	r3, #255	@ 0xff
 800b82c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	23a5      	movs	r3, #165	@ 0xa5
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	58d3      	ldr	r3, [r2, r3]
 800b836:	2b03      	cmp	r3, #3
 800b838:	d139      	bne.n	800b8ae <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	68da      	ldr	r2, [r3, #12]
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	691b      	ldr	r3, [r3, #16]
 800b842:	429a      	cmp	r2, r3
 800b844:	d919      	bls.n	800b87a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	68da      	ldr	r2, [r3, #12]
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	1ad2      	subs	r2, r2, r3
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	68da      	ldr	r2, [r3, #12]
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d203      	bcs.n	800b868 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b864:	b29b      	uxth	r3, r3
 800b866:	e002      	b.n	800b86e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	6879      	ldr	r1, [r7, #4]
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	001a      	movs	r2, r3
 800b874:	f001 f898 	bl	800c9a8 <USBD_CtlContinueRx>
 800b878:	e045      	b.n	800b906 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b87a:	68fa      	ldr	r2, [r7, #12]
 800b87c:	23ad      	movs	r3, #173	@ 0xad
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	58d3      	ldr	r3, [r2, r3]
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00d      	beq.n	800b8a4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	23a7      	movs	r3, #167	@ 0xa7
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b890:	2b03      	cmp	r3, #3
 800b892:	d107      	bne.n	800b8a4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	23ad      	movs	r3, #173	@ 0xad
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	58d3      	ldr	r3, [r2, r3]
 800b89c:	691b      	ldr	r3, [r3, #16]
 800b89e:	68fa      	ldr	r2, [r7, #12]
 800b8a0:	0010      	movs	r0, r2
 800b8a2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	0018      	movs	r0, r3
 800b8a8:	f001 f891 	bl	800c9ce <USBD_CtlSendStatus>
 800b8ac:	e02b      	b.n	800b906 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b8ae:	68fa      	ldr	r2, [r7, #12]
 800b8b0:	23a5      	movs	r3, #165	@ 0xa5
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	58d3      	ldr	r3, [r2, r3]
 800b8b6:	2b05      	cmp	r3, #5
 800b8b8:	d125      	bne.n	800b906 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	23a5      	movs	r3, #165	@ 0xa5
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	0018      	movs	r0, r3
 800b8ca:	f001 fc72 	bl	800d1b2 <USBD_LL_StallEP>
 800b8ce:	e01a      	b.n	800b906 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b8d0:	68fa      	ldr	r2, [r7, #12]
 800b8d2:	23ad      	movs	r3, #173	@ 0xad
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	58d3      	ldr	r3, [r2, r3]
 800b8d8:	699b      	ldr	r3, [r3, #24]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d011      	beq.n	800b902 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	23a7      	movs	r3, #167	@ 0xa7
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800b8e6:	2b03      	cmp	r3, #3
 800b8e8:	d10b      	bne.n	800b902 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	23ad      	movs	r3, #173	@ 0xad
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	58d3      	ldr	r3, [r2, r3]
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	220b      	movs	r2, #11
 800b8f6:	18ba      	adds	r2, r7, r2
 800b8f8:	7811      	ldrb	r1, [r2, #0]
 800b8fa:	68fa      	ldr	r2, [r7, #12]
 800b8fc:	0010      	movs	r0, r2
 800b8fe:	4798      	blx	r3
 800b900:	e001      	b.n	800b906 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b902:	2302      	movs	r3, #2
 800b904:	e000      	b.n	800b908 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800b906:	2300      	movs	r3, #0
}
 800b908:	0018      	movs	r0, r3
 800b90a:	46bd      	mov	sp, r7
 800b90c:	b006      	add	sp, #24
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b086      	sub	sp, #24
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	607a      	str	r2, [r7, #4]
 800b91a:	200b      	movs	r0, #11
 800b91c:	183b      	adds	r3, r7, r0
 800b91e:	1c0a      	adds	r2, r1, #0
 800b920:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b922:	183b      	adds	r3, r7, r0
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d000      	beq.n	800b92c <USBD_LL_DataInStage+0x1c>
 800b92a:	e08e      	b.n	800ba4a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	3314      	adds	r3, #20
 800b930:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b932:	68fa      	ldr	r2, [r7, #12]
 800b934:	23a5      	movs	r3, #165	@ 0xa5
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	58d3      	ldr	r3, [r2, r3]
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d164      	bne.n	800ba08 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	68da      	ldr	r2, [r3, #12]
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	429a      	cmp	r2, r3
 800b948:	d915      	bls.n	800b976 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	68da      	ldr	r2, [r3, #12]
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	691b      	ldr	r3, [r3, #16]
 800b952:	1ad2      	subs	r2, r2, r3
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	b29a      	uxth	r2, r3
 800b95e:	6879      	ldr	r1, [r7, #4]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	0018      	movs	r0, r3
 800b964:	f000 ffe9 	bl	800c93a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	2300      	movs	r3, #0
 800b96c:	2200      	movs	r2, #0
 800b96e:	2100      	movs	r1, #0
 800b970:	f001 fd08 	bl	800d384 <USBD_LL_PrepareReceive>
 800b974:	e059      	b.n	800ba2a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	689a      	ldr	r2, [r3, #8]
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	691b      	ldr	r3, [r3, #16]
 800b97e:	0019      	movs	r1, r3
 800b980:	0010      	movs	r0, r2
 800b982:	f7f4 fc59 	bl	8000238 <__aeabi_uidivmod>
 800b986:	1e0b      	subs	r3, r1, #0
 800b988:	d11f      	bne.n	800b9ca <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	689a      	ldr	r2, [r3, #8]
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b992:	429a      	cmp	r2, r3
 800b994:	d319      	bcc.n	800b9ca <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	689a      	ldr	r2, [r3, #8]
 800b99a:	68f9      	ldr	r1, [r7, #12]
 800b99c:	23a6      	movs	r3, #166	@ 0xa6
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d211      	bcs.n	800b9ca <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	0018      	movs	r0, r3
 800b9ae:	f000 ffc4 	bl	800c93a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	23a6      	movs	r3, #166	@ 0xa6
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	f001 fcde 	bl	800d384 <USBD_LL_PrepareReceive>
 800b9c8:	e02f      	b.n	800ba2a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	23ad      	movs	r3, #173	@ 0xad
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	58d3      	ldr	r3, [r2, r3]
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00d      	beq.n	800b9f4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	23a7      	movs	r3, #167	@ 0xa7
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b9e0:	2b03      	cmp	r3, #3
 800b9e2:	d107      	bne.n	800b9f4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	23ad      	movs	r3, #173	@ 0xad
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	58d3      	ldr	r3, [r2, r3]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	0010      	movs	r0, r2
 800b9f2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2180      	movs	r1, #128	@ 0x80
 800b9f8:	0018      	movs	r0, r3
 800b9fa:	f001 fbda 	bl	800d1b2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	0018      	movs	r0, r3
 800ba02:	f000 fff8 	bl	800c9f6 <USBD_CtlReceiveStatus>
 800ba06:	e010      	b.n	800ba2a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	23a5      	movs	r3, #165	@ 0xa5
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	58d3      	ldr	r3, [r2, r3]
 800ba10:	2b04      	cmp	r3, #4
 800ba12:	d005      	beq.n	800ba20 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ba14:	68fa      	ldr	r2, [r7, #12]
 800ba16:	23a5      	movs	r3, #165	@ 0xa5
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d104      	bne.n	800ba2a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2180      	movs	r1, #128	@ 0x80
 800ba24:	0018      	movs	r0, r3
 800ba26:	f001 fbc4 	bl	800d1b2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ba2a:	68fa      	ldr	r2, [r7, #12]
 800ba2c:	23a8      	movs	r3, #168	@ 0xa8
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	5cd3      	ldrb	r3, [r2, r3]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d124      	bne.n	800ba80 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	0018      	movs	r0, r3
 800ba3a:	f7ff fe43 	bl	800b6c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	23a8      	movs	r3, #168	@ 0xa8
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	2100      	movs	r1, #0
 800ba46:	54d1      	strb	r1, [r2, r3]
 800ba48:	e01a      	b.n	800ba80 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ba4a:	68fa      	ldr	r2, [r7, #12]
 800ba4c:	23ad      	movs	r3, #173	@ 0xad
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	58d3      	ldr	r3, [r2, r3]
 800ba52:	695b      	ldr	r3, [r3, #20]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d011      	beq.n	800ba7c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	23a7      	movs	r3, #167	@ 0xa7
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800ba60:	2b03      	cmp	r3, #3
 800ba62:	d10b      	bne.n	800ba7c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ba64:	68fa      	ldr	r2, [r7, #12]
 800ba66:	23ad      	movs	r3, #173	@ 0xad
 800ba68:	009b      	lsls	r3, r3, #2
 800ba6a:	58d3      	ldr	r3, [r2, r3]
 800ba6c:	695b      	ldr	r3, [r3, #20]
 800ba6e:	220b      	movs	r2, #11
 800ba70:	18ba      	adds	r2, r7, r2
 800ba72:	7811      	ldrb	r1, [r2, #0]
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	0010      	movs	r0, r2
 800ba78:	4798      	blx	r3
 800ba7a:	e001      	b.n	800ba80 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ba7c:	2302      	movs	r3, #2
 800ba7e:	e000      	b.n	800ba82 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800ba80:	2300      	movs	r3, #0
}
 800ba82:	0018      	movs	r0, r3
 800ba84:	46bd      	mov	sp, r7
 800ba86:	b006      	add	sp, #24
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b082      	sub	sp, #8
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	2340      	movs	r3, #64	@ 0x40
 800ba96:	2200      	movs	r2, #0
 800ba98:	2100      	movs	r1, #0
 800ba9a:	f001 fb28 	bl	800d0ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	23ac      	movs	r3, #172	@ 0xac
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	2101      	movs	r1, #1
 800baa6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	23b2      	movs	r3, #178	@ 0xb2
 800baac:	005b      	lsls	r3, r3, #1
 800baae:	2140      	movs	r1, #64	@ 0x40
 800bab0:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	2340      	movs	r3, #64	@ 0x40
 800bab6:	2200      	movs	r2, #0
 800bab8:	2180      	movs	r1, #128	@ 0x80
 800baba:	f001 fb18 	bl	800d0ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2201      	movs	r2, #1
 800bac2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2240      	movs	r2, #64	@ 0x40
 800bac8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	23a7      	movs	r3, #167	@ 0xa7
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	2101      	movs	r1, #1
 800bad2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	23a5      	movs	r3, #165	@ 0xa5
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	2100      	movs	r1, #0
 800badc:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	23a9      	movs	r3, #169	@ 0xa9
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	2100      	movs	r1, #0
 800baec:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	23ae      	movs	r3, #174	@ 0xae
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	58d3      	ldr	r3, [r2, r3]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00a      	beq.n	800bb10 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	23ad      	movs	r3, #173	@ 0xad
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	58d3      	ldr	r3, [r2, r3]
 800bb02:	685a      	ldr	r2, [r3, #4]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	b2d9      	uxtb	r1, r3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	0018      	movs	r0, r3
 800bb0e:	4790      	blx	r2
  }

  return USBD_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	0018      	movs	r0, r3
 800bb14:	46bd      	mov	sp, r7
 800bb16:	b002      	add	sp, #8
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b082      	sub	sp, #8
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	000a      	movs	r2, r1
 800bb24:	1cfb      	adds	r3, r7, #3
 800bb26:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	1cfa      	adds	r2, r7, #3
 800bb2c:	7812      	ldrb	r2, [r2, #0]
 800bb2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	0018      	movs	r0, r3
 800bb34:	46bd      	mov	sp, r7
 800bb36:	b002      	add	sp, #8
 800bb38:	bd80      	pop	{r7, pc}
	...

0800bb3c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	23a7      	movs	r3, #167	@ 0xa7
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	5cd1      	ldrb	r1, [r2, r3]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	4a06      	ldr	r2, [pc, #24]	@ (800bb68 <USBD_LL_Suspend+0x2c>)
 800bb50:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	23a7      	movs	r3, #167	@ 0xa7
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	2104      	movs	r1, #4
 800bb5a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	0018      	movs	r0, r3
 800bb60:	46bd      	mov	sp, r7
 800bb62:	b002      	add	sp, #8
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	46c0      	nop			@ (mov r8, r8)
 800bb68:	0000029d 	.word	0x0000029d

0800bb6c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	23a7      	movs	r3, #167	@ 0xa7
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	5cd3      	ldrb	r3, [r2, r3]
 800bb7c:	2b04      	cmp	r3, #4
 800bb7e:	d106      	bne.n	800bb8e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a05      	ldr	r2, [pc, #20]	@ (800bb98 <USBD_LL_Resume+0x2c>)
 800bb84:	5c99      	ldrb	r1, [r3, r2]
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	23a7      	movs	r3, #167	@ 0xa7
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	0018      	movs	r0, r3
 800bb92:	46bd      	mov	sp, r7
 800bb94:	b002      	add	sp, #8
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	0000029d 	.word	0x0000029d

0800bb9c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	23a7      	movs	r3, #167	@ 0xa7
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	5cd3      	ldrb	r3, [r2, r3]
 800bbac:	2b03      	cmp	r3, #3
 800bbae:	d10e      	bne.n	800bbce <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	23ad      	movs	r3, #173	@ 0xad
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	58d3      	ldr	r3, [r2, r3]
 800bbb8:	69db      	ldr	r3, [r3, #28]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d007      	beq.n	800bbce <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	23ad      	movs	r3, #173	@ 0xad
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	58d3      	ldr	r3, [r2, r3]
 800bbc6:	69db      	ldr	r3, [r3, #28]
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	0010      	movs	r0, r2
 800bbcc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	b002      	add	sp, #8
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbe2:	230f      	movs	r3, #15
 800bbe4:	18fb      	adds	r3, r7, r3
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	001a      	movs	r2, r3
 800bbf0:	2360      	movs	r3, #96	@ 0x60
 800bbf2:	4013      	ands	r3, r2
 800bbf4:	2b40      	cmp	r3, #64	@ 0x40
 800bbf6:	d004      	beq.n	800bc02 <USBD_StdDevReq+0x2a>
 800bbf8:	d84f      	bhi.n	800bc9a <USBD_StdDevReq+0xc2>
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00b      	beq.n	800bc16 <USBD_StdDevReq+0x3e>
 800bbfe:	2b20      	cmp	r3, #32
 800bc00:	d14b      	bne.n	800bc9a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	23ad      	movs	r3, #173	@ 0xad
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	58d3      	ldr	r3, [r2, r3]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	6839      	ldr	r1, [r7, #0]
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	0010      	movs	r0, r2
 800bc12:	4798      	blx	r3
      break;
 800bc14:	e048      	b.n	800bca8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	785b      	ldrb	r3, [r3, #1]
 800bc1a:	2b09      	cmp	r3, #9
 800bc1c:	d835      	bhi.n	800bc8a <USBD_StdDevReq+0xb2>
 800bc1e:	009a      	lsls	r2, r3, #2
 800bc20:	4b25      	ldr	r3, [pc, #148]	@ (800bcb8 <USBD_StdDevReq+0xe0>)
 800bc22:	18d3      	adds	r3, r2, r3
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bc28:	683a      	ldr	r2, [r7, #0]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	0011      	movs	r1, r2
 800bc2e:	0018      	movs	r0, r3
 800bc30:	f000 fa52 	bl	800c0d8 <USBD_GetDescriptor>
          break;
 800bc34:	e030      	b.n	800bc98 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bc36:	683a      	ldr	r2, [r7, #0]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	0011      	movs	r1, r2
 800bc3c:	0018      	movs	r0, r3
 800bc3e:	f000 fbfd 	bl	800c43c <USBD_SetAddress>
          break;
 800bc42:	e029      	b.n	800bc98 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bc44:	683a      	ldr	r2, [r7, #0]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	0011      	movs	r1, r2
 800bc4a:	0018      	movs	r0, r3
 800bc4c:	f000 fc4a 	bl	800c4e4 <USBD_SetConfig>
          break;
 800bc50:	e022      	b.n	800bc98 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bc52:	683a      	ldr	r2, [r7, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	0011      	movs	r1, r2
 800bc58:	0018      	movs	r0, r3
 800bc5a:	f000 fce7 	bl	800c62c <USBD_GetConfig>
          break;
 800bc5e:	e01b      	b.n	800bc98 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	0011      	movs	r1, r2
 800bc66:	0018      	movs	r0, r3
 800bc68:	f000 fd1b 	bl	800c6a2 <USBD_GetStatus>
          break;
 800bc6c:	e014      	b.n	800bc98 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bc6e:	683a      	ldr	r2, [r7, #0]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	0011      	movs	r1, r2
 800bc74:	0018      	movs	r0, r3
 800bc76:	f000 fd4e 	bl	800c716 <USBD_SetFeature>
          break;
 800bc7a:	e00d      	b.n	800bc98 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc7c:	683a      	ldr	r2, [r7, #0]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	0011      	movs	r1, r2
 800bc82:	0018      	movs	r0, r3
 800bc84:	f000 fd5d 	bl	800c742 <USBD_ClrFeature>
          break;
 800bc88:	e006      	b.n	800bc98 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	0011      	movs	r1, r2
 800bc90:	0018      	movs	r0, r3
 800bc92:	f000 fdb4 	bl	800c7fe <USBD_CtlError>
          break;
 800bc96:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800bc98:	e006      	b.n	800bca8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bc9a:	683a      	ldr	r2, [r7, #0]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	0011      	movs	r1, r2
 800bca0:	0018      	movs	r0, r3
 800bca2:	f000 fdac 	bl	800c7fe <USBD_CtlError>
      break;
 800bca6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800bca8:	230f      	movs	r3, #15
 800bcaa:	18fb      	adds	r3, r7, r3
 800bcac:	781b      	ldrb	r3, [r3, #0]
}
 800bcae:	0018      	movs	r0, r3
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	b004      	add	sp, #16
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	46c0      	nop			@ (mov r8, r8)
 800bcb8:	0800ec28 	.word	0x0800ec28

0800bcbc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bcbc:	b5b0      	push	{r4, r5, r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcc6:	230f      	movs	r3, #15
 800bcc8:	18fb      	adds	r3, r7, r3
 800bcca:	2200      	movs	r2, #0
 800bccc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	001a      	movs	r2, r3
 800bcd4:	2360      	movs	r3, #96	@ 0x60
 800bcd6:	4013      	ands	r3, r2
 800bcd8:	2b40      	cmp	r3, #64	@ 0x40
 800bcda:	d004      	beq.n	800bce6 <USBD_StdItfReq+0x2a>
 800bcdc:	d839      	bhi.n	800bd52 <USBD_StdItfReq+0x96>
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d001      	beq.n	800bce6 <USBD_StdItfReq+0x2a>
 800bce2:	2b20      	cmp	r3, #32
 800bce4:	d135      	bne.n	800bd52 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	23a7      	movs	r3, #167	@ 0xa7
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	5cd3      	ldrb	r3, [r2, r3]
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	d825      	bhi.n	800bd40 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	889b      	ldrh	r3, [r3, #4]
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d819      	bhi.n	800bd32 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	23ad      	movs	r3, #173	@ 0xad
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	58d3      	ldr	r3, [r2, r3]
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	250f      	movs	r5, #15
 800bd0a:	197c      	adds	r4, r7, r5
 800bd0c:	6839      	ldr	r1, [r7, #0]
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	0010      	movs	r0, r2
 800bd12:	4798      	blx	r3
 800bd14:	0003      	movs	r3, r0
 800bd16:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	88db      	ldrh	r3, [r3, #6]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d116      	bne.n	800bd4e <USBD_StdItfReq+0x92>
 800bd20:	197b      	adds	r3, r7, r5
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d112      	bne.n	800bd4e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	0018      	movs	r0, r3
 800bd2c:	f000 fe4f 	bl	800c9ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bd30:	e00d      	b.n	800bd4e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800bd32:	683a      	ldr	r2, [r7, #0]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	0011      	movs	r1, r2
 800bd38:	0018      	movs	r0, r3
 800bd3a:	f000 fd60 	bl	800c7fe <USBD_CtlError>
          break;
 800bd3e:	e006      	b.n	800bd4e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	0011      	movs	r1, r2
 800bd46:	0018      	movs	r0, r3
 800bd48:	f000 fd59 	bl	800c7fe <USBD_CtlError>
          break;
 800bd4c:	e000      	b.n	800bd50 <USBD_StdItfReq+0x94>
          break;
 800bd4e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800bd50:	e006      	b.n	800bd60 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800bd52:	683a      	ldr	r2, [r7, #0]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	0011      	movs	r1, r2
 800bd58:	0018      	movs	r0, r3
 800bd5a:	f000 fd50 	bl	800c7fe <USBD_CtlError>
      break;
 800bd5e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	0018      	movs	r0, r3
 800bd64:	46bd      	mov	sp, r7
 800bd66:	b004      	add	sp, #16
 800bd68:	bdb0      	pop	{r4, r5, r7, pc}

0800bd6a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bd6a:	b5b0      	push	{r4, r5, r7, lr}
 800bd6c:	b084      	sub	sp, #16
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
 800bd72:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd74:	230f      	movs	r3, #15
 800bd76:	18fb      	adds	r3, r7, r3
 800bd78:	2200      	movs	r2, #0
 800bd7a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	889a      	ldrh	r2, [r3, #4]
 800bd80:	230e      	movs	r3, #14
 800bd82:	18fb      	adds	r3, r7, r3
 800bd84:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	001a      	movs	r2, r3
 800bd8c:	2360      	movs	r3, #96	@ 0x60
 800bd8e:	4013      	ands	r3, r2
 800bd90:	2b40      	cmp	r3, #64	@ 0x40
 800bd92:	d006      	beq.n	800bda2 <USBD_StdEPReq+0x38>
 800bd94:	d900      	bls.n	800bd98 <USBD_StdEPReq+0x2e>
 800bd96:	e190      	b.n	800c0ba <USBD_StdEPReq+0x350>
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00c      	beq.n	800bdb6 <USBD_StdEPReq+0x4c>
 800bd9c:	2b20      	cmp	r3, #32
 800bd9e:	d000      	beq.n	800bda2 <USBD_StdEPReq+0x38>
 800bda0:	e18b      	b.n	800c0ba <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	23ad      	movs	r3, #173	@ 0xad
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	58d3      	ldr	r3, [r2, r3]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	6839      	ldr	r1, [r7, #0]
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	0010      	movs	r0, r2
 800bdb2:	4798      	blx	r3
      break;
 800bdb4:	e188      	b.n	800c0c8 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	001a      	movs	r2, r3
 800bdbc:	2360      	movs	r3, #96	@ 0x60
 800bdbe:	4013      	ands	r3, r2
 800bdc0:	2b20      	cmp	r3, #32
 800bdc2:	d10f      	bne.n	800bde4 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	23ad      	movs	r3, #173	@ 0xad
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	58d3      	ldr	r3, [r2, r3]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	250f      	movs	r5, #15
 800bdd0:	197c      	adds	r4, r7, r5
 800bdd2:	6839      	ldr	r1, [r7, #0]
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	0010      	movs	r0, r2
 800bdd8:	4798      	blx	r3
 800bdda:	0003      	movs	r3, r0
 800bddc:	7023      	strb	r3, [r4, #0]

        return ret;
 800bdde:	197b      	adds	r3, r7, r5
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	e174      	b.n	800c0ce <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	785b      	ldrb	r3, [r3, #1]
 800bde8:	2b03      	cmp	r3, #3
 800bdea:	d007      	beq.n	800bdfc <USBD_StdEPReq+0x92>
 800bdec:	dd00      	ble.n	800bdf0 <USBD_StdEPReq+0x86>
 800bdee:	e15c      	b.n	800c0aa <USBD_StdEPReq+0x340>
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d100      	bne.n	800bdf6 <USBD_StdEPReq+0x8c>
 800bdf4:	e092      	b.n	800bf1c <USBD_StdEPReq+0x1b2>
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d04b      	beq.n	800be92 <USBD_StdEPReq+0x128>
 800bdfa:	e156      	b.n	800c0aa <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	23a7      	movs	r3, #167	@ 0xa7
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	5cd3      	ldrb	r3, [r2, r3]
 800be04:	2b02      	cmp	r3, #2
 800be06:	d002      	beq.n	800be0e <USBD_StdEPReq+0xa4>
 800be08:	2b03      	cmp	r3, #3
 800be0a:	d01d      	beq.n	800be48 <USBD_StdEPReq+0xde>
 800be0c:	e039      	b.n	800be82 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be0e:	220e      	movs	r2, #14
 800be10:	18bb      	adds	r3, r7, r2
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d010      	beq.n	800be3a <USBD_StdEPReq+0xd0>
 800be18:	18bb      	adds	r3, r7, r2
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	2b80      	cmp	r3, #128	@ 0x80
 800be1e:	d00c      	beq.n	800be3a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800be20:	18bb      	adds	r3, r7, r2
 800be22:	781a      	ldrb	r2, [r3, #0]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	0011      	movs	r1, r2
 800be28:	0018      	movs	r0, r3
 800be2a:	f001 f9c2 	bl	800d1b2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2180      	movs	r1, #128	@ 0x80
 800be32:	0018      	movs	r0, r3
 800be34:	f001 f9bd 	bl	800d1b2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be38:	e02a      	b.n	800be90 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	0011      	movs	r1, r2
 800be40:	0018      	movs	r0, r3
 800be42:	f000 fcdc 	bl	800c7fe <USBD_CtlError>
              break;
 800be46:	e023      	b.n	800be90 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	885b      	ldrh	r3, [r3, #2]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d113      	bne.n	800be78 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800be50:	220e      	movs	r2, #14
 800be52:	18bb      	adds	r3, r7, r2
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00e      	beq.n	800be78 <USBD_StdEPReq+0x10e>
 800be5a:	18bb      	adds	r3, r7, r2
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	2b80      	cmp	r3, #128	@ 0x80
 800be60:	d00a      	beq.n	800be78 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	88db      	ldrh	r3, [r3, #6]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d106      	bne.n	800be78 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800be6a:	18bb      	adds	r3, r7, r2
 800be6c:	781a      	ldrb	r2, [r3, #0]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	0011      	movs	r1, r2
 800be72:	0018      	movs	r0, r3
 800be74:	f001 f99d 	bl	800d1b2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	0018      	movs	r0, r3
 800be7c:	f000 fda7 	bl	800c9ce <USBD_CtlSendStatus>

              break;
 800be80:	e006      	b.n	800be90 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800be82:	683a      	ldr	r2, [r7, #0]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	0011      	movs	r1, r2
 800be88:	0018      	movs	r0, r3
 800be8a:	f000 fcb8 	bl	800c7fe <USBD_CtlError>
              break;
 800be8e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800be90:	e112      	b.n	800c0b8 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	23a7      	movs	r3, #167	@ 0xa7
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	5cd3      	ldrb	r3, [r2, r3]
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	d002      	beq.n	800bea4 <USBD_StdEPReq+0x13a>
 800be9e:	2b03      	cmp	r3, #3
 800bea0:	d01d      	beq.n	800bede <USBD_StdEPReq+0x174>
 800bea2:	e032      	b.n	800bf0a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bea4:	220e      	movs	r2, #14
 800bea6:	18bb      	adds	r3, r7, r2
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d010      	beq.n	800bed0 <USBD_StdEPReq+0x166>
 800beae:	18bb      	adds	r3, r7, r2
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	2b80      	cmp	r3, #128	@ 0x80
 800beb4:	d00c      	beq.n	800bed0 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800beb6:	18bb      	adds	r3, r7, r2
 800beb8:	781a      	ldrb	r2, [r3, #0]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	0011      	movs	r1, r2
 800bebe:	0018      	movs	r0, r3
 800bec0:	f001 f977 	bl	800d1b2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2180      	movs	r1, #128	@ 0x80
 800bec8:	0018      	movs	r0, r3
 800beca:	f001 f972 	bl	800d1b2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bece:	e024      	b.n	800bf1a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800bed0:	683a      	ldr	r2, [r7, #0]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	0011      	movs	r1, r2
 800bed6:	0018      	movs	r0, r3
 800bed8:	f000 fc91 	bl	800c7fe <USBD_CtlError>
              break;
 800bedc:	e01d      	b.n	800bf1a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	885b      	ldrh	r3, [r3, #2]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d118      	bne.n	800bf18 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bee6:	210e      	movs	r1, #14
 800bee8:	187b      	adds	r3, r7, r1
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	227f      	movs	r2, #127	@ 0x7f
 800beee:	4013      	ands	r3, r2
 800bef0:	d006      	beq.n	800bf00 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bef2:	187b      	adds	r3, r7, r1
 800bef4:	781a      	ldrb	r2, [r3, #0]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	0011      	movs	r1, r2
 800befa:	0018      	movs	r0, r3
 800befc:	f001 f984 	bl	800d208 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	0018      	movs	r0, r3
 800bf04:	f000 fd63 	bl	800c9ce <USBD_CtlSendStatus>
              }
              break;
 800bf08:	e006      	b.n	800bf18 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800bf0a:	683a      	ldr	r2, [r7, #0]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	0011      	movs	r1, r2
 800bf10:	0018      	movs	r0, r3
 800bf12:	f000 fc74 	bl	800c7fe <USBD_CtlError>
              break;
 800bf16:	e000      	b.n	800bf1a <USBD_StdEPReq+0x1b0>
              break;
 800bf18:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800bf1a:	e0cd      	b.n	800c0b8 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	23a7      	movs	r3, #167	@ 0xa7
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	5cd3      	ldrb	r3, [r2, r3]
 800bf24:	2b02      	cmp	r3, #2
 800bf26:	d002      	beq.n	800bf2e <USBD_StdEPReq+0x1c4>
 800bf28:	2b03      	cmp	r3, #3
 800bf2a:	d03c      	beq.n	800bfa6 <USBD_StdEPReq+0x23c>
 800bf2c:	e0b5      	b.n	800c09a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf2e:	220e      	movs	r2, #14
 800bf30:	18bb      	adds	r3, r7, r2
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00a      	beq.n	800bf4e <USBD_StdEPReq+0x1e4>
 800bf38:	18bb      	adds	r3, r7, r2
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	2b80      	cmp	r3, #128	@ 0x80
 800bf3e:	d006      	beq.n	800bf4e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800bf40:	683a      	ldr	r2, [r7, #0]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	0011      	movs	r1, r2
 800bf46:	0018      	movs	r0, r3
 800bf48:	f000 fc59 	bl	800c7fe <USBD_CtlError>
                break;
 800bf4c:	e0ac      	b.n	800c0a8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf4e:	220e      	movs	r2, #14
 800bf50:	18bb      	adds	r3, r7, r2
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	b25b      	sxtb	r3, r3
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	da0c      	bge.n	800bf74 <USBD_StdEPReq+0x20a>
 800bf5a:	18bb      	adds	r3, r7, r2
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	227f      	movs	r2, #127	@ 0x7f
 800bf60:	401a      	ands	r2, r3
 800bf62:	0013      	movs	r3, r2
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	189b      	adds	r3, r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	3310      	adds	r3, #16
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	18d3      	adds	r3, r2, r3
 800bf70:	3304      	adds	r3, #4
 800bf72:	e00d      	b.n	800bf90 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf74:	230e      	movs	r3, #14
 800bf76:	18fb      	adds	r3, r7, r3
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	227f      	movs	r2, #127	@ 0x7f
 800bf7c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf7e:	0013      	movs	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	189b      	adds	r3, r3, r2
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	3351      	adds	r3, #81	@ 0x51
 800bf88:	33ff      	adds	r3, #255	@ 0xff
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	18d3      	adds	r3, r2, r3
 800bf8e:	3304      	adds	r3, #4
 800bf90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	2200      	movs	r2, #0
 800bf96:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bf98:	68b9      	ldr	r1, [r7, #8]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2202      	movs	r2, #2
 800bf9e:	0018      	movs	r0, r3
 800bfa0:	f000 fcab 	bl	800c8fa <USBD_CtlSendData>
              break;
 800bfa4:	e080      	b.n	800c0a8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bfa6:	220e      	movs	r2, #14
 800bfa8:	18bb      	adds	r3, r7, r2
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	b25b      	sxtb	r3, r3
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	da14      	bge.n	800bfdc <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bfb2:	18bb      	adds	r3, r7, r2
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	220f      	movs	r2, #15
 800bfb8:	401a      	ands	r2, r3
 800bfba:	6879      	ldr	r1, [r7, #4]
 800bfbc:	0013      	movs	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	189b      	adds	r3, r3, r2
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	18cb      	adds	r3, r1, r3
 800bfc6:	3318      	adds	r3, #24
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d11e      	bne.n	800c00c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800bfce:	683a      	ldr	r2, [r7, #0]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	0011      	movs	r1, r2
 800bfd4:	0018      	movs	r0, r3
 800bfd6:	f000 fc12 	bl	800c7fe <USBD_CtlError>
                  break;
 800bfda:	e065      	b.n	800c0a8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bfdc:	230e      	movs	r3, #14
 800bfde:	18fb      	adds	r3, r7, r3
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	220f      	movs	r2, #15
 800bfe4:	401a      	ands	r2, r3
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	23ac      	movs	r3, #172	@ 0xac
 800bfea:	0059      	lsls	r1, r3, #1
 800bfec:	0013      	movs	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	189b      	adds	r3, r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	18c3      	adds	r3, r0, r3
 800bff6:	185b      	adds	r3, r3, r1
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d106      	bne.n	800c00c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	0011      	movs	r1, r2
 800c004:	0018      	movs	r0, r3
 800c006:	f000 fbfa 	bl	800c7fe <USBD_CtlError>
                  break;
 800c00a:	e04d      	b.n	800c0a8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c00c:	220e      	movs	r2, #14
 800c00e:	18bb      	adds	r3, r7, r2
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	b25b      	sxtb	r3, r3
 800c014:	2b00      	cmp	r3, #0
 800c016:	da0c      	bge.n	800c032 <USBD_StdEPReq+0x2c8>
 800c018:	18bb      	adds	r3, r7, r2
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	227f      	movs	r2, #127	@ 0x7f
 800c01e:	401a      	ands	r2, r3
 800c020:	0013      	movs	r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	189b      	adds	r3, r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	3310      	adds	r3, #16
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	18d3      	adds	r3, r2, r3
 800c02e:	3304      	adds	r3, #4
 800c030:	e00d      	b.n	800c04e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c032:	230e      	movs	r3, #14
 800c034:	18fb      	adds	r3, r7, r3
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	227f      	movs	r2, #127	@ 0x7f
 800c03a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c03c:	0013      	movs	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	189b      	adds	r3, r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	3351      	adds	r3, #81	@ 0x51
 800c046:	33ff      	adds	r3, #255	@ 0xff
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	18d3      	adds	r3, r2, r3
 800c04c:	3304      	adds	r3, #4
 800c04e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c050:	220e      	movs	r2, #14
 800c052:	18bb      	adds	r3, r7, r2
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d003      	beq.n	800c062 <USBD_StdEPReq+0x2f8>
 800c05a:	18bb      	adds	r3, r7, r2
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	2b80      	cmp	r3, #128	@ 0x80
 800c060:	d103      	bne.n	800c06a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	2200      	movs	r2, #0
 800c066:	601a      	str	r2, [r3, #0]
 800c068:	e010      	b.n	800c08c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c06a:	230e      	movs	r3, #14
 800c06c:	18fb      	adds	r3, r7, r3
 800c06e:	781a      	ldrb	r2, [r3, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	0011      	movs	r1, r2
 800c074:	0018      	movs	r0, r3
 800c076:	f001 f8f2 	bl	800d25e <USBD_LL_IsStallEP>
 800c07a:	1e03      	subs	r3, r0, #0
 800c07c:	d003      	beq.n	800c086 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	2201      	movs	r2, #1
 800c082:	601a      	str	r2, [r3, #0]
 800c084:	e002      	b.n	800c08c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	2200      	movs	r2, #0
 800c08a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c08c:	68b9      	ldr	r1, [r7, #8]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2202      	movs	r2, #2
 800c092:	0018      	movs	r0, r3
 800c094:	f000 fc31 	bl	800c8fa <USBD_CtlSendData>
              break;
 800c098:	e006      	b.n	800c0a8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800c09a:	683a      	ldr	r2, [r7, #0]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	0011      	movs	r1, r2
 800c0a0:	0018      	movs	r0, r3
 800c0a2:	f000 fbac 	bl	800c7fe <USBD_CtlError>
              break;
 800c0a6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800c0a8:	e006      	b.n	800c0b8 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800c0aa:	683a      	ldr	r2, [r7, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	0011      	movs	r1, r2
 800c0b0:	0018      	movs	r0, r3
 800c0b2:	f000 fba4 	bl	800c7fe <USBD_CtlError>
          break;
 800c0b6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c0b8:	e006      	b.n	800c0c8 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800c0ba:	683a      	ldr	r2, [r7, #0]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	0011      	movs	r1, r2
 800c0c0:	0018      	movs	r0, r3
 800c0c2:	f000 fb9c 	bl	800c7fe <USBD_CtlError>
      break;
 800c0c6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800c0c8:	230f      	movs	r3, #15
 800c0ca:	18fb      	adds	r3, r7, r3
 800c0cc:	781b      	ldrb	r3, [r3, #0]
}
 800c0ce:	0018      	movs	r0, r3
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	b004      	add	sp, #16
 800c0d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c0d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c0e2:	2308      	movs	r3, #8
 800c0e4:	18fb      	adds	r3, r7, r3
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c0ee:	230b      	movs	r3, #11
 800c0f0:	18fb      	adds	r3, r7, r3
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	885b      	ldrh	r3, [r3, #2]
 800c0fa:	0a1b      	lsrs	r3, r3, #8
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	2b07      	cmp	r3, #7
 800c100:	d900      	bls.n	800c104 <USBD_GetDescriptor+0x2c>
 800c102:	e159      	b.n	800c3b8 <USBD_GetDescriptor+0x2e0>
 800c104:	009a      	lsls	r2, r3, #2
 800c106:	4bcb      	ldr	r3, [pc, #812]	@ (800c434 <USBD_GetDescriptor+0x35c>)
 800c108:	18d3      	adds	r3, r2, r3
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	23ac      	movs	r3, #172	@ 0xac
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	58d3      	ldr	r3, [r2, r3]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	7c12      	ldrb	r2, [r2, #16]
 800c11c:	2108      	movs	r1, #8
 800c11e:	1879      	adds	r1, r7, r1
 800c120:	0010      	movs	r0, r2
 800c122:	4798      	blx	r3
 800c124:	0003      	movs	r3, r0
 800c126:	60fb      	str	r3, [r7, #12]
      break;
 800c128:	e153      	b.n	800c3d2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	7c1b      	ldrb	r3, [r3, #16]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d10f      	bne.n	800c152 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	23ad      	movs	r3, #173	@ 0xad
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	58d3      	ldr	r3, [r2, r3]
 800c13a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c13c:	2208      	movs	r2, #8
 800c13e:	18ba      	adds	r2, r7, r2
 800c140:	0010      	movs	r0, r2
 800c142:	4798      	blx	r3
 800c144:	0003      	movs	r3, r0
 800c146:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	3301      	adds	r3, #1
 800c14c:	2202      	movs	r2, #2
 800c14e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c150:	e13f      	b.n	800c3d2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	23ad      	movs	r3, #173	@ 0xad
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	58d3      	ldr	r3, [r2, r3]
 800c15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c15c:	2208      	movs	r2, #8
 800c15e:	18ba      	adds	r2, r7, r2
 800c160:	0010      	movs	r0, r2
 800c162:	4798      	blx	r3
 800c164:	0003      	movs	r3, r0
 800c166:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	3301      	adds	r3, #1
 800c16c:	2202      	movs	r2, #2
 800c16e:	701a      	strb	r2, [r3, #0]
      break;
 800c170:	e12f      	b.n	800c3d2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	885b      	ldrh	r3, [r3, #2]
 800c176:	b2db      	uxtb	r3, r3
 800c178:	2b05      	cmp	r3, #5
 800c17a:	d900      	bls.n	800c17e <USBD_GetDescriptor+0xa6>
 800c17c:	e0d0      	b.n	800c320 <USBD_GetDescriptor+0x248>
 800c17e:	009a      	lsls	r2, r3, #2
 800c180:	4bad      	ldr	r3, [pc, #692]	@ (800c438 <USBD_GetDescriptor+0x360>)
 800c182:	18d3      	adds	r3, r2, r3
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	23ac      	movs	r3, #172	@ 0xac
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	58d3      	ldr	r3, [r2, r3]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00d      	beq.n	800c1b2 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	23ac      	movs	r3, #172	@ 0xac
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	58d3      	ldr	r3, [r2, r3]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	7c12      	ldrb	r2, [r2, #16]
 800c1a4:	2108      	movs	r1, #8
 800c1a6:	1879      	adds	r1, r7, r1
 800c1a8:	0010      	movs	r0, r2
 800c1aa:	4798      	blx	r3
 800c1ac:	0003      	movs	r3, r0
 800c1ae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1b0:	e0c3      	b.n	800c33a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c1b2:	683a      	ldr	r2, [r7, #0]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	0011      	movs	r1, r2
 800c1b8:	0018      	movs	r0, r3
 800c1ba:	f000 fb20 	bl	800c7fe <USBD_CtlError>
            err++;
 800c1be:	210b      	movs	r1, #11
 800c1c0:	187b      	adds	r3, r7, r1
 800c1c2:	781a      	ldrb	r2, [r3, #0]
 800c1c4:	187b      	adds	r3, r7, r1
 800c1c6:	3201      	adds	r2, #1
 800c1c8:	701a      	strb	r2, [r3, #0]
          break;
 800c1ca:	e0b6      	b.n	800c33a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	23ac      	movs	r3, #172	@ 0xac
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	58d3      	ldr	r3, [r2, r3]
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00d      	beq.n	800c1f6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	23ac      	movs	r3, #172	@ 0xac
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	58d3      	ldr	r3, [r2, r3]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	7c12      	ldrb	r2, [r2, #16]
 800c1e8:	2108      	movs	r1, #8
 800c1ea:	1879      	adds	r1, r7, r1
 800c1ec:	0010      	movs	r0, r2
 800c1ee:	4798      	blx	r3
 800c1f0:	0003      	movs	r3, r0
 800c1f2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1f4:	e0a1      	b.n	800c33a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c1f6:	683a      	ldr	r2, [r7, #0]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	0011      	movs	r1, r2
 800c1fc:	0018      	movs	r0, r3
 800c1fe:	f000 fafe 	bl	800c7fe <USBD_CtlError>
            err++;
 800c202:	210b      	movs	r1, #11
 800c204:	187b      	adds	r3, r7, r1
 800c206:	781a      	ldrb	r2, [r3, #0]
 800c208:	187b      	adds	r3, r7, r1
 800c20a:	3201      	adds	r2, #1
 800c20c:	701a      	strb	r2, [r3, #0]
          break;
 800c20e:	e094      	b.n	800c33a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	23ac      	movs	r3, #172	@ 0xac
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	58d3      	ldr	r3, [r2, r3]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00d      	beq.n	800c23a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	23ac      	movs	r3, #172	@ 0xac
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	58d3      	ldr	r3, [r2, r3]
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	7c12      	ldrb	r2, [r2, #16]
 800c22c:	2108      	movs	r1, #8
 800c22e:	1879      	adds	r1, r7, r1
 800c230:	0010      	movs	r0, r2
 800c232:	4798      	blx	r3
 800c234:	0003      	movs	r3, r0
 800c236:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c238:	e07f      	b.n	800c33a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	0011      	movs	r1, r2
 800c240:	0018      	movs	r0, r3
 800c242:	f000 fadc 	bl	800c7fe <USBD_CtlError>
            err++;
 800c246:	210b      	movs	r1, #11
 800c248:	187b      	adds	r3, r7, r1
 800c24a:	781a      	ldrb	r2, [r3, #0]
 800c24c:	187b      	adds	r3, r7, r1
 800c24e:	3201      	adds	r2, #1
 800c250:	701a      	strb	r2, [r3, #0]
          break;
 800c252:	e072      	b.n	800c33a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	23ac      	movs	r3, #172	@ 0xac
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	58d3      	ldr	r3, [r2, r3]
 800c25c:	691b      	ldr	r3, [r3, #16]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00d      	beq.n	800c27e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	23ac      	movs	r3, #172	@ 0xac
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	58d3      	ldr	r3, [r2, r3]
 800c26a:	691b      	ldr	r3, [r3, #16]
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	7c12      	ldrb	r2, [r2, #16]
 800c270:	2108      	movs	r1, #8
 800c272:	1879      	adds	r1, r7, r1
 800c274:	0010      	movs	r0, r2
 800c276:	4798      	blx	r3
 800c278:	0003      	movs	r3, r0
 800c27a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c27c:	e05d      	b.n	800c33a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c27e:	683a      	ldr	r2, [r7, #0]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	0011      	movs	r1, r2
 800c284:	0018      	movs	r0, r3
 800c286:	f000 faba 	bl	800c7fe <USBD_CtlError>
            err++;
 800c28a:	210b      	movs	r1, #11
 800c28c:	187b      	adds	r3, r7, r1
 800c28e:	781a      	ldrb	r2, [r3, #0]
 800c290:	187b      	adds	r3, r7, r1
 800c292:	3201      	adds	r2, #1
 800c294:	701a      	strb	r2, [r3, #0]
          break;
 800c296:	e050      	b.n	800c33a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	23ac      	movs	r3, #172	@ 0xac
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	58d3      	ldr	r3, [r2, r3]
 800c2a0:	695b      	ldr	r3, [r3, #20]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00d      	beq.n	800c2c2 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	23ac      	movs	r3, #172	@ 0xac
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	58d3      	ldr	r3, [r2, r3]
 800c2ae:	695b      	ldr	r3, [r3, #20]
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	7c12      	ldrb	r2, [r2, #16]
 800c2b4:	2108      	movs	r1, #8
 800c2b6:	1879      	adds	r1, r7, r1
 800c2b8:	0010      	movs	r0, r2
 800c2ba:	4798      	blx	r3
 800c2bc:	0003      	movs	r3, r0
 800c2be:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2c0:	e03b      	b.n	800c33a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c2c2:	683a      	ldr	r2, [r7, #0]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	0011      	movs	r1, r2
 800c2c8:	0018      	movs	r0, r3
 800c2ca:	f000 fa98 	bl	800c7fe <USBD_CtlError>
            err++;
 800c2ce:	210b      	movs	r1, #11
 800c2d0:	187b      	adds	r3, r7, r1
 800c2d2:	781a      	ldrb	r2, [r3, #0]
 800c2d4:	187b      	adds	r3, r7, r1
 800c2d6:	3201      	adds	r2, #1
 800c2d8:	701a      	strb	r2, [r3, #0]
          break;
 800c2da:	e02e      	b.n	800c33a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	23ac      	movs	r3, #172	@ 0xac
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	58d3      	ldr	r3, [r2, r3]
 800c2e4:	699b      	ldr	r3, [r3, #24]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00d      	beq.n	800c306 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	23ac      	movs	r3, #172	@ 0xac
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	58d3      	ldr	r3, [r2, r3]
 800c2f2:	699b      	ldr	r3, [r3, #24]
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	7c12      	ldrb	r2, [r2, #16]
 800c2f8:	2108      	movs	r1, #8
 800c2fa:	1879      	adds	r1, r7, r1
 800c2fc:	0010      	movs	r0, r2
 800c2fe:	4798      	blx	r3
 800c300:	0003      	movs	r3, r0
 800c302:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c304:	e019      	b.n	800c33a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c306:	683a      	ldr	r2, [r7, #0]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	0011      	movs	r1, r2
 800c30c:	0018      	movs	r0, r3
 800c30e:	f000 fa76 	bl	800c7fe <USBD_CtlError>
            err++;
 800c312:	210b      	movs	r1, #11
 800c314:	187b      	adds	r3, r7, r1
 800c316:	781a      	ldrb	r2, [r3, #0]
 800c318:	187b      	adds	r3, r7, r1
 800c31a:	3201      	adds	r2, #1
 800c31c:	701a      	strb	r2, [r3, #0]
          break;
 800c31e:	e00c      	b.n	800c33a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c320:	683a      	ldr	r2, [r7, #0]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	0011      	movs	r1, r2
 800c326:	0018      	movs	r0, r3
 800c328:	f000 fa69 	bl	800c7fe <USBD_CtlError>
          err++;
 800c32c:	210b      	movs	r1, #11
 800c32e:	187b      	adds	r3, r7, r1
 800c330:	781a      	ldrb	r2, [r3, #0]
 800c332:	187b      	adds	r3, r7, r1
 800c334:	3201      	adds	r2, #1
 800c336:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800c338:	e04b      	b.n	800c3d2 <USBD_GetDescriptor+0x2fa>
 800c33a:	e04a      	b.n	800c3d2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	7c1b      	ldrb	r3, [r3, #16]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d10b      	bne.n	800c35c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	23ad      	movs	r3, #173	@ 0xad
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	58d3      	ldr	r3, [r2, r3]
 800c34c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c34e:	2208      	movs	r2, #8
 800c350:	18ba      	adds	r2, r7, r2
 800c352:	0010      	movs	r0, r2
 800c354:	4798      	blx	r3
 800c356:	0003      	movs	r3, r0
 800c358:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c35a:	e03a      	b.n	800c3d2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c35c:	683a      	ldr	r2, [r7, #0]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	0011      	movs	r1, r2
 800c362:	0018      	movs	r0, r3
 800c364:	f000 fa4b 	bl	800c7fe <USBD_CtlError>
        err++;
 800c368:	210b      	movs	r1, #11
 800c36a:	187b      	adds	r3, r7, r1
 800c36c:	781a      	ldrb	r2, [r3, #0]
 800c36e:	187b      	adds	r3, r7, r1
 800c370:	3201      	adds	r2, #1
 800c372:	701a      	strb	r2, [r3, #0]
      break;
 800c374:	e02d      	b.n	800c3d2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	7c1b      	ldrb	r3, [r3, #16]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10f      	bne.n	800c39e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	23ad      	movs	r3, #173	@ 0xad
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	58d3      	ldr	r3, [r2, r3]
 800c386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c388:	2208      	movs	r2, #8
 800c38a:	18ba      	adds	r2, r7, r2
 800c38c:	0010      	movs	r0, r2
 800c38e:	4798      	blx	r3
 800c390:	0003      	movs	r3, r0
 800c392:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	3301      	adds	r3, #1
 800c398:	2207      	movs	r2, #7
 800c39a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c39c:	e019      	b.n	800c3d2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c39e:	683a      	ldr	r2, [r7, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	0011      	movs	r1, r2
 800c3a4:	0018      	movs	r0, r3
 800c3a6:	f000 fa2a 	bl	800c7fe <USBD_CtlError>
        err++;
 800c3aa:	210b      	movs	r1, #11
 800c3ac:	187b      	adds	r3, r7, r1
 800c3ae:	781a      	ldrb	r2, [r3, #0]
 800c3b0:	187b      	adds	r3, r7, r1
 800c3b2:	3201      	adds	r2, #1
 800c3b4:	701a      	strb	r2, [r3, #0]
      break;
 800c3b6:	e00c      	b.n	800c3d2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800c3b8:	683a      	ldr	r2, [r7, #0]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	0011      	movs	r1, r2
 800c3be:	0018      	movs	r0, r3
 800c3c0:	f000 fa1d 	bl	800c7fe <USBD_CtlError>
      err++;
 800c3c4:	210b      	movs	r1, #11
 800c3c6:	187b      	adds	r3, r7, r1
 800c3c8:	781a      	ldrb	r2, [r3, #0]
 800c3ca:	187b      	adds	r3, r7, r1
 800c3cc:	3201      	adds	r2, #1
 800c3ce:	701a      	strb	r2, [r3, #0]
      break;
 800c3d0:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800c3d2:	230b      	movs	r3, #11
 800c3d4:	18fb      	adds	r3, r7, r3
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d127      	bne.n	800c42c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c3dc:	2108      	movs	r1, #8
 800c3de:	187b      	adds	r3, r7, r1
 800c3e0:	881b      	ldrh	r3, [r3, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d019      	beq.n	800c41a <USBD_GetDescriptor+0x342>
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	88db      	ldrh	r3, [r3, #6]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d015      	beq.n	800c41a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	88da      	ldrh	r2, [r3, #6]
 800c3f2:	187b      	adds	r3, r7, r1
 800c3f4:	881b      	ldrh	r3, [r3, #0]
 800c3f6:	1c18      	adds	r0, r3, #0
 800c3f8:	1c11      	adds	r1, r2, #0
 800c3fa:	b28a      	uxth	r2, r1
 800c3fc:	b283      	uxth	r3, r0
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d900      	bls.n	800c404 <USBD_GetDescriptor+0x32c>
 800c402:	1c01      	adds	r1, r0, #0
 800c404:	b28a      	uxth	r2, r1
 800c406:	2108      	movs	r1, #8
 800c408:	187b      	adds	r3, r7, r1
 800c40a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c40c:	187b      	adds	r3, r7, r1
 800c40e:	881a      	ldrh	r2, [r3, #0]
 800c410:	68f9      	ldr	r1, [r7, #12]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	0018      	movs	r0, r3
 800c416:	f000 fa70 	bl	800c8fa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	88db      	ldrh	r3, [r3, #6]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d105      	bne.n	800c42e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	0018      	movs	r0, r3
 800c426:	f000 fad2 	bl	800c9ce <USBD_CtlSendStatus>
 800c42a:	e000      	b.n	800c42e <USBD_GetDescriptor+0x356>
    return;
 800c42c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800c42e:	46bd      	mov	sp, r7
 800c430:	b004      	add	sp, #16
 800c432:	bd80      	pop	{r7, pc}
 800c434:	0800ec50 	.word	0x0800ec50
 800c438:	0800ec70 	.word	0x0800ec70

0800c43c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c43c:	b590      	push	{r4, r7, lr}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	889b      	ldrh	r3, [r3, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d13d      	bne.n	800c4ca <USBD_SetAddress+0x8e>
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	88db      	ldrh	r3, [r3, #6]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d139      	bne.n	800c4ca <USBD_SetAddress+0x8e>
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	885b      	ldrh	r3, [r3, #2]
 800c45a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c45c:	d835      	bhi.n	800c4ca <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	885b      	ldrh	r3, [r3, #2]
 800c462:	b2da      	uxtb	r2, r3
 800c464:	230f      	movs	r3, #15
 800c466:	18fb      	adds	r3, r7, r3
 800c468:	217f      	movs	r1, #127	@ 0x7f
 800c46a:	400a      	ands	r2, r1
 800c46c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	23a7      	movs	r3, #167	@ 0xa7
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	5cd3      	ldrb	r3, [r2, r3]
 800c476:	2b03      	cmp	r3, #3
 800c478:	d106      	bne.n	800c488 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800c47a:	683a      	ldr	r2, [r7, #0]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	0011      	movs	r1, r2
 800c480:	0018      	movs	r0, r3
 800c482:	f000 f9bc 	bl	800c7fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c486:	e027      	b.n	800c4d8 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	240f      	movs	r4, #15
 800c48c:	193a      	adds	r2, r7, r4
 800c48e:	4914      	ldr	r1, [pc, #80]	@ (800c4e0 <USBD_SetAddress+0xa4>)
 800c490:	7812      	ldrb	r2, [r2, #0]
 800c492:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c494:	193b      	adds	r3, r7, r4
 800c496:	781a      	ldrb	r2, [r3, #0]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	0011      	movs	r1, r2
 800c49c:	0018      	movs	r0, r3
 800c49e:	f000 ff0f 	bl	800d2c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	0018      	movs	r0, r3
 800c4a6:	f000 fa92 	bl	800c9ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c4aa:	193b      	adds	r3, r7, r4
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d005      	beq.n	800c4be <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	23a7      	movs	r3, #167	@ 0xa7
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	2102      	movs	r1, #2
 800c4ba:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4bc:	e00c      	b.n	800c4d8 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	23a7      	movs	r3, #167	@ 0xa7
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	2101      	movs	r1, #1
 800c4c6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4c8:	e006      	b.n	800c4d8 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	0011      	movs	r1, r2
 800c4d0:	0018      	movs	r0, r3
 800c4d2:	f000 f994 	bl	800c7fe <USBD_CtlError>
  }
}
 800c4d6:	46c0      	nop			@ (mov r8, r8)
 800c4d8:	46c0      	nop			@ (mov r8, r8)
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	b005      	add	sp, #20
 800c4de:	bd90      	pop	{r4, r7, pc}
 800c4e0:	0000029e 	.word	0x0000029e

0800c4e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	885b      	ldrh	r3, [r3, #2]
 800c4f2:	b2da      	uxtb	r2, r3
 800c4f4:	4b4c      	ldr	r3, [pc, #304]	@ (800c628 <USBD_SetConfig+0x144>)
 800c4f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c4f8:	4b4b      	ldr	r3, [pc, #300]	@ (800c628 <USBD_SetConfig+0x144>)
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d906      	bls.n	800c50e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800c500:	683a      	ldr	r2, [r7, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	0011      	movs	r1, r2
 800c506:	0018      	movs	r0, r3
 800c508:	f000 f979 	bl	800c7fe <USBD_CtlError>
 800c50c:	e088      	b.n	800c620 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	23a7      	movs	r3, #167	@ 0xa7
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	5cd3      	ldrb	r3, [r2, r3]
 800c516:	2b02      	cmp	r3, #2
 800c518:	d002      	beq.n	800c520 <USBD_SetConfig+0x3c>
 800c51a:	2b03      	cmp	r3, #3
 800c51c:	d029      	beq.n	800c572 <USBD_SetConfig+0x8e>
 800c51e:	e071      	b.n	800c604 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c520:	4b41      	ldr	r3, [pc, #260]	@ (800c628 <USBD_SetConfig+0x144>)
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d01f      	beq.n	800c568 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800c528:	4b3f      	ldr	r3, [pc, #252]	@ (800c628 <USBD_SetConfig+0x144>)
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	001a      	movs	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	23a7      	movs	r3, #167	@ 0xa7
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	2103      	movs	r1, #3
 800c53a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c53c:	4b3a      	ldr	r3, [pc, #232]	@ (800c628 <USBD_SetConfig+0x144>)
 800c53e:	781a      	ldrb	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	0011      	movs	r1, r2
 800c544:	0018      	movs	r0, r3
 800c546:	f7ff f8c6 	bl	800b6d6 <USBD_SetClassConfig>
 800c54a:	0003      	movs	r3, r0
 800c54c:	2b02      	cmp	r3, #2
 800c54e:	d106      	bne.n	800c55e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800c550:	683a      	ldr	r2, [r7, #0]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	0011      	movs	r1, r2
 800c556:	0018      	movs	r0, r3
 800c558:	f000 f951 	bl	800c7fe <USBD_CtlError>
            return;
 800c55c:	e060      	b.n	800c620 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	0018      	movs	r0, r3
 800c562:	f000 fa34 	bl	800c9ce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c566:	e05b      	b.n	800c620 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	0018      	movs	r0, r3
 800c56c:	f000 fa2f 	bl	800c9ce <USBD_CtlSendStatus>
        break;
 800c570:	e056      	b.n	800c620 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c572:	4b2d      	ldr	r3, [pc, #180]	@ (800c628 <USBD_SetConfig+0x144>)
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d115      	bne.n	800c5a6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	23a7      	movs	r3, #167	@ 0xa7
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	2102      	movs	r1, #2
 800c582:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800c584:	4b28      	ldr	r3, [pc, #160]	@ (800c628 <USBD_SetConfig+0x144>)
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	001a      	movs	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c58e:	4b26      	ldr	r3, [pc, #152]	@ (800c628 <USBD_SetConfig+0x144>)
 800c590:	781a      	ldrb	r2, [r3, #0]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	0011      	movs	r1, r2
 800c596:	0018      	movs	r0, r3
 800c598:	f7ff f8c4 	bl	800b724 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	0018      	movs	r0, r3
 800c5a0:	f000 fa15 	bl	800c9ce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c5a4:	e03c      	b.n	800c620 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800c5a6:	4b20      	ldr	r3, [pc, #128]	@ (800c628 <USBD_SetConfig+0x144>)
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	001a      	movs	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d022      	beq.n	800c5fa <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	b2da      	uxtb	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	0011      	movs	r1, r2
 800c5be:	0018      	movs	r0, r3
 800c5c0:	f7ff f8b0 	bl	800b724 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c5c4:	4b18      	ldr	r3, [pc, #96]	@ (800c628 <USBD_SetConfig+0x144>)
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	001a      	movs	r2, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c5ce:	4b16      	ldr	r3, [pc, #88]	@ (800c628 <USBD_SetConfig+0x144>)
 800c5d0:	781a      	ldrb	r2, [r3, #0]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	0011      	movs	r1, r2
 800c5d6:	0018      	movs	r0, r3
 800c5d8:	f7ff f87d 	bl	800b6d6 <USBD_SetClassConfig>
 800c5dc:	0003      	movs	r3, r0
 800c5de:	2b02      	cmp	r3, #2
 800c5e0:	d106      	bne.n	800c5f0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800c5e2:	683a      	ldr	r2, [r7, #0]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	0011      	movs	r1, r2
 800c5e8:	0018      	movs	r0, r3
 800c5ea:	f000 f908 	bl	800c7fe <USBD_CtlError>
            return;
 800c5ee:	e017      	b.n	800c620 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	0018      	movs	r0, r3
 800c5f4:	f000 f9eb 	bl	800c9ce <USBD_CtlSendStatus>
        break;
 800c5f8:	e012      	b.n	800c620 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	0018      	movs	r0, r3
 800c5fe:	f000 f9e6 	bl	800c9ce <USBD_CtlSendStatus>
        break;
 800c602:	e00d      	b.n	800c620 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800c604:	683a      	ldr	r2, [r7, #0]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	0011      	movs	r1, r2
 800c60a:	0018      	movs	r0, r3
 800c60c:	f000 f8f7 	bl	800c7fe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c610:	4b05      	ldr	r3, [pc, #20]	@ (800c628 <USBD_SetConfig+0x144>)
 800c612:	781a      	ldrb	r2, [r3, #0]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	0011      	movs	r1, r2
 800c618:	0018      	movs	r0, r3
 800c61a:	f7ff f883 	bl	800b724 <USBD_ClrClassConfig>
        break;
 800c61e:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800c620:	46bd      	mov	sp, r7
 800c622:	b002      	add	sp, #8
 800c624:	bd80      	pop	{r7, pc}
 800c626:	46c0      	nop			@ (mov r8, r8)
 800c628:	20000490 	.word	0x20000490

0800c62c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	88db      	ldrh	r3, [r3, #6]
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d006      	beq.n	800c64c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800c63e:	683a      	ldr	r2, [r7, #0]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	0011      	movs	r1, r2
 800c644:	0018      	movs	r0, r3
 800c646:	f000 f8da 	bl	800c7fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c64a:	e026      	b.n	800c69a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	23a7      	movs	r3, #167	@ 0xa7
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	5cd3      	ldrb	r3, [r2, r3]
 800c654:	2b02      	cmp	r3, #2
 800c656:	dc02      	bgt.n	800c65e <USBD_GetConfig+0x32>
 800c658:	2b00      	cmp	r3, #0
 800c65a:	dc03      	bgt.n	800c664 <USBD_GetConfig+0x38>
 800c65c:	e016      	b.n	800c68c <USBD_GetConfig+0x60>
 800c65e:	2b03      	cmp	r3, #3
 800c660:	d00c      	beq.n	800c67c <USBD_GetConfig+0x50>
 800c662:	e013      	b.n	800c68c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	3308      	adds	r3, #8
 800c66e:	0019      	movs	r1, r3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2201      	movs	r2, #1
 800c674:	0018      	movs	r0, r3
 800c676:	f000 f940 	bl	800c8fa <USBD_CtlSendData>
        break;
 800c67a:	e00e      	b.n	800c69a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	1d19      	adds	r1, r3, #4
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	0018      	movs	r0, r3
 800c686:	f000 f938 	bl	800c8fa <USBD_CtlSendData>
        break;
 800c68a:	e006      	b.n	800c69a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800c68c:	683a      	ldr	r2, [r7, #0]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	0011      	movs	r1, r2
 800c692:	0018      	movs	r0, r3
 800c694:	f000 f8b3 	bl	800c7fe <USBD_CtlError>
        break;
 800c698:	46c0      	nop			@ (mov r8, r8)
}
 800c69a:	46c0      	nop			@ (mov r8, r8)
 800c69c:	46bd      	mov	sp, r7
 800c69e:	b002      	add	sp, #8
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b082      	sub	sp, #8
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
 800c6aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	23a7      	movs	r3, #167	@ 0xa7
 800c6b0:	009b      	lsls	r3, r3, #2
 800c6b2:	5cd3      	ldrb	r3, [r2, r3]
 800c6b4:	3b01      	subs	r3, #1
 800c6b6:	2b02      	cmp	r3, #2
 800c6b8:	d822      	bhi.n	800c700 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	88db      	ldrh	r3, [r3, #6]
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	d006      	beq.n	800c6d0 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	0011      	movs	r1, r2
 800c6c8:	0018      	movs	r0, r3
 800c6ca:	f000 f898 	bl	800c7fe <USBD_CtlError>
        break;
 800c6ce:	e01e      	b.n	800c70e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	23a9      	movs	r3, #169	@ 0xa9
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	58d3      	ldr	r3, [r2, r3]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d005      	beq.n	800c6ee <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	2202      	movs	r2, #2
 800c6e8:	431a      	orrs	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	330c      	adds	r3, #12
 800c6f2:	0019      	movs	r1, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2202      	movs	r2, #2
 800c6f8:	0018      	movs	r0, r3
 800c6fa:	f000 f8fe 	bl	800c8fa <USBD_CtlSendData>
      break;
 800c6fe:	e006      	b.n	800c70e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800c700:	683a      	ldr	r2, [r7, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	0011      	movs	r1, r2
 800c706:	0018      	movs	r0, r3
 800c708:	f000 f879 	bl	800c7fe <USBD_CtlError>
      break;
 800c70c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c70e:	46c0      	nop			@ (mov r8, r8)
 800c710:	46bd      	mov	sp, r7
 800c712:	b002      	add	sp, #8
 800c714:	bd80      	pop	{r7, pc}

0800c716 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b082      	sub	sp, #8
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
 800c71e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	885b      	ldrh	r3, [r3, #2]
 800c724:	2b01      	cmp	r3, #1
 800c726:	d108      	bne.n	800c73a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	23a9      	movs	r3, #169	@ 0xa9
 800c72c:	009b      	lsls	r3, r3, #2
 800c72e:	2101      	movs	r1, #1
 800c730:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	0018      	movs	r0, r3
 800c736:	f000 f94a 	bl	800c9ce <USBD_CtlSendStatus>
  }
}
 800c73a:	46c0      	nop			@ (mov r8, r8)
 800c73c:	46bd      	mov	sp, r7
 800c73e:	b002      	add	sp, #8
 800c740:	bd80      	pop	{r7, pc}

0800c742 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b082      	sub	sp, #8
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	23a7      	movs	r3, #167	@ 0xa7
 800c750:	009b      	lsls	r3, r3, #2
 800c752:	5cd3      	ldrb	r3, [r2, r3]
 800c754:	3b01      	subs	r3, #1
 800c756:	2b02      	cmp	r3, #2
 800c758:	d80d      	bhi.n	800c776 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	885b      	ldrh	r3, [r3, #2]
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d110      	bne.n	800c784 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	23a9      	movs	r3, #169	@ 0xa9
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	2100      	movs	r1, #0
 800c76a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	0018      	movs	r0, r3
 800c770:	f000 f92d 	bl	800c9ce <USBD_CtlSendStatus>
      }
      break;
 800c774:	e006      	b.n	800c784 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800c776:	683a      	ldr	r2, [r7, #0]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	0011      	movs	r1, r2
 800c77c:	0018      	movs	r0, r3
 800c77e:	f000 f83e 	bl	800c7fe <USBD_CtlError>
      break;
 800c782:	e000      	b.n	800c786 <USBD_ClrFeature+0x44>
      break;
 800c784:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c786:	46c0      	nop			@ (mov r8, r8)
 800c788:	46bd      	mov	sp, r7
 800c78a:	b002      	add	sp, #8
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b082      	sub	sp, #8
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	781a      	ldrb	r2, [r3, #0]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	785a      	ldrb	r2, [r3, #1]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	3302      	adds	r3, #2
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	001a      	movs	r2, r3
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	3303      	adds	r3, #3
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	021b      	lsls	r3, r3, #8
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	18d3      	adds	r3, r2, r3
 800c7bc:	b29a      	uxth	r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	001a      	movs	r2, r3
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	3305      	adds	r3, #5
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	021b      	lsls	r3, r3, #8
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	18d3      	adds	r3, r2, r3
 800c7d6:	b29a      	uxth	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	3306      	adds	r3, #6
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	001a      	movs	r2, r3
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	3307      	adds	r3, #7
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	021b      	lsls	r3, r3, #8
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	18d3      	adds	r3, r2, r3
 800c7f0:	b29a      	uxth	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	80da      	strh	r2, [r3, #6]

}
 800c7f6:	46c0      	nop			@ (mov r8, r8)
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	b002      	add	sp, #8
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b082      	sub	sp, #8
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
 800c806:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2180      	movs	r1, #128	@ 0x80
 800c80c:	0018      	movs	r0, r3
 800c80e:	f000 fcd0 	bl	800d1b2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2100      	movs	r1, #0
 800c816:	0018      	movs	r0, r3
 800c818:	f000 fccb 	bl	800d1b2 <USBD_LL_StallEP>
}
 800c81c:	46c0      	nop			@ (mov r8, r8)
 800c81e:	46bd      	mov	sp, r7
 800c820:	b002      	add	sp, #8
 800c822:	bd80      	pop	{r7, pc}

0800c824 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c824:	b590      	push	{r4, r7, lr}
 800c826:	b087      	sub	sp, #28
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c830:	2417      	movs	r4, #23
 800c832:	193b      	adds	r3, r7, r4
 800c834:	2200      	movs	r2, #0
 800c836:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d03c      	beq.n	800c8b8 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	0018      	movs	r0, r3
 800c842:	f000 f83d 	bl	800c8c0 <USBD_GetLen>
 800c846:	0003      	movs	r3, r0
 800c848:	3301      	adds	r3, #1
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	18db      	adds	r3, r3, r3
 800c84e:	b29a      	uxth	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c854:	193b      	adds	r3, r7, r4
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	193a      	adds	r2, r7, r4
 800c85a:	1c59      	adds	r1, r3, #1
 800c85c:	7011      	strb	r1, [r2, #0]
 800c85e:	001a      	movs	r2, r3
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	189b      	adds	r3, r3, r2
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	7812      	ldrb	r2, [r2, #0]
 800c868:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c86a:	193b      	adds	r3, r7, r4
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	193a      	adds	r2, r7, r4
 800c870:	1c59      	adds	r1, r3, #1
 800c872:	7011      	strb	r1, [r2, #0]
 800c874:	001a      	movs	r2, r3
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	189b      	adds	r3, r3, r2
 800c87a:	2203      	movs	r2, #3
 800c87c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c87e:	e017      	b.n	800c8b0 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	1c5a      	adds	r2, r3, #1
 800c884:	60fa      	str	r2, [r7, #12]
 800c886:	2417      	movs	r4, #23
 800c888:	193a      	adds	r2, r7, r4
 800c88a:	7812      	ldrb	r2, [r2, #0]
 800c88c:	1939      	adds	r1, r7, r4
 800c88e:	1c50      	adds	r0, r2, #1
 800c890:	7008      	strb	r0, [r1, #0]
 800c892:	0011      	movs	r1, r2
 800c894:	68ba      	ldr	r2, [r7, #8]
 800c896:	1852      	adds	r2, r2, r1
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c89c:	193b      	adds	r3, r7, r4
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	193a      	adds	r2, r7, r4
 800c8a2:	1c59      	adds	r1, r3, #1
 800c8a4:	7011      	strb	r1, [r2, #0]
 800c8a6:	001a      	movs	r2, r3
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	189b      	adds	r3, r3, r2
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1e3      	bne.n	800c880 <USBD_GetString+0x5c>
    }
  }
}
 800c8b8:	46c0      	nop			@ (mov r8, r8)
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	b007      	add	sp, #28
 800c8be:	bd90      	pop	{r4, r7, pc}

0800c8c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c8c8:	230f      	movs	r3, #15
 800c8ca:	18fb      	adds	r3, r7, r3
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800c8d0:	e008      	b.n	800c8e4 <USBD_GetLen+0x24>
  {
    len++;
 800c8d2:	210f      	movs	r1, #15
 800c8d4:	187b      	adds	r3, r7, r1
 800c8d6:	781a      	ldrb	r2, [r3, #0]
 800c8d8:	187b      	adds	r3, r7, r1
 800c8da:	3201      	adds	r2, #1
 800c8dc:	701a      	strb	r2, [r3, #0]
    buf++;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d1f2      	bne.n	800c8d2 <USBD_GetLen+0x12>
  }

  return len;
 800c8ec:	230f      	movs	r3, #15
 800c8ee:	18fb      	adds	r3, r7, r3
 800c8f0:	781b      	ldrb	r3, [r3, #0]
}
 800c8f2:	0018      	movs	r0, r3
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	b004      	add	sp, #16
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b084      	sub	sp, #16
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	60f8      	str	r0, [r7, #12]
 800c902:	60b9      	str	r1, [r7, #8]
 800c904:	1dbb      	adds	r3, r7, #6
 800c906:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	23a5      	movs	r3, #165	@ 0xa5
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	2102      	movs	r1, #2
 800c910:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800c912:	1dbb      	adds	r3, r7, #6
 800c914:	881a      	ldrh	r2, [r3, #0]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c91a:	1dbb      	adds	r3, r7, #6
 800c91c:	881a      	ldrh	r2, [r3, #0]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c922:	1dbb      	adds	r3, r7, #6
 800c924:	881b      	ldrh	r3, [r3, #0]
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	2100      	movs	r1, #0
 800c92c:	f000 fcf3 	bl	800d316 <USBD_LL_Transmit>

  return USBD_OK;
 800c930:	2300      	movs	r3, #0
}
 800c932:	0018      	movs	r0, r3
 800c934:	46bd      	mov	sp, r7
 800c936:	b004      	add	sp, #16
 800c938:	bd80      	pop	{r7, pc}

0800c93a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b084      	sub	sp, #16
 800c93e:	af00      	add	r7, sp, #0
 800c940:	60f8      	str	r0, [r7, #12]
 800c942:	60b9      	str	r1, [r7, #8]
 800c944:	1dbb      	adds	r3, r7, #6
 800c946:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c948:	1dbb      	adds	r3, r7, #6
 800c94a:	881b      	ldrh	r3, [r3, #0]
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	68f8      	ldr	r0, [r7, #12]
 800c950:	2100      	movs	r1, #0
 800c952:	f000 fce0 	bl	800d316 <USBD_LL_Transmit>

  return USBD_OK;
 800c956:	2300      	movs	r3, #0
}
 800c958:	0018      	movs	r0, r3
 800c95a:	46bd      	mov	sp, r7
 800c95c:	b004      	add	sp, #16
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	1dbb      	adds	r3, r7, #6
 800c96c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c96e:	68fa      	ldr	r2, [r7, #12]
 800c970:	23a5      	movs	r3, #165	@ 0xa5
 800c972:	009b      	lsls	r3, r3, #2
 800c974:	2103      	movs	r1, #3
 800c976:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800c978:	1dbb      	adds	r3, r7, #6
 800c97a:	8819      	ldrh	r1, [r3, #0]
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	23ae      	movs	r3, #174	@ 0xae
 800c980:	005b      	lsls	r3, r3, #1
 800c982:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800c984:	1dbb      	adds	r3, r7, #6
 800c986:	8819      	ldrh	r1, [r3, #0]
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	23b0      	movs	r3, #176	@ 0xb0
 800c98c:	005b      	lsls	r3, r3, #1
 800c98e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c990:	1dbb      	adds	r3, r7, #6
 800c992:	881b      	ldrh	r3, [r3, #0]
 800c994:	68ba      	ldr	r2, [r7, #8]
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	2100      	movs	r1, #0
 800c99a:	f000 fcf3 	bl	800d384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c99e:	2300      	movs	r3, #0
}
 800c9a0:	0018      	movs	r0, r3
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	b004      	add	sp, #16
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	1dbb      	adds	r3, r7, #6
 800c9b4:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9b6:	1dbb      	adds	r3, r7, #6
 800c9b8:	881b      	ldrh	r3, [r3, #0]
 800c9ba:	68ba      	ldr	r2, [r7, #8]
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	2100      	movs	r1, #0
 800c9c0:	f000 fce0 	bl	800d384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	0018      	movs	r0, r3
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	b004      	add	sp, #16
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b082      	sub	sp, #8
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	23a5      	movs	r3, #165	@ 0xa5
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	2104      	movs	r1, #4
 800c9de:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	2100      	movs	r1, #0
 800c9e8:	f000 fc95 	bl	800d316 <USBD_LL_Transmit>

  return USBD_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	0018      	movs	r0, r3
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	b002      	add	sp, #8
 800c9f4:	bd80      	pop	{r7, pc}

0800c9f6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c9f6:	b580      	push	{r7, lr}
 800c9f8:	b082      	sub	sp, #8
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	23a5      	movs	r3, #165	@ 0xa5
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	2105      	movs	r1, #5
 800ca06:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	2100      	movs	r1, #0
 800ca10:	f000 fcb8 	bl	800d384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca14:	2300      	movs	r3, #0
}
 800ca16:	0018      	movs	r0, r3
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	b002      	add	sp, #8
 800ca1c:	bd80      	pop	{r7, pc}
	...

0800ca20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ca24:	4914      	ldr	r1, [pc, #80]	@ (800ca78 <MX_USB_DEVICE_Init+0x58>)
 800ca26:	4b15      	ldr	r3, [pc, #84]	@ (800ca7c <MX_USB_DEVICE_Init+0x5c>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	0018      	movs	r0, r3
 800ca2c:	f7fe fdec 	bl	800b608 <USBD_Init>
 800ca30:	1e03      	subs	r3, r0, #0
 800ca32:	d001      	beq.n	800ca38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ca34:	f7f4 f834 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ca38:	4a11      	ldr	r2, [pc, #68]	@ (800ca80 <MX_USB_DEVICE_Init+0x60>)
 800ca3a:	4b10      	ldr	r3, [pc, #64]	@ (800ca7c <MX_USB_DEVICE_Init+0x5c>)
 800ca3c:	0011      	movs	r1, r2
 800ca3e:	0018      	movs	r0, r3
 800ca40:	f7fe fe13 	bl	800b66a <USBD_RegisterClass>
 800ca44:	1e03      	subs	r3, r0, #0
 800ca46:	d001      	beq.n	800ca4c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800ca48:	f7f4 f82a 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ca4c:	4a0d      	ldr	r2, [pc, #52]	@ (800ca84 <MX_USB_DEVICE_Init+0x64>)
 800ca4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ca7c <MX_USB_DEVICE_Init+0x5c>)
 800ca50:	0011      	movs	r1, r2
 800ca52:	0018      	movs	r0, r3
 800ca54:	f7fe fd28 	bl	800b4a8 <USBD_CDC_RegisterInterface>
 800ca58:	1e03      	subs	r3, r0, #0
 800ca5a:	d001      	beq.n	800ca60 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800ca5c:	f7f4 f820 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca60:	4b06      	ldr	r3, [pc, #24]	@ (800ca7c <MX_USB_DEVICE_Init+0x5c>)
 800ca62:	0018      	movs	r0, r3
 800ca64:	f7fe fe21 	bl	800b6aa <USBD_Start>
 800ca68:	1e03      	subs	r3, r0, #0
 800ca6a:	d001      	beq.n	800ca70 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800ca6c:	f7f4 f818 	bl	8000aa0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ca70:	46c0      	nop			@ (mov r8, r8)
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	46c0      	nop			@ (mov r8, r8)
 800ca78:	20000170 	.word	0x20000170
 800ca7c:	20000494 	.word	0x20000494
 800ca80:	2000005c 	.word	0x2000005c
 800ca84:	20000160 	.word	0x20000160

0800ca88 <RegisterCallback>:
static int8_t CDC_DeInit_FS(void);
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length);
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
void RegisterCallback(USBCallbackFunction cb){
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  USBRx = cb;  // Assign the user-defined function to the callback
 800ca90:	4b03      	ldr	r3, [pc, #12]	@ (800caa0 <RegisterCallback+0x18>)
 800ca92:	687a      	ldr	r2, [r7, #4]
 800ca94:	601a      	str	r2, [r3, #0]
}
 800ca96:	46c0      	nop			@ (mov r8, r8)
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	b002      	add	sp, #8
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	46c0      	nop			@ (mov r8, r8)
 800caa0:	20000f58 	.word	0x20000f58

0800caa4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800caa8:	4907      	ldr	r1, [pc, #28]	@ (800cac8 <CDC_Init_FS+0x24>)
 800caaa:	4b08      	ldr	r3, [pc, #32]	@ (800cacc <CDC_Init_FS+0x28>)
 800caac:	2200      	movs	r2, #0
 800caae:	0018      	movs	r0, r3
 800cab0:	f7fe fd15 	bl	800b4de <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cab4:	4a06      	ldr	r2, [pc, #24]	@ (800cad0 <CDC_Init_FS+0x2c>)
 800cab6:	4b05      	ldr	r3, [pc, #20]	@ (800cacc <CDC_Init_FS+0x28>)
 800cab8:	0011      	movs	r1, r2
 800caba:	0018      	movs	r0, r3
 800cabc:	f7fe fd2b 	bl	800b516 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cac0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cac2:	0018      	movs	r0, r3
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	20000b58 	.word	0x20000b58
 800cacc:	20000494 	.word	0x20000494
 800cad0:	20000758 	.word	0x20000758

0800cad4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cad8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cada:	0018      	movs	r0, r3
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6039      	str	r1, [r7, #0]
 800cae8:	0011      	movs	r1, r2
 800caea:	1dfb      	adds	r3, r7, #7
 800caec:	1c02      	adds	r2, r0, #0
 800caee:	701a      	strb	r2, [r3, #0]
 800caf0:	1d3b      	adds	r3, r7, #4
 800caf2:	1c0a      	adds	r2, r1, #0
 800caf4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800caf6:	1dfb      	adds	r3, r7, #7
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	2b23      	cmp	r3, #35	@ 0x23
 800cafc:	d804      	bhi.n	800cb08 <CDC_Control_FS+0x28>
 800cafe:	009a      	lsls	r2, r3, #2
 800cb00:	4b04      	ldr	r3, [pc, #16]	@ (800cb14 <CDC_Control_FS+0x34>)
 800cb02:	18d3      	adds	r3, r2, r3
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cb08:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800cb0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb0c:	0018      	movs	r0, r3
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	b002      	add	sp, #8
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	0800ec88 	.word	0x0800ec88

0800cb18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	4b0b      	ldr	r3, [pc, #44]	@ (800cb54 <CDC_Receive_FS+0x3c>)
 800cb26:	0011      	movs	r1, r2
 800cb28:	0018      	movs	r0, r3
 800cb2a:	f7fe fcf4 	bl	800b516 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cb2e:	4b09      	ldr	r3, [pc, #36]	@ (800cb54 <CDC_Receive_FS+0x3c>)
 800cb30:	0018      	movs	r0, r3
 800cb32:	f7fe fd3b 	bl	800b5ac <USBD_CDC_ReceivePacket>
  if (USBRx) {
 800cb36:	4b08      	ldr	r3, [pc, #32]	@ (800cb58 <CDC_Receive_FS+0x40>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d005      	beq.n	800cb4a <CDC_Receive_FS+0x32>
	  USBRx(Buf,Len); //Send RX data to main
 800cb3e:	4b06      	ldr	r3, [pc, #24]	@ (800cb58 <CDC_Receive_FS+0x40>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	6839      	ldr	r1, [r7, #0]
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	0010      	movs	r0, r2
 800cb48:	4798      	blx	r3
  }
  return (USBD_OK);
 800cb4a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb4c:	0018      	movs	r0, r3
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	b002      	add	sp, #8
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	20000494 	.word	0x20000494
 800cb58:	20000f58 	.word	0x20000f58

0800cb5c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cb5c:	b5b0      	push	{r4, r5, r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	000a      	movs	r2, r1
 800cb66:	1cbb      	adds	r3, r7, #2
 800cb68:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800cb6a:	230f      	movs	r3, #15
 800cb6c:	18fb      	adds	r3, r7, r3
 800cb6e:	2200      	movs	r2, #0
 800cb70:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cb72:	4a11      	ldr	r2, [pc, #68]	@ (800cbb8 <CDC_Transmit_FS+0x5c>)
 800cb74:	23ae      	movs	r3, #174	@ 0xae
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	58d3      	ldr	r3, [r2, r3]
 800cb7a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cb7c:	68ba      	ldr	r2, [r7, #8]
 800cb7e:	2385      	movs	r3, #133	@ 0x85
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	58d3      	ldr	r3, [r2, r3]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d001      	beq.n	800cb8c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e010      	b.n	800cbae <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cb8c:	1cbb      	adds	r3, r7, #2
 800cb8e:	881a      	ldrh	r2, [r3, #0]
 800cb90:	6879      	ldr	r1, [r7, #4]
 800cb92:	4b09      	ldr	r3, [pc, #36]	@ (800cbb8 <CDC_Transmit_FS+0x5c>)
 800cb94:	0018      	movs	r0, r3
 800cb96:	f7fe fca2 	bl	800b4de <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cb9a:	250f      	movs	r5, #15
 800cb9c:	197c      	adds	r4, r7, r5
 800cb9e:	4b06      	ldr	r3, [pc, #24]	@ (800cbb8 <CDC_Transmit_FS+0x5c>)
 800cba0:	0018      	movs	r0, r3
 800cba2:	f7fe fccc 	bl	800b53e <USBD_CDC_TransmitPacket>
 800cba6:	0003      	movs	r3, r0
 800cba8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800cbaa:	197b      	adds	r3, r7, r5
 800cbac:	781b      	ldrb	r3, [r3, #0]
}
 800cbae:	0018      	movs	r0, r3
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	b004      	add	sp, #16
 800cbb4:	bdb0      	pop	{r4, r5, r7, pc}
 800cbb6:	46c0      	nop			@ (mov r8, r8)
 800cbb8:	20000494 	.word	0x20000494

0800cbbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	0002      	movs	r2, r0
 800cbc4:	6039      	str	r1, [r7, #0]
 800cbc6:	1dfb      	adds	r3, r7, #7
 800cbc8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	2212      	movs	r2, #18
 800cbce:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cbd0:	4b02      	ldr	r3, [pc, #8]	@ (800cbdc <USBD_FS_DeviceDescriptor+0x20>)
}
 800cbd2:	0018      	movs	r0, r3
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	b002      	add	sp, #8
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	46c0      	nop			@ (mov r8, r8)
 800cbdc:	2000018c 	.word	0x2000018c

0800cbe0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	0002      	movs	r2, r0
 800cbe8:	6039      	str	r1, [r7, #0]
 800cbea:	1dfb      	adds	r3, r7, #7
 800cbec:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	2204      	movs	r2, #4
 800cbf2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cbf4:	4b02      	ldr	r3, [pc, #8]	@ (800cc00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cbf6:	0018      	movs	r0, r3
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	b002      	add	sp, #8
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	46c0      	nop			@ (mov r8, r8)
 800cc00:	200001a0 	.word	0x200001a0

0800cc04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	0002      	movs	r2, r0
 800cc0c:	6039      	str	r1, [r7, #0]
 800cc0e:	1dfb      	adds	r3, r7, #7
 800cc10:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800cc12:	1dfb      	adds	r3, r7, #7
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d106      	bne.n	800cc28 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc1a:	683a      	ldr	r2, [r7, #0]
 800cc1c:	4908      	ldr	r1, [pc, #32]	@ (800cc40 <USBD_FS_ProductStrDescriptor+0x3c>)
 800cc1e:	4b09      	ldr	r3, [pc, #36]	@ (800cc44 <USBD_FS_ProductStrDescriptor+0x40>)
 800cc20:	0018      	movs	r0, r3
 800cc22:	f7ff fdff 	bl	800c824 <USBD_GetString>
 800cc26:	e005      	b.n	800cc34 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc28:	683a      	ldr	r2, [r7, #0]
 800cc2a:	4905      	ldr	r1, [pc, #20]	@ (800cc40 <USBD_FS_ProductStrDescriptor+0x3c>)
 800cc2c:	4b05      	ldr	r3, [pc, #20]	@ (800cc44 <USBD_FS_ProductStrDescriptor+0x40>)
 800cc2e:	0018      	movs	r0, r3
 800cc30:	f7ff fdf8 	bl	800c824 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc34:	4b02      	ldr	r3, [pc, #8]	@ (800cc40 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800cc36:	0018      	movs	r0, r3
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	b002      	add	sp, #8
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	46c0      	nop			@ (mov r8, r8)
 800cc40:	20000f5c 	.word	0x20000f5c
 800cc44:	0800e6cc 	.word	0x0800e6cc

0800cc48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	0002      	movs	r2, r0
 800cc50:	6039      	str	r1, [r7, #0]
 800cc52:	1dfb      	adds	r3, r7, #7
 800cc54:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc56:	683a      	ldr	r2, [r7, #0]
 800cc58:	4904      	ldr	r1, [pc, #16]	@ (800cc6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc5a:	4b05      	ldr	r3, [pc, #20]	@ (800cc70 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800cc5c:	0018      	movs	r0, r3
 800cc5e:	f7ff fde1 	bl	800c824 <USBD_GetString>
  return USBD_StrDesc;
 800cc62:	4b02      	ldr	r3, [pc, #8]	@ (800cc6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800cc64:	0018      	movs	r0, r3
 800cc66:	46bd      	mov	sp, r7
 800cc68:	b002      	add	sp, #8
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	20000f5c 	.word	0x20000f5c
 800cc70:	0800e6e4 	.word	0x0800e6e4

0800cc74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	0002      	movs	r2, r0
 800cc7c:	6039      	str	r1, [r7, #0]
 800cc7e:	1dfb      	adds	r3, r7, #7
 800cc80:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	221a      	movs	r2, #26
 800cc86:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc88:	f000 f84c 	bl	800cd24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc8c:	4b02      	ldr	r3, [pc, #8]	@ (800cc98 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800cc8e:	0018      	movs	r0, r3
 800cc90:	46bd      	mov	sp, r7
 800cc92:	b002      	add	sp, #8
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	46c0      	nop			@ (mov r8, r8)
 800cc98:	200001a4 	.word	0x200001a4

0800cc9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	0002      	movs	r2, r0
 800cca4:	6039      	str	r1, [r7, #0]
 800cca6:	1dfb      	adds	r3, r7, #7
 800cca8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800ccaa:	1dfb      	adds	r3, r7, #7
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d106      	bne.n	800ccc0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccb2:	683a      	ldr	r2, [r7, #0]
 800ccb4:	4908      	ldr	r1, [pc, #32]	@ (800ccd8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800ccb6:	4b09      	ldr	r3, [pc, #36]	@ (800ccdc <USBD_FS_ConfigStrDescriptor+0x40>)
 800ccb8:	0018      	movs	r0, r3
 800ccba:	f7ff fdb3 	bl	800c824 <USBD_GetString>
 800ccbe:	e005      	b.n	800cccc <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccc0:	683a      	ldr	r2, [r7, #0]
 800ccc2:	4905      	ldr	r1, [pc, #20]	@ (800ccd8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800ccc4:	4b05      	ldr	r3, [pc, #20]	@ (800ccdc <USBD_FS_ConfigStrDescriptor+0x40>)
 800ccc6:	0018      	movs	r0, r3
 800ccc8:	f7ff fdac 	bl	800c824 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cccc:	4b02      	ldr	r3, [pc, #8]	@ (800ccd8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800ccce:	0018      	movs	r0, r3
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	b002      	add	sp, #8
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	46c0      	nop			@ (mov r8, r8)
 800ccd8:	20000f5c 	.word	0x20000f5c
 800ccdc:	0800e6f8 	.word	0x0800e6f8

0800cce0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	0002      	movs	r2, r0
 800cce8:	6039      	str	r1, [r7, #0]
 800ccea:	1dfb      	adds	r3, r7, #7
 800ccec:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800ccee:	1dfb      	adds	r3, r7, #7
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d106      	bne.n	800cd04 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccf6:	683a      	ldr	r2, [r7, #0]
 800ccf8:	4908      	ldr	r1, [pc, #32]	@ (800cd1c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800ccfa:	4b09      	ldr	r3, [pc, #36]	@ (800cd20 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800ccfc:	0018      	movs	r0, r3
 800ccfe:	f7ff fd91 	bl	800c824 <USBD_GetString>
 800cd02:	e005      	b.n	800cd10 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd04:	683a      	ldr	r2, [r7, #0]
 800cd06:	4905      	ldr	r1, [pc, #20]	@ (800cd1c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800cd08:	4b05      	ldr	r3, [pc, #20]	@ (800cd20 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800cd0a:	0018      	movs	r0, r3
 800cd0c:	f7ff fd8a 	bl	800c824 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd10:	4b02      	ldr	r3, [pc, #8]	@ (800cd1c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800cd12:	0018      	movs	r0, r3
 800cd14:	46bd      	mov	sp, r7
 800cd16:	b002      	add	sp, #8
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	46c0      	nop			@ (mov r8, r8)
 800cd1c:	20000f5c 	.word	0x20000f5c
 800cd20:	0800e704 	.word	0x0800e704

0800cd24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd2a:	4b10      	ldr	r3, [pc, #64]	@ (800cd6c <Get_SerialNum+0x48>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd30:	4b0f      	ldr	r3, [pc, #60]	@ (800cd70 <Get_SerialNum+0x4c>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd36:	4b0f      	ldr	r3, [pc, #60]	@ (800cd74 <Get_SerialNum+0x50>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	18d3      	adds	r3, r2, r3
 800cd42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00b      	beq.n	800cd62 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd4a:	490b      	ldr	r1, [pc, #44]	@ (800cd78 <Get_SerialNum+0x54>)
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2208      	movs	r2, #8
 800cd50:	0018      	movs	r0, r3
 800cd52:	f000 f815 	bl	800cd80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd56:	4909      	ldr	r1, [pc, #36]	@ (800cd7c <Get_SerialNum+0x58>)
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	2204      	movs	r2, #4
 800cd5c:	0018      	movs	r0, r3
 800cd5e:	f000 f80f 	bl	800cd80 <IntToUnicode>
  }
}
 800cd62:	46c0      	nop			@ (mov r8, r8)
 800cd64:	46bd      	mov	sp, r7
 800cd66:	b004      	add	sp, #16
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	46c0      	nop			@ (mov r8, r8)
 800cd6c:	1ff80050 	.word	0x1ff80050
 800cd70:	1ff80054 	.word	0x1ff80054
 800cd74:	1ff80058 	.word	0x1ff80058
 800cd78:	200001a6 	.word	0x200001a6
 800cd7c:	200001b6 	.word	0x200001b6

0800cd80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	1dfb      	adds	r3, r7, #7
 800cd8c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800cd8e:	2117      	movs	r1, #23
 800cd90:	187b      	adds	r3, r7, r1
 800cd92:	2200      	movs	r2, #0
 800cd94:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800cd96:	187b      	adds	r3, r7, r1
 800cd98:	2200      	movs	r2, #0
 800cd9a:	701a      	strb	r2, [r3, #0]
 800cd9c:	e02f      	b.n	800cdfe <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	0f1b      	lsrs	r3, r3, #28
 800cda2:	2b09      	cmp	r3, #9
 800cda4:	d80d      	bhi.n	800cdc2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	0f1b      	lsrs	r3, r3, #28
 800cdaa:	b2da      	uxtb	r2, r3
 800cdac:	2317      	movs	r3, #23
 800cdae:	18fb      	adds	r3, r7, r3
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	005b      	lsls	r3, r3, #1
 800cdb4:	0019      	movs	r1, r3
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	185b      	adds	r3, r3, r1
 800cdba:	3230      	adds	r2, #48	@ 0x30
 800cdbc:	b2d2      	uxtb	r2, r2
 800cdbe:	701a      	strb	r2, [r3, #0]
 800cdc0:	e00c      	b.n	800cddc <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	0f1b      	lsrs	r3, r3, #28
 800cdc6:	b2da      	uxtb	r2, r3
 800cdc8:	2317      	movs	r3, #23
 800cdca:	18fb      	adds	r3, r7, r3
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	005b      	lsls	r3, r3, #1
 800cdd0:	0019      	movs	r1, r3
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	185b      	adds	r3, r3, r1
 800cdd6:	3237      	adds	r2, #55	@ 0x37
 800cdd8:	b2d2      	uxtb	r2, r2
 800cdda:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	011b      	lsls	r3, r3, #4
 800cde0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cde2:	2117      	movs	r1, #23
 800cde4:	187b      	adds	r3, r7, r1
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	3301      	adds	r3, #1
 800cdec:	68ba      	ldr	r2, [r7, #8]
 800cdee:	18d3      	adds	r3, r2, r3
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cdf4:	187b      	adds	r3, r7, r1
 800cdf6:	781a      	ldrb	r2, [r3, #0]
 800cdf8:	187b      	adds	r3, r7, r1
 800cdfa:	3201      	adds	r2, #1
 800cdfc:	701a      	strb	r2, [r3, #0]
 800cdfe:	2317      	movs	r3, #23
 800ce00:	18fa      	adds	r2, r7, r3
 800ce02:	1dfb      	adds	r3, r7, #7
 800ce04:	7812      	ldrb	r2, [r2, #0]
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d3c8      	bcc.n	800cd9e <IntToUnicode+0x1e>
  }
}
 800ce0c:	46c0      	nop			@ (mov r8, r8)
 800ce0e:	46c0      	nop			@ (mov r8, r8)
 800ce10:	46bd      	mov	sp, r7
 800ce12:	b006      	add	sp, #24
 800ce14:	bd80      	pop	{r7, pc}
	...

0800ce18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4a0a      	ldr	r2, [pc, #40]	@ (800ce50 <HAL_PCD_MspInit+0x38>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d10e      	bne.n	800ce48 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ce2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ce54 <HAL_PCD_MspInit+0x3c>)
 800ce2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce2e:	4b09      	ldr	r3, [pc, #36]	@ (800ce54 <HAL_PCD_MspInit+0x3c>)
 800ce30:	2180      	movs	r1, #128	@ 0x80
 800ce32:	0409      	lsls	r1, r1, #16
 800ce34:	430a      	orrs	r2, r1
 800ce36:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800ce38:	2200      	movs	r2, #0
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	201f      	movs	r0, #31
 800ce3e:	f7f8 fc93 	bl	8005768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800ce42:	201f      	movs	r0, #31
 800ce44:	f7f8 fca5 	bl	8005792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ce48:	46c0      	nop			@ (mov r8, r8)
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	b002      	add	sp, #8
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	40005c00 	.word	0x40005c00
 800ce54:	40021000 	.word	0x40021000

0800ce58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	23bc      	movs	r3, #188	@ 0xbc
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	58d2      	ldr	r2, [r2, r3]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	21ac      	movs	r1, #172	@ 0xac
 800ce6c:	0089      	lsls	r1, r1, #2
 800ce6e:	468c      	mov	ip, r1
 800ce70:	4463      	add	r3, ip
 800ce72:	0019      	movs	r1, r3
 800ce74:	0010      	movs	r0, r2
 800ce76:	f7fe fc6b 	bl	800b750 <USBD_LL_SetupStage>
}
 800ce7a:	46c0      	nop			@ (mov r8, r8)
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	b002      	add	sp, #8
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce82:	b590      	push	{r4, r7, lr}
 800ce84:	b083      	sub	sp, #12
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	000a      	movs	r2, r1
 800ce8c:	1cfb      	adds	r3, r7, #3
 800ce8e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	23bc      	movs	r3, #188	@ 0xbc
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	58d4      	ldr	r4, [r2, r3]
 800ce98:	1cfb      	adds	r3, r7, #3
 800ce9a:	781a      	ldrb	r2, [r3, #0]
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	23be      	movs	r3, #190	@ 0xbe
 800cea0:	0059      	lsls	r1, r3, #1
 800cea2:	0013      	movs	r3, r2
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	189b      	adds	r3, r3, r2
 800cea8:	00db      	lsls	r3, r3, #3
 800ceaa:	18c3      	adds	r3, r0, r3
 800ceac:	185b      	adds	r3, r3, r1
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	1cfb      	adds	r3, r7, #3
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	0019      	movs	r1, r3
 800ceb6:	0020      	movs	r0, r4
 800ceb8:	f7fe fca8 	bl	800b80c <USBD_LL_DataOutStage>
}
 800cebc:	46c0      	nop			@ (mov r8, r8)
 800cebe:	46bd      	mov	sp, r7
 800cec0:	b003      	add	sp, #12
 800cec2:	bd90      	pop	{r4, r7, pc}

0800cec4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	000a      	movs	r2, r1
 800cece:	1cfb      	adds	r3, r7, #3
 800ced0:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	23bc      	movs	r3, #188	@ 0xbc
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	58d0      	ldr	r0, [r2, r3]
 800ceda:	1cfb      	adds	r3, r7, #3
 800cedc:	781a      	ldrb	r2, [r3, #0]
 800cede:	6879      	ldr	r1, [r7, #4]
 800cee0:	0013      	movs	r3, r2
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	189b      	adds	r3, r3, r2
 800cee6:	00db      	lsls	r3, r3, #3
 800cee8:	18cb      	adds	r3, r1, r3
 800ceea:	333c      	adds	r3, #60	@ 0x3c
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	1cfb      	adds	r3, r7, #3
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	0019      	movs	r1, r3
 800cef4:	f7fe fd0c 	bl	800b910 <USBD_LL_DataInStage>
}
 800cef8:	46c0      	nop			@ (mov r8, r8)
 800cefa:	46bd      	mov	sp, r7
 800cefc:	b002      	add	sp, #8
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	23bc      	movs	r3, #188	@ 0xbc
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	58d3      	ldr	r3, [r2, r3]
 800cf10:	0018      	movs	r0, r3
 800cf12:	f7fe fe43 	bl	800bb9c <USBD_LL_SOF>
}
 800cf16:	46c0      	nop			@ (mov r8, r8)
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	b002      	add	sp, #8
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b084      	sub	sp, #16
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf26:	230f      	movs	r3, #15
 800cf28:	18fb      	adds	r3, r7, r3
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	2b02      	cmp	r3, #2
 800cf34:	d001      	beq.n	800cf3a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800cf36:	f7f3 fdb3 	bl	8000aa0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	23bc      	movs	r3, #188	@ 0xbc
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	58d2      	ldr	r2, [r2, r3]
 800cf42:	230f      	movs	r3, #15
 800cf44:	18fb      	adds	r3, r7, r3
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	0019      	movs	r1, r3
 800cf4a:	0010      	movs	r0, r2
 800cf4c:	f7fe fde5 	bl	800bb1a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	23bc      	movs	r3, #188	@ 0xbc
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	58d3      	ldr	r3, [r2, r3]
 800cf58:	0018      	movs	r0, r3
 800cf5a:	f7fe fd96 	bl	800ba8a <USBD_LL_Reset>
}
 800cf5e:	46c0      	nop			@ (mov r8, r8)
 800cf60:	46bd      	mov	sp, r7
 800cf62:	b004      	add	sp, #16
 800cf64:	bd80      	pop	{r7, pc}
	...

0800cf68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	23bc      	movs	r3, #188	@ 0xbc
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	58d3      	ldr	r3, [r2, r3]
 800cf78:	0018      	movs	r0, r3
 800cf7a:	f7fe fddf 	bl	800bb3c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	699b      	ldr	r3, [r3, #24]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d005      	beq.n	800cf92 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf86:	4b05      	ldr	r3, [pc, #20]	@ (800cf9c <HAL_PCD_SuspendCallback+0x34>)
 800cf88:	691a      	ldr	r2, [r3, #16]
 800cf8a:	4b04      	ldr	r3, [pc, #16]	@ (800cf9c <HAL_PCD_SuspendCallback+0x34>)
 800cf8c:	2106      	movs	r1, #6
 800cf8e:	430a      	orrs	r2, r1
 800cf90:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800cf92:	46c0      	nop			@ (mov r8, r8)
 800cf94:	46bd      	mov	sp, r7
 800cf96:	b002      	add	sp, #8
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	46c0      	nop			@ (mov r8, r8)
 800cf9c:	e000ed00 	.word	0xe000ed00

0800cfa0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	699b      	ldr	r3, [r3, #24]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d007      	beq.n	800cfc0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cfb0:	4b09      	ldr	r3, [pc, #36]	@ (800cfd8 <HAL_PCD_ResumeCallback+0x38>)
 800cfb2:	691a      	ldr	r2, [r3, #16]
 800cfb4:	4b08      	ldr	r3, [pc, #32]	@ (800cfd8 <HAL_PCD_ResumeCallback+0x38>)
 800cfb6:	2106      	movs	r1, #6
 800cfb8:	438a      	bics	r2, r1
 800cfba:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800cfbc:	f000 fa44 	bl	800d448 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	23bc      	movs	r3, #188	@ 0xbc
 800cfc4:	009b      	lsls	r3, r3, #2
 800cfc6:	58d3      	ldr	r3, [r2, r3]
 800cfc8:	0018      	movs	r0, r3
 800cfca:	f7fe fdcf 	bl	800bb6c <USBD_LL_Resume>
}
 800cfce:	46c0      	nop			@ (mov r8, r8)
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	b002      	add	sp, #8
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	46c0      	nop			@ (mov r8, r8)
 800cfd8:	e000ed00 	.word	0xe000ed00

0800cfdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cfe4:	4a2d      	ldr	r2, [pc, #180]	@ (800d09c <USBD_LL_Init+0xc0>)
 800cfe6:	23bc      	movs	r3, #188	@ 0xbc
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	6879      	ldr	r1, [r7, #4]
 800cfec:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	23b0      	movs	r3, #176	@ 0xb0
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	4929      	ldr	r1, [pc, #164]	@ (800d09c <USBD_LL_Init+0xc0>)
 800cff6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800cff8:	4b28      	ldr	r3, [pc, #160]	@ (800d09c <USBD_LL_Init+0xc0>)
 800cffa:	4a29      	ldr	r2, [pc, #164]	@ (800d0a0 <USBD_LL_Init+0xc4>)
 800cffc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cffe:	4b27      	ldr	r3, [pc, #156]	@ (800d09c <USBD_LL_Init+0xc0>)
 800d000:	2208      	movs	r2, #8
 800d002:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d004:	4b25      	ldr	r3, [pc, #148]	@ (800d09c <USBD_LL_Init+0xc0>)
 800d006:	2202      	movs	r2, #2
 800d008:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d00a:	4b24      	ldr	r3, [pc, #144]	@ (800d09c <USBD_LL_Init+0xc0>)
 800d00c:	2202      	movs	r2, #2
 800d00e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d010:	4b22      	ldr	r3, [pc, #136]	@ (800d09c <USBD_LL_Init+0xc0>)
 800d012:	2200      	movs	r2, #0
 800d014:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d016:	4b21      	ldr	r3, [pc, #132]	@ (800d09c <USBD_LL_Init+0xc0>)
 800d018:	2200      	movs	r2, #0
 800d01a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d01c:	4b1f      	ldr	r3, [pc, #124]	@ (800d09c <USBD_LL_Init+0xc0>)
 800d01e:	2200      	movs	r2, #0
 800d020:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d022:	4b1e      	ldr	r3, [pc, #120]	@ (800d09c <USBD_LL_Init+0xc0>)
 800d024:	0018      	movs	r0, r3
 800d026:	f7f8 fd6d 	bl	8005b04 <HAL_PCD_Init>
 800d02a:	1e03      	subs	r3, r0, #0
 800d02c:	d001      	beq.n	800d032 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800d02e:	f7f3 fd37 	bl	8000aa0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	23b0      	movs	r3, #176	@ 0xb0
 800d036:	009b      	lsls	r3, r3, #2
 800d038:	58d0      	ldr	r0, [r2, r3]
 800d03a:	2318      	movs	r3, #24
 800d03c:	2200      	movs	r2, #0
 800d03e:	2100      	movs	r1, #0
 800d040:	f7fa fb2e 	bl	80076a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	23b0      	movs	r3, #176	@ 0xb0
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	58d0      	ldr	r0, [r2, r3]
 800d04c:	2358      	movs	r3, #88	@ 0x58
 800d04e:	2200      	movs	r2, #0
 800d050:	2180      	movs	r1, #128	@ 0x80
 800d052:	f7fa fb25 	bl	80076a0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	23b0      	movs	r3, #176	@ 0xb0
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	58d0      	ldr	r0, [r2, r3]
 800d05e:	23c0      	movs	r3, #192	@ 0xc0
 800d060:	2200      	movs	r2, #0
 800d062:	2181      	movs	r1, #129	@ 0x81
 800d064:	f7fa fb1c 	bl	80076a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	23b0      	movs	r3, #176	@ 0xb0
 800d06c:	009b      	lsls	r3, r3, #2
 800d06e:	58d0      	ldr	r0, [r2, r3]
 800d070:	2388      	movs	r3, #136	@ 0x88
 800d072:	005b      	lsls	r3, r3, #1
 800d074:	2200      	movs	r2, #0
 800d076:	2101      	movs	r1, #1
 800d078:	f7fa fb12 	bl	80076a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	23b0      	movs	r3, #176	@ 0xb0
 800d080:	009b      	lsls	r3, r3, #2
 800d082:	58d0      	ldr	r0, [r2, r3]
 800d084:	2380      	movs	r3, #128	@ 0x80
 800d086:	005b      	lsls	r3, r3, #1
 800d088:	2200      	movs	r2, #0
 800d08a:	2182      	movs	r1, #130	@ 0x82
 800d08c:	f7fa fb08 	bl	80076a0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d090:	2300      	movs	r3, #0
}
 800d092:	0018      	movs	r0, r3
 800d094:	46bd      	mov	sp, r7
 800d096:	b002      	add	sp, #8
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	46c0      	nop			@ (mov r8, r8)
 800d09c:	2000115c 	.word	0x2000115c
 800d0a0:	40005c00 	.word	0x40005c00

0800d0a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ac:	210f      	movs	r1, #15
 800d0ae:	187b      	adds	r3, r7, r1
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0b4:	260e      	movs	r6, #14
 800d0b6:	19bb      	adds	r3, r7, r6
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d0bc:	687a      	ldr	r2, [r7, #4]
 800d0be:	23b0      	movs	r3, #176	@ 0xb0
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	58d3      	ldr	r3, [r2, r3]
 800d0c4:	000d      	movs	r5, r1
 800d0c6:	187c      	adds	r4, r7, r1
 800d0c8:	0018      	movs	r0, r3
 800d0ca:	f7f8 fe1b 	bl	8005d04 <HAL_PCD_Start>
 800d0ce:	0003      	movs	r3, r0
 800d0d0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0d2:	19bc      	adds	r4, r7, r6
 800d0d4:	197b      	adds	r3, r7, r5
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	0018      	movs	r0, r3
 800d0da:	f000 f9bc 	bl	800d456 <USBD_Get_USB_Status>
 800d0de:	0003      	movs	r3, r0
 800d0e0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d0e2:	19bb      	adds	r3, r7, r6
 800d0e4:	781b      	ldrb	r3, [r3, #0]
}
 800d0e6:	0018      	movs	r0, r3
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	b005      	add	sp, #20
 800d0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d0ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d0ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0f0:	b085      	sub	sp, #20
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	6078      	str	r0, [r7, #4]
 800d0f6:	000c      	movs	r4, r1
 800d0f8:	0010      	movs	r0, r2
 800d0fa:	0019      	movs	r1, r3
 800d0fc:	1cfb      	adds	r3, r7, #3
 800d0fe:	1c22      	adds	r2, r4, #0
 800d100:	701a      	strb	r2, [r3, #0]
 800d102:	1cbb      	adds	r3, r7, #2
 800d104:	1c02      	adds	r2, r0, #0
 800d106:	701a      	strb	r2, [r3, #0]
 800d108:	003b      	movs	r3, r7
 800d10a:	1c0a      	adds	r2, r1, #0
 800d10c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d10e:	260f      	movs	r6, #15
 800d110:	19bb      	adds	r3, r7, r6
 800d112:	2200      	movs	r2, #0
 800d114:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d116:	250e      	movs	r5, #14
 800d118:	197b      	adds	r3, r7, r5
 800d11a:	2200      	movs	r2, #0
 800d11c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d11e:	687a      	ldr	r2, [r7, #4]
 800d120:	23b0      	movs	r3, #176	@ 0xb0
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	58d0      	ldr	r0, [r2, r3]
 800d126:	19bc      	adds	r4, r7, r6
 800d128:	1cbb      	adds	r3, r7, #2
 800d12a:	781d      	ldrb	r5, [r3, #0]
 800d12c:	003b      	movs	r3, r7
 800d12e:	881a      	ldrh	r2, [r3, #0]
 800d130:	1cfb      	adds	r3, r7, #3
 800d132:	7819      	ldrb	r1, [r3, #0]
 800d134:	002b      	movs	r3, r5
 800d136:	f7f8 ff7a 	bl	800602e <HAL_PCD_EP_Open>
 800d13a:	0003      	movs	r3, r0
 800d13c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d13e:	250e      	movs	r5, #14
 800d140:	197c      	adds	r4, r7, r5
 800d142:	19bb      	adds	r3, r7, r6
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	0018      	movs	r0, r3
 800d148:	f000 f985 	bl	800d456 <USBD_Get_USB_Status>
 800d14c:	0003      	movs	r3, r0
 800d14e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d150:	197b      	adds	r3, r7, r5
 800d152:	781b      	ldrb	r3, [r3, #0]
}
 800d154:	0018      	movs	r0, r3
 800d156:	46bd      	mov	sp, r7
 800d158:	b005      	add	sp, #20
 800d15a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d15c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d15e:	b085      	sub	sp, #20
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	000a      	movs	r2, r1
 800d166:	1cfb      	adds	r3, r7, #3
 800d168:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d16a:	210f      	movs	r1, #15
 800d16c:	187b      	adds	r3, r7, r1
 800d16e:	2200      	movs	r2, #0
 800d170:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d172:	260e      	movs	r6, #14
 800d174:	19bb      	adds	r3, r7, r6
 800d176:	2200      	movs	r2, #0
 800d178:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d17a:	687a      	ldr	r2, [r7, #4]
 800d17c:	23b0      	movs	r3, #176	@ 0xb0
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	58d2      	ldr	r2, [r2, r3]
 800d182:	000d      	movs	r5, r1
 800d184:	187c      	adds	r4, r7, r1
 800d186:	1cfb      	adds	r3, r7, #3
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	0019      	movs	r1, r3
 800d18c:	0010      	movs	r0, r2
 800d18e:	f7f8 ffbd 	bl	800610c <HAL_PCD_EP_Close>
 800d192:	0003      	movs	r3, r0
 800d194:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d196:	19bc      	adds	r4, r7, r6
 800d198:	197b      	adds	r3, r7, r5
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	0018      	movs	r0, r3
 800d19e:	f000 f95a 	bl	800d456 <USBD_Get_USB_Status>
 800d1a2:	0003      	movs	r3, r0
 800d1a4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d1a6:	19bb      	adds	r3, r7, r6
 800d1a8:	781b      	ldrb	r3, [r3, #0]
}
 800d1aa:	0018      	movs	r0, r3
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	b005      	add	sp, #20
 800d1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d1b2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1b4:	b085      	sub	sp, #20
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
 800d1ba:	000a      	movs	r2, r1
 800d1bc:	1cfb      	adds	r3, r7, #3
 800d1be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1c0:	210f      	movs	r1, #15
 800d1c2:	187b      	adds	r3, r7, r1
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1c8:	260e      	movs	r6, #14
 800d1ca:	19bb      	adds	r3, r7, r6
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	23b0      	movs	r3, #176	@ 0xb0
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	58d2      	ldr	r2, [r2, r3]
 800d1d8:	000d      	movs	r5, r1
 800d1da:	187c      	adds	r4, r7, r1
 800d1dc:	1cfb      	adds	r3, r7, #3
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	0019      	movs	r1, r3
 800d1e2:	0010      	movs	r0, r2
 800d1e4:	f7f9 f86f 	bl	80062c6 <HAL_PCD_EP_SetStall>
 800d1e8:	0003      	movs	r3, r0
 800d1ea:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1ec:	19bc      	adds	r4, r7, r6
 800d1ee:	197b      	adds	r3, r7, r5
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	0018      	movs	r0, r3
 800d1f4:	f000 f92f 	bl	800d456 <USBD_Get_USB_Status>
 800d1f8:	0003      	movs	r3, r0
 800d1fa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d1fc:	19bb      	adds	r3, r7, r6
 800d1fe:	781b      	ldrb	r3, [r3, #0]
}
 800d200:	0018      	movs	r0, r3
 800d202:	46bd      	mov	sp, r7
 800d204:	b005      	add	sp, #20
 800d206:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d208 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	000a      	movs	r2, r1
 800d212:	1cfb      	adds	r3, r7, #3
 800d214:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d216:	210f      	movs	r1, #15
 800d218:	187b      	adds	r3, r7, r1
 800d21a:	2200      	movs	r2, #0
 800d21c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d21e:	260e      	movs	r6, #14
 800d220:	19bb      	adds	r3, r7, r6
 800d222:	2200      	movs	r2, #0
 800d224:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	23b0      	movs	r3, #176	@ 0xb0
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	58d2      	ldr	r2, [r2, r3]
 800d22e:	000d      	movs	r5, r1
 800d230:	187c      	adds	r4, r7, r1
 800d232:	1cfb      	adds	r3, r7, #3
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	0019      	movs	r1, r3
 800d238:	0010      	movs	r0, r2
 800d23a:	f7f9 f8a0 	bl	800637e <HAL_PCD_EP_ClrStall>
 800d23e:	0003      	movs	r3, r0
 800d240:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d242:	19bc      	adds	r4, r7, r6
 800d244:	197b      	adds	r3, r7, r5
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	0018      	movs	r0, r3
 800d24a:	f000 f904 	bl	800d456 <USBD_Get_USB_Status>
 800d24e:	0003      	movs	r3, r0
 800d250:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d252:	19bb      	adds	r3, r7, r6
 800d254:	781b      	ldrb	r3, [r3, #0]
}
 800d256:	0018      	movs	r0, r3
 800d258:	46bd      	mov	sp, r7
 800d25a:	b005      	add	sp, #20
 800d25c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d25e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d25e:	b580      	push	{r7, lr}
 800d260:	b084      	sub	sp, #16
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
 800d266:	000a      	movs	r2, r1
 800d268:	1cfb      	adds	r3, r7, #3
 800d26a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	23b0      	movs	r3, #176	@ 0xb0
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	58d3      	ldr	r3, [r2, r3]
 800d274:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d276:	1cfb      	adds	r3, r7, #3
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	b25b      	sxtb	r3, r3
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	da0d      	bge.n	800d29c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d280:	1cfb      	adds	r3, r7, #3
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	227f      	movs	r2, #127	@ 0x7f
 800d286:	4013      	ands	r3, r2
 800d288:	68f9      	ldr	r1, [r7, #12]
 800d28a:	1c5a      	adds	r2, r3, #1
 800d28c:	0013      	movs	r3, r2
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	189b      	adds	r3, r3, r2
 800d292:	00db      	lsls	r3, r3, #3
 800d294:	18cb      	adds	r3, r1, r3
 800d296:	3302      	adds	r3, #2
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	e00d      	b.n	800d2b8 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d29c:	1cfb      	adds	r3, r7, #3
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	227f      	movs	r2, #127	@ 0x7f
 800d2a2:	401a      	ands	r2, r3
 800d2a4:	68f8      	ldr	r0, [r7, #12]
 800d2a6:	23b5      	movs	r3, #181	@ 0xb5
 800d2a8:	0059      	lsls	r1, r3, #1
 800d2aa:	0013      	movs	r3, r2
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	189b      	adds	r3, r3, r2
 800d2b0:	00db      	lsls	r3, r3, #3
 800d2b2:	18c3      	adds	r3, r0, r3
 800d2b4:	185b      	adds	r3, r3, r1
 800d2b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d2b8:	0018      	movs	r0, r3
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	b004      	add	sp, #16
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2c2:	b085      	sub	sp, #20
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	000a      	movs	r2, r1
 800d2ca:	1cfb      	adds	r3, r7, #3
 800d2cc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2ce:	210f      	movs	r1, #15
 800d2d0:	187b      	adds	r3, r7, r1
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2d6:	260e      	movs	r6, #14
 800d2d8:	19bb      	adds	r3, r7, r6
 800d2da:	2200      	movs	r2, #0
 800d2dc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	23b0      	movs	r3, #176	@ 0xb0
 800d2e2:	009b      	lsls	r3, r3, #2
 800d2e4:	58d2      	ldr	r2, [r2, r3]
 800d2e6:	000d      	movs	r5, r1
 800d2e8:	187c      	adds	r4, r7, r1
 800d2ea:	1cfb      	adds	r3, r7, #3
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	0019      	movs	r1, r3
 800d2f0:	0010      	movs	r0, r2
 800d2f2:	f7f8 fe71 	bl	8005fd8 <HAL_PCD_SetAddress>
 800d2f6:	0003      	movs	r3, r0
 800d2f8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2fa:	19bc      	adds	r4, r7, r6
 800d2fc:	197b      	adds	r3, r7, r5
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	0018      	movs	r0, r3
 800d302:	f000 f8a8 	bl	800d456 <USBD_Get_USB_Status>
 800d306:	0003      	movs	r3, r0
 800d308:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d30a:	19bb      	adds	r3, r7, r6
 800d30c:	781b      	ldrb	r3, [r3, #0]
}
 800d30e:	0018      	movs	r0, r3
 800d310:	46bd      	mov	sp, r7
 800d312:	b005      	add	sp, #20
 800d314:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d316 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d316:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d318:	b087      	sub	sp, #28
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	60f8      	str	r0, [r7, #12]
 800d31e:	0008      	movs	r0, r1
 800d320:	607a      	str	r2, [r7, #4]
 800d322:	0019      	movs	r1, r3
 800d324:	230b      	movs	r3, #11
 800d326:	18fb      	adds	r3, r7, r3
 800d328:	1c02      	adds	r2, r0, #0
 800d32a:	701a      	strb	r2, [r3, #0]
 800d32c:	2408      	movs	r4, #8
 800d32e:	193b      	adds	r3, r7, r4
 800d330:	1c0a      	adds	r2, r1, #0
 800d332:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d334:	2117      	movs	r1, #23
 800d336:	187b      	adds	r3, r7, r1
 800d338:	2200      	movs	r2, #0
 800d33a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d33c:	2516      	movs	r5, #22
 800d33e:	197b      	adds	r3, r7, r5
 800d340:	2200      	movs	r2, #0
 800d342:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	23b0      	movs	r3, #176	@ 0xb0
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	58d0      	ldr	r0, [r2, r3]
 800d34c:	193b      	adds	r3, r7, r4
 800d34e:	881d      	ldrh	r5, [r3, #0]
 800d350:	000e      	movs	r6, r1
 800d352:	187c      	adds	r4, r7, r1
 800d354:	687a      	ldr	r2, [r7, #4]
 800d356:	230b      	movs	r3, #11
 800d358:	18fb      	adds	r3, r7, r3
 800d35a:	7819      	ldrb	r1, [r3, #0]
 800d35c:	002b      	movs	r3, r5
 800d35e:	f7f8 ff76 	bl	800624e <HAL_PCD_EP_Transmit>
 800d362:	0003      	movs	r3, r0
 800d364:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d366:	2516      	movs	r5, #22
 800d368:	197c      	adds	r4, r7, r5
 800d36a:	19bb      	adds	r3, r7, r6
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	0018      	movs	r0, r3
 800d370:	f000 f871 	bl	800d456 <USBD_Get_USB_Status>
 800d374:	0003      	movs	r3, r0
 800d376:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d378:	197b      	adds	r3, r7, r5
 800d37a:	781b      	ldrb	r3, [r3, #0]
}
 800d37c:	0018      	movs	r0, r3
 800d37e:	46bd      	mov	sp, r7
 800d380:	b007      	add	sp, #28
 800d382:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d384 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d384:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d386:	b087      	sub	sp, #28
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	0008      	movs	r0, r1
 800d38e:	607a      	str	r2, [r7, #4]
 800d390:	0019      	movs	r1, r3
 800d392:	230b      	movs	r3, #11
 800d394:	18fb      	adds	r3, r7, r3
 800d396:	1c02      	adds	r2, r0, #0
 800d398:	701a      	strb	r2, [r3, #0]
 800d39a:	2408      	movs	r4, #8
 800d39c:	193b      	adds	r3, r7, r4
 800d39e:	1c0a      	adds	r2, r1, #0
 800d3a0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3a2:	2117      	movs	r1, #23
 800d3a4:	187b      	adds	r3, r7, r1
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3aa:	2516      	movs	r5, #22
 800d3ac:	197b      	adds	r3, r7, r5
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d3b2:	68fa      	ldr	r2, [r7, #12]
 800d3b4:	23b0      	movs	r3, #176	@ 0xb0
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	58d0      	ldr	r0, [r2, r3]
 800d3ba:	193b      	adds	r3, r7, r4
 800d3bc:	881d      	ldrh	r5, [r3, #0]
 800d3be:	000e      	movs	r6, r1
 800d3c0:	187c      	adds	r4, r7, r1
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	230b      	movs	r3, #11
 800d3c6:	18fb      	adds	r3, r7, r3
 800d3c8:	7819      	ldrb	r1, [r3, #0]
 800d3ca:	002b      	movs	r3, r5
 800d3cc:	f7f8 feef 	bl	80061ae <HAL_PCD_EP_Receive>
 800d3d0:	0003      	movs	r3, r0
 800d3d2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3d4:	2516      	movs	r5, #22
 800d3d6:	197c      	adds	r4, r7, r5
 800d3d8:	19bb      	adds	r3, r7, r6
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	0018      	movs	r0, r3
 800d3de:	f000 f83a 	bl	800d456 <USBD_Get_USB_Status>
 800d3e2:	0003      	movs	r3, r0
 800d3e4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d3e6:	197b      	adds	r3, r7, r5
 800d3e8:	781b      	ldrb	r3, [r3, #0]
}
 800d3ea:	0018      	movs	r0, r3
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	b007      	add	sp, #28
 800d3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d3f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b082      	sub	sp, #8
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
 800d3fa:	000a      	movs	r2, r1
 800d3fc:	1cfb      	adds	r3, r7, #3
 800d3fe:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	23b0      	movs	r3, #176	@ 0xb0
 800d404:	009b      	lsls	r3, r3, #2
 800d406:	58d2      	ldr	r2, [r2, r3]
 800d408:	1cfb      	adds	r3, r7, #3
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	0019      	movs	r1, r3
 800d40e:	0010      	movs	r0, r2
 800d410:	f7f8 ff04 	bl	800621c <HAL_PCD_EP_GetRxCount>
 800d414:	0003      	movs	r3, r0
}
 800d416:	0018      	movs	r0, r3
 800d418:	46bd      	mov	sp, r7
 800d41a:	b002      	add	sp, #8
 800d41c:	bd80      	pop	{r7, pc}
	...

0800d420 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d428:	4b02      	ldr	r3, [pc, #8]	@ (800d434 <USBD_static_malloc+0x14>)
}
 800d42a:	0018      	movs	r0, r3
 800d42c:	46bd      	mov	sp, r7
 800d42e:	b002      	add	sp, #8
 800d430:	bd80      	pop	{r7, pc}
 800d432:	46c0      	nop			@ (mov r8, r8)
 800d434:	20001450 	.word	0x20001450

0800d438 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]

}
 800d440:	46c0      	nop			@ (mov r8, r8)
 800d442:	46bd      	mov	sp, r7
 800d444:	b002      	add	sp, #8
 800d446:	bd80      	pop	{r7, pc}

0800d448 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d44c:	f7f3 f9c0 	bl	80007d0 <SystemClock_Config>
}
 800d450:	46c0      	nop			@ (mov r8, r8)
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b084      	sub	sp, #16
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	0002      	movs	r2, r0
 800d45e:	1dfb      	adds	r3, r7, #7
 800d460:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d462:	230f      	movs	r3, #15
 800d464:	18fb      	adds	r3, r7, r3
 800d466:	2200      	movs	r2, #0
 800d468:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800d46a:	1dfb      	adds	r3, r7, #7
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	2b03      	cmp	r3, #3
 800d470:	d017      	beq.n	800d4a2 <USBD_Get_USB_Status+0x4c>
 800d472:	dc1b      	bgt.n	800d4ac <USBD_Get_USB_Status+0x56>
 800d474:	2b02      	cmp	r3, #2
 800d476:	d00f      	beq.n	800d498 <USBD_Get_USB_Status+0x42>
 800d478:	dc18      	bgt.n	800d4ac <USBD_Get_USB_Status+0x56>
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d002      	beq.n	800d484 <USBD_Get_USB_Status+0x2e>
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d005      	beq.n	800d48e <USBD_Get_USB_Status+0x38>
 800d482:	e013      	b.n	800d4ac <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d484:	230f      	movs	r3, #15
 800d486:	18fb      	adds	r3, r7, r3
 800d488:	2200      	movs	r2, #0
 800d48a:	701a      	strb	r2, [r3, #0]
    break;
 800d48c:	e013      	b.n	800d4b6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d48e:	230f      	movs	r3, #15
 800d490:	18fb      	adds	r3, r7, r3
 800d492:	2202      	movs	r2, #2
 800d494:	701a      	strb	r2, [r3, #0]
    break;
 800d496:	e00e      	b.n	800d4b6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d498:	230f      	movs	r3, #15
 800d49a:	18fb      	adds	r3, r7, r3
 800d49c:	2201      	movs	r2, #1
 800d49e:	701a      	strb	r2, [r3, #0]
    break;
 800d4a0:	e009      	b.n	800d4b6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4a2:	230f      	movs	r3, #15
 800d4a4:	18fb      	adds	r3, r7, r3
 800d4a6:	2202      	movs	r2, #2
 800d4a8:	701a      	strb	r2, [r3, #0]
    break;
 800d4aa:	e004      	b.n	800d4b6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800d4ac:	230f      	movs	r3, #15
 800d4ae:	18fb      	adds	r3, r7, r3
 800d4b0:	2202      	movs	r2, #2
 800d4b2:	701a      	strb	r2, [r3, #0]
    break;
 800d4b4:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800d4b6:	230f      	movs	r3, #15
 800d4b8:	18fb      	adds	r3, r7, r3
 800d4ba:	781b      	ldrb	r3, [r3, #0]
}
 800d4bc:	0018      	movs	r0, r3
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	b004      	add	sp, #16
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <_strtol_l.constprop.0>:
 800d4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	0017      	movs	r7, r2
 800d4ca:	001e      	movs	r6, r3
 800d4cc:	9003      	str	r0, [sp, #12]
 800d4ce:	9101      	str	r1, [sp, #4]
 800d4d0:	2b24      	cmp	r3, #36	@ 0x24
 800d4d2:	d844      	bhi.n	800d55e <_strtol_l.constprop.0+0x9a>
 800d4d4:	000c      	movs	r4, r1
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d041      	beq.n	800d55e <_strtol_l.constprop.0+0x9a>
 800d4da:	4b3d      	ldr	r3, [pc, #244]	@ (800d5d0 <_strtol_l.constprop.0+0x10c>)
 800d4dc:	2208      	movs	r2, #8
 800d4de:	469c      	mov	ip, r3
 800d4e0:	0023      	movs	r3, r4
 800d4e2:	4661      	mov	r1, ip
 800d4e4:	781d      	ldrb	r5, [r3, #0]
 800d4e6:	3401      	adds	r4, #1
 800d4e8:	5d48      	ldrb	r0, [r1, r5]
 800d4ea:	0001      	movs	r1, r0
 800d4ec:	4011      	ands	r1, r2
 800d4ee:	4210      	tst	r0, r2
 800d4f0:	d1f6      	bne.n	800d4e0 <_strtol_l.constprop.0+0x1c>
 800d4f2:	2d2d      	cmp	r5, #45	@ 0x2d
 800d4f4:	d13a      	bne.n	800d56c <_strtol_l.constprop.0+0xa8>
 800d4f6:	7825      	ldrb	r5, [r4, #0]
 800d4f8:	1c9c      	adds	r4, r3, #2
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	9300      	str	r3, [sp, #0]
 800d4fe:	2210      	movs	r2, #16
 800d500:	0033      	movs	r3, r6
 800d502:	4393      	bics	r3, r2
 800d504:	d109      	bne.n	800d51a <_strtol_l.constprop.0+0x56>
 800d506:	2d30      	cmp	r5, #48	@ 0x30
 800d508:	d136      	bne.n	800d578 <_strtol_l.constprop.0+0xb4>
 800d50a:	2120      	movs	r1, #32
 800d50c:	7823      	ldrb	r3, [r4, #0]
 800d50e:	438b      	bics	r3, r1
 800d510:	2b58      	cmp	r3, #88	@ 0x58
 800d512:	d131      	bne.n	800d578 <_strtol_l.constprop.0+0xb4>
 800d514:	0016      	movs	r6, r2
 800d516:	7865      	ldrb	r5, [r4, #1]
 800d518:	3402      	adds	r4, #2
 800d51a:	4a2e      	ldr	r2, [pc, #184]	@ (800d5d4 <_strtol_l.constprop.0+0x110>)
 800d51c:	9b00      	ldr	r3, [sp, #0]
 800d51e:	4694      	mov	ip, r2
 800d520:	4463      	add	r3, ip
 800d522:	0031      	movs	r1, r6
 800d524:	0018      	movs	r0, r3
 800d526:	9302      	str	r3, [sp, #8]
 800d528:	f7f2 fe86 	bl	8000238 <__aeabi_uidivmod>
 800d52c:	2200      	movs	r2, #0
 800d52e:	4684      	mov	ip, r0
 800d530:	0010      	movs	r0, r2
 800d532:	002b      	movs	r3, r5
 800d534:	3b30      	subs	r3, #48	@ 0x30
 800d536:	2b09      	cmp	r3, #9
 800d538:	d825      	bhi.n	800d586 <_strtol_l.constprop.0+0xc2>
 800d53a:	001d      	movs	r5, r3
 800d53c:	42ae      	cmp	r6, r5
 800d53e:	dd31      	ble.n	800d5a4 <_strtol_l.constprop.0+0xe0>
 800d540:	1c53      	adds	r3, r2, #1
 800d542:	d009      	beq.n	800d558 <_strtol_l.constprop.0+0x94>
 800d544:	2201      	movs	r2, #1
 800d546:	4252      	negs	r2, r2
 800d548:	4584      	cmp	ip, r0
 800d54a:	d305      	bcc.n	800d558 <_strtol_l.constprop.0+0x94>
 800d54c:	d101      	bne.n	800d552 <_strtol_l.constprop.0+0x8e>
 800d54e:	42a9      	cmp	r1, r5
 800d550:	db25      	blt.n	800d59e <_strtol_l.constprop.0+0xda>
 800d552:	2201      	movs	r2, #1
 800d554:	4370      	muls	r0, r6
 800d556:	1828      	adds	r0, r5, r0
 800d558:	7825      	ldrb	r5, [r4, #0]
 800d55a:	3401      	adds	r4, #1
 800d55c:	e7e9      	b.n	800d532 <_strtol_l.constprop.0+0x6e>
 800d55e:	f000 f975 	bl	800d84c <__errno>
 800d562:	2316      	movs	r3, #22
 800d564:	6003      	str	r3, [r0, #0]
 800d566:	2000      	movs	r0, #0
 800d568:	b005      	add	sp, #20
 800d56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d56c:	9100      	str	r1, [sp, #0]
 800d56e:	2d2b      	cmp	r5, #43	@ 0x2b
 800d570:	d1c5      	bne.n	800d4fe <_strtol_l.constprop.0+0x3a>
 800d572:	7825      	ldrb	r5, [r4, #0]
 800d574:	1c9c      	adds	r4, r3, #2
 800d576:	e7c2      	b.n	800d4fe <_strtol_l.constprop.0+0x3a>
 800d578:	2e00      	cmp	r6, #0
 800d57a:	d1ce      	bne.n	800d51a <_strtol_l.constprop.0+0x56>
 800d57c:	3608      	adds	r6, #8
 800d57e:	2d30      	cmp	r5, #48	@ 0x30
 800d580:	d0cb      	beq.n	800d51a <_strtol_l.constprop.0+0x56>
 800d582:	3602      	adds	r6, #2
 800d584:	e7c9      	b.n	800d51a <_strtol_l.constprop.0+0x56>
 800d586:	002b      	movs	r3, r5
 800d588:	3b41      	subs	r3, #65	@ 0x41
 800d58a:	2b19      	cmp	r3, #25
 800d58c:	d801      	bhi.n	800d592 <_strtol_l.constprop.0+0xce>
 800d58e:	3d37      	subs	r5, #55	@ 0x37
 800d590:	e7d4      	b.n	800d53c <_strtol_l.constprop.0+0x78>
 800d592:	002b      	movs	r3, r5
 800d594:	3b61      	subs	r3, #97	@ 0x61
 800d596:	2b19      	cmp	r3, #25
 800d598:	d804      	bhi.n	800d5a4 <_strtol_l.constprop.0+0xe0>
 800d59a:	3d57      	subs	r5, #87	@ 0x57
 800d59c:	e7ce      	b.n	800d53c <_strtol_l.constprop.0+0x78>
 800d59e:	2201      	movs	r2, #1
 800d5a0:	4252      	negs	r2, r2
 800d5a2:	e7d9      	b.n	800d558 <_strtol_l.constprop.0+0x94>
 800d5a4:	1c53      	adds	r3, r2, #1
 800d5a6:	d108      	bne.n	800d5ba <_strtol_l.constprop.0+0xf6>
 800d5a8:	2322      	movs	r3, #34	@ 0x22
 800d5aa:	9a03      	ldr	r2, [sp, #12]
 800d5ac:	9802      	ldr	r0, [sp, #8]
 800d5ae:	6013      	str	r3, [r2, #0]
 800d5b0:	2f00      	cmp	r7, #0
 800d5b2:	d0d9      	beq.n	800d568 <_strtol_l.constprop.0+0xa4>
 800d5b4:	1e63      	subs	r3, r4, #1
 800d5b6:	9301      	str	r3, [sp, #4]
 800d5b8:	e007      	b.n	800d5ca <_strtol_l.constprop.0+0x106>
 800d5ba:	9b00      	ldr	r3, [sp, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d000      	beq.n	800d5c2 <_strtol_l.constprop.0+0xfe>
 800d5c0:	4240      	negs	r0, r0
 800d5c2:	2f00      	cmp	r7, #0
 800d5c4:	d0d0      	beq.n	800d568 <_strtol_l.constprop.0+0xa4>
 800d5c6:	2a00      	cmp	r2, #0
 800d5c8:	d1f4      	bne.n	800d5b4 <_strtol_l.constprop.0+0xf0>
 800d5ca:	9b01      	ldr	r3, [sp, #4]
 800d5cc:	603b      	str	r3, [r7, #0]
 800d5ce:	e7cb      	b.n	800d568 <_strtol_l.constprop.0+0xa4>
 800d5d0:	0800ed19 	.word	0x0800ed19
 800d5d4:	7fffffff 	.word	0x7fffffff

0800d5d8 <strtol>:
 800d5d8:	b510      	push	{r4, lr}
 800d5da:	4c04      	ldr	r4, [pc, #16]	@ (800d5ec <strtol+0x14>)
 800d5dc:	0013      	movs	r3, r2
 800d5de:	000a      	movs	r2, r1
 800d5e0:	0001      	movs	r1, r0
 800d5e2:	6820      	ldr	r0, [r4, #0]
 800d5e4:	f7ff ff6e 	bl	800d4c4 <_strtol_l.constprop.0>
 800d5e8:	bd10      	pop	{r4, pc}
 800d5ea:	46c0      	nop			@ (mov r8, r8)
 800d5ec:	200001c0 	.word	0x200001c0

0800d5f0 <_strtoul_l.constprop.0>:
 800d5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5f2:	001e      	movs	r6, r3
 800d5f4:	4b3e      	ldr	r3, [pc, #248]	@ (800d6f0 <_strtoul_l.constprop.0+0x100>)
 800d5f6:	0017      	movs	r7, r2
 800d5f8:	000c      	movs	r4, r1
 800d5fa:	469c      	mov	ip, r3
 800d5fc:	2208      	movs	r2, #8
 800d5fe:	b085      	sub	sp, #20
 800d600:	9003      	str	r0, [sp, #12]
 800d602:	9100      	str	r1, [sp, #0]
 800d604:	0023      	movs	r3, r4
 800d606:	4661      	mov	r1, ip
 800d608:	781d      	ldrb	r5, [r3, #0]
 800d60a:	3401      	adds	r4, #1
 800d60c:	5d48      	ldrb	r0, [r1, r5]
 800d60e:	0001      	movs	r1, r0
 800d610:	4011      	ands	r1, r2
 800d612:	4210      	tst	r0, r2
 800d614:	d1f6      	bne.n	800d604 <_strtoul_l.constprop.0+0x14>
 800d616:	2d2d      	cmp	r5, #45	@ 0x2d
 800d618:	d137      	bne.n	800d68a <_strtoul_l.constprop.0+0x9a>
 800d61a:	7825      	ldrb	r5, [r4, #0]
 800d61c:	1c9c      	adds	r4, r3, #2
 800d61e:	2301      	movs	r3, #1
 800d620:	9302      	str	r3, [sp, #8]
 800d622:	2210      	movs	r2, #16
 800d624:	0033      	movs	r3, r6
 800d626:	4393      	bics	r3, r2
 800d628:	d109      	bne.n	800d63e <_strtoul_l.constprop.0+0x4e>
 800d62a:	2d30      	cmp	r5, #48	@ 0x30
 800d62c:	d133      	bne.n	800d696 <_strtoul_l.constprop.0+0xa6>
 800d62e:	2120      	movs	r1, #32
 800d630:	7823      	ldrb	r3, [r4, #0]
 800d632:	438b      	bics	r3, r1
 800d634:	2b58      	cmp	r3, #88	@ 0x58
 800d636:	d12e      	bne.n	800d696 <_strtoul_l.constprop.0+0xa6>
 800d638:	0016      	movs	r6, r2
 800d63a:	7865      	ldrb	r5, [r4, #1]
 800d63c:	3402      	adds	r4, #2
 800d63e:	2001      	movs	r0, #1
 800d640:	0031      	movs	r1, r6
 800d642:	4240      	negs	r0, r0
 800d644:	f7f2 fd72 	bl	800012c <__udivsi3>
 800d648:	9001      	str	r0, [sp, #4]
 800d64a:	2001      	movs	r0, #1
 800d64c:	0031      	movs	r1, r6
 800d64e:	4240      	negs	r0, r0
 800d650:	f7f2 fdf2 	bl	8000238 <__aeabi_uidivmod>
 800d654:	2300      	movs	r3, #0
 800d656:	2201      	movs	r2, #1
 800d658:	0018      	movs	r0, r3
 800d65a:	4694      	mov	ip, r2
 800d65c:	002a      	movs	r2, r5
 800d65e:	3a30      	subs	r2, #48	@ 0x30
 800d660:	2a09      	cmp	r2, #9
 800d662:	d81f      	bhi.n	800d6a4 <_strtoul_l.constprop.0+0xb4>
 800d664:	0015      	movs	r5, r2
 800d666:	42ae      	cmp	r6, r5
 800d668:	dd2b      	ble.n	800d6c2 <_strtoul_l.constprop.0+0xd2>
 800d66a:	1c5a      	adds	r2, r3, #1
 800d66c:	d00a      	beq.n	800d684 <_strtoul_l.constprop.0+0x94>
 800d66e:	2301      	movs	r3, #1
 800d670:	9a01      	ldr	r2, [sp, #4]
 800d672:	425b      	negs	r3, r3
 800d674:	4282      	cmp	r2, r0
 800d676:	d305      	bcc.n	800d684 <_strtoul_l.constprop.0+0x94>
 800d678:	d101      	bne.n	800d67e <_strtoul_l.constprop.0+0x8e>
 800d67a:	42a9      	cmp	r1, r5
 800d67c:	db1e      	blt.n	800d6bc <_strtoul_l.constprop.0+0xcc>
 800d67e:	4663      	mov	r3, ip
 800d680:	4370      	muls	r0, r6
 800d682:	1828      	adds	r0, r5, r0
 800d684:	7825      	ldrb	r5, [r4, #0]
 800d686:	3401      	adds	r4, #1
 800d688:	e7e8      	b.n	800d65c <_strtoul_l.constprop.0+0x6c>
 800d68a:	9102      	str	r1, [sp, #8]
 800d68c:	2d2b      	cmp	r5, #43	@ 0x2b
 800d68e:	d1c8      	bne.n	800d622 <_strtoul_l.constprop.0+0x32>
 800d690:	7825      	ldrb	r5, [r4, #0]
 800d692:	1c9c      	adds	r4, r3, #2
 800d694:	e7c5      	b.n	800d622 <_strtoul_l.constprop.0+0x32>
 800d696:	2e00      	cmp	r6, #0
 800d698:	d1d1      	bne.n	800d63e <_strtoul_l.constprop.0+0x4e>
 800d69a:	3608      	adds	r6, #8
 800d69c:	2d30      	cmp	r5, #48	@ 0x30
 800d69e:	d0ce      	beq.n	800d63e <_strtoul_l.constprop.0+0x4e>
 800d6a0:	3602      	adds	r6, #2
 800d6a2:	e7cc      	b.n	800d63e <_strtoul_l.constprop.0+0x4e>
 800d6a4:	002a      	movs	r2, r5
 800d6a6:	3a41      	subs	r2, #65	@ 0x41
 800d6a8:	2a19      	cmp	r2, #25
 800d6aa:	d801      	bhi.n	800d6b0 <_strtoul_l.constprop.0+0xc0>
 800d6ac:	3d37      	subs	r5, #55	@ 0x37
 800d6ae:	e7da      	b.n	800d666 <_strtoul_l.constprop.0+0x76>
 800d6b0:	002a      	movs	r2, r5
 800d6b2:	3a61      	subs	r2, #97	@ 0x61
 800d6b4:	2a19      	cmp	r2, #25
 800d6b6:	d804      	bhi.n	800d6c2 <_strtoul_l.constprop.0+0xd2>
 800d6b8:	3d57      	subs	r5, #87	@ 0x57
 800d6ba:	e7d4      	b.n	800d666 <_strtoul_l.constprop.0+0x76>
 800d6bc:	2301      	movs	r3, #1
 800d6be:	425b      	negs	r3, r3
 800d6c0:	e7e0      	b.n	800d684 <_strtoul_l.constprop.0+0x94>
 800d6c2:	1c5a      	adds	r2, r3, #1
 800d6c4:	d107      	bne.n	800d6d6 <_strtoul_l.constprop.0+0xe6>
 800d6c6:	2222      	movs	r2, #34	@ 0x22
 800d6c8:	9903      	ldr	r1, [sp, #12]
 800d6ca:	0018      	movs	r0, r3
 800d6cc:	600a      	str	r2, [r1, #0]
 800d6ce:	2f00      	cmp	r7, #0
 800d6d0:	d109      	bne.n	800d6e6 <_strtoul_l.constprop.0+0xf6>
 800d6d2:	b005      	add	sp, #20
 800d6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6d6:	9a02      	ldr	r2, [sp, #8]
 800d6d8:	2a00      	cmp	r2, #0
 800d6da:	d000      	beq.n	800d6de <_strtoul_l.constprop.0+0xee>
 800d6dc:	4240      	negs	r0, r0
 800d6de:	2f00      	cmp	r7, #0
 800d6e0:	d0f7      	beq.n	800d6d2 <_strtoul_l.constprop.0+0xe2>
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d001      	beq.n	800d6ea <_strtoul_l.constprop.0+0xfa>
 800d6e6:	1e63      	subs	r3, r4, #1
 800d6e8:	9300      	str	r3, [sp, #0]
 800d6ea:	9b00      	ldr	r3, [sp, #0]
 800d6ec:	603b      	str	r3, [r7, #0]
 800d6ee:	e7f0      	b.n	800d6d2 <_strtoul_l.constprop.0+0xe2>
 800d6f0:	0800ed19 	.word	0x0800ed19

0800d6f4 <strtoul>:
 800d6f4:	b510      	push	{r4, lr}
 800d6f6:	4c04      	ldr	r4, [pc, #16]	@ (800d708 <strtoul+0x14>)
 800d6f8:	0013      	movs	r3, r2
 800d6fa:	000a      	movs	r2, r1
 800d6fc:	0001      	movs	r1, r0
 800d6fe:	6820      	ldr	r0, [r4, #0]
 800d700:	f7ff ff76 	bl	800d5f0 <_strtoul_l.constprop.0>
 800d704:	bd10      	pop	{r4, pc}
 800d706:	46c0      	nop			@ (mov r8, r8)
 800d708:	200001c0 	.word	0x200001c0

0800d70c <sniprintf>:
 800d70c:	b40c      	push	{r2, r3}
 800d70e:	b530      	push	{r4, r5, lr}
 800d710:	4b17      	ldr	r3, [pc, #92]	@ (800d770 <sniprintf+0x64>)
 800d712:	000c      	movs	r4, r1
 800d714:	681d      	ldr	r5, [r3, #0]
 800d716:	b09d      	sub	sp, #116	@ 0x74
 800d718:	2900      	cmp	r1, #0
 800d71a:	da08      	bge.n	800d72e <sniprintf+0x22>
 800d71c:	238b      	movs	r3, #139	@ 0x8b
 800d71e:	2001      	movs	r0, #1
 800d720:	602b      	str	r3, [r5, #0]
 800d722:	4240      	negs	r0, r0
 800d724:	b01d      	add	sp, #116	@ 0x74
 800d726:	bc30      	pop	{r4, r5}
 800d728:	bc08      	pop	{r3}
 800d72a:	b002      	add	sp, #8
 800d72c:	4718      	bx	r3
 800d72e:	2382      	movs	r3, #130	@ 0x82
 800d730:	466a      	mov	r2, sp
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	8293      	strh	r3, [r2, #20]
 800d736:	2300      	movs	r3, #0
 800d738:	9002      	str	r0, [sp, #8]
 800d73a:	9006      	str	r0, [sp, #24]
 800d73c:	4299      	cmp	r1, r3
 800d73e:	d000      	beq.n	800d742 <sniprintf+0x36>
 800d740:	1e4b      	subs	r3, r1, #1
 800d742:	9304      	str	r3, [sp, #16]
 800d744:	9307      	str	r3, [sp, #28]
 800d746:	2301      	movs	r3, #1
 800d748:	466a      	mov	r2, sp
 800d74a:	425b      	negs	r3, r3
 800d74c:	82d3      	strh	r3, [r2, #22]
 800d74e:	0028      	movs	r0, r5
 800d750:	ab21      	add	r3, sp, #132	@ 0x84
 800d752:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d754:	a902      	add	r1, sp, #8
 800d756:	9301      	str	r3, [sp, #4]
 800d758:	f000 fa14 	bl	800db84 <_svfiprintf_r>
 800d75c:	1c43      	adds	r3, r0, #1
 800d75e:	da01      	bge.n	800d764 <sniprintf+0x58>
 800d760:	238b      	movs	r3, #139	@ 0x8b
 800d762:	602b      	str	r3, [r5, #0]
 800d764:	2c00      	cmp	r4, #0
 800d766:	d0dd      	beq.n	800d724 <sniprintf+0x18>
 800d768:	2200      	movs	r2, #0
 800d76a:	9b02      	ldr	r3, [sp, #8]
 800d76c:	701a      	strb	r2, [r3, #0]
 800d76e:	e7d9      	b.n	800d724 <sniprintf+0x18>
 800d770:	200001c0 	.word	0x200001c0

0800d774 <siprintf>:
 800d774:	b40e      	push	{r1, r2, r3}
 800d776:	b500      	push	{lr}
 800d778:	490b      	ldr	r1, [pc, #44]	@ (800d7a8 <siprintf+0x34>)
 800d77a:	b09c      	sub	sp, #112	@ 0x70
 800d77c:	ab1d      	add	r3, sp, #116	@ 0x74
 800d77e:	9002      	str	r0, [sp, #8]
 800d780:	9006      	str	r0, [sp, #24]
 800d782:	9107      	str	r1, [sp, #28]
 800d784:	9104      	str	r1, [sp, #16]
 800d786:	4809      	ldr	r0, [pc, #36]	@ (800d7ac <siprintf+0x38>)
 800d788:	4909      	ldr	r1, [pc, #36]	@ (800d7b0 <siprintf+0x3c>)
 800d78a:	cb04      	ldmia	r3!, {r2}
 800d78c:	9105      	str	r1, [sp, #20]
 800d78e:	6800      	ldr	r0, [r0, #0]
 800d790:	a902      	add	r1, sp, #8
 800d792:	9301      	str	r3, [sp, #4]
 800d794:	f000 f9f6 	bl	800db84 <_svfiprintf_r>
 800d798:	2200      	movs	r2, #0
 800d79a:	9b02      	ldr	r3, [sp, #8]
 800d79c:	701a      	strb	r2, [r3, #0]
 800d79e:	b01c      	add	sp, #112	@ 0x70
 800d7a0:	bc08      	pop	{r3}
 800d7a2:	b003      	add	sp, #12
 800d7a4:	4718      	bx	r3
 800d7a6:	46c0      	nop			@ (mov r8, r8)
 800d7a8:	7fffffff 	.word	0x7fffffff
 800d7ac:	200001c0 	.word	0x200001c0
 800d7b0:	ffff0208 	.word	0xffff0208

0800d7b4 <memmove>:
 800d7b4:	b510      	push	{r4, lr}
 800d7b6:	4288      	cmp	r0, r1
 800d7b8:	d806      	bhi.n	800d7c8 <memmove+0x14>
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d008      	beq.n	800d7d2 <memmove+0x1e>
 800d7c0:	5ccc      	ldrb	r4, [r1, r3]
 800d7c2:	54c4      	strb	r4, [r0, r3]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	e7f9      	b.n	800d7bc <memmove+0x8>
 800d7c8:	188b      	adds	r3, r1, r2
 800d7ca:	4298      	cmp	r0, r3
 800d7cc:	d2f5      	bcs.n	800d7ba <memmove+0x6>
 800d7ce:	3a01      	subs	r2, #1
 800d7d0:	d200      	bcs.n	800d7d4 <memmove+0x20>
 800d7d2:	bd10      	pop	{r4, pc}
 800d7d4:	5c8b      	ldrb	r3, [r1, r2]
 800d7d6:	5483      	strb	r3, [r0, r2]
 800d7d8:	e7f9      	b.n	800d7ce <memmove+0x1a>

0800d7da <memset>:
 800d7da:	0003      	movs	r3, r0
 800d7dc:	1882      	adds	r2, r0, r2
 800d7de:	4293      	cmp	r3, r2
 800d7e0:	d100      	bne.n	800d7e4 <memset+0xa>
 800d7e2:	4770      	bx	lr
 800d7e4:	7019      	strb	r1, [r3, #0]
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	e7f9      	b.n	800d7de <memset+0x4>
	...

0800d7ec <strncasecmp>:
 800d7ec:	2303      	movs	r3, #3
 800d7ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7f0:	469c      	mov	ip, r3
 800d7f2:	0006      	movs	r6, r0
 800d7f4:	2400      	movs	r4, #0
 800d7f6:	4f0e      	ldr	r7, [pc, #56]	@ (800d830 <strncasecmp+0x44>)
 800d7f8:	9201      	str	r2, [sp, #4]
 800d7fa:	9b01      	ldr	r3, [sp, #4]
 800d7fc:	429c      	cmp	r4, r3
 800d7fe:	d101      	bne.n	800d804 <strncasecmp+0x18>
 800d800:	2000      	movs	r0, #0
 800d802:	e013      	b.n	800d82c <strncasecmp+0x40>
 800d804:	4660      	mov	r0, ip
 800d806:	5d35      	ldrb	r5, [r6, r4]
 800d808:	5d7b      	ldrb	r3, [r7, r5]
 800d80a:	4003      	ands	r3, r0
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d100      	bne.n	800d812 <strncasecmp+0x26>
 800d810:	3520      	adds	r5, #32
 800d812:	4662      	mov	r2, ip
 800d814:	5d0b      	ldrb	r3, [r1, r4]
 800d816:	5cf8      	ldrb	r0, [r7, r3]
 800d818:	4010      	ands	r0, r2
 800d81a:	2801      	cmp	r0, #1
 800d81c:	d100      	bne.n	800d820 <strncasecmp+0x34>
 800d81e:	3320      	adds	r3, #32
 800d820:	1ae8      	subs	r0, r5, r3
 800d822:	429d      	cmp	r5, r3
 800d824:	d102      	bne.n	800d82c <strncasecmp+0x40>
 800d826:	3401      	adds	r4, #1
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d1e6      	bne.n	800d7fa <strncasecmp+0xe>
 800d82c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d82e:	46c0      	nop			@ (mov r8, r8)
 800d830:	0800ed19 	.word	0x0800ed19

0800d834 <strnlen>:
 800d834:	0003      	movs	r3, r0
 800d836:	1841      	adds	r1, r0, r1
 800d838:	428b      	cmp	r3, r1
 800d83a:	d002      	beq.n	800d842 <strnlen+0xe>
 800d83c:	781a      	ldrb	r2, [r3, #0]
 800d83e:	2a00      	cmp	r2, #0
 800d840:	d101      	bne.n	800d846 <strnlen+0x12>
 800d842:	1a18      	subs	r0, r3, r0
 800d844:	4770      	bx	lr
 800d846:	3301      	adds	r3, #1
 800d848:	e7f6      	b.n	800d838 <strnlen+0x4>
	...

0800d84c <__errno>:
 800d84c:	4b01      	ldr	r3, [pc, #4]	@ (800d854 <__errno+0x8>)
 800d84e:	6818      	ldr	r0, [r3, #0]
 800d850:	4770      	bx	lr
 800d852:	46c0      	nop			@ (mov r8, r8)
 800d854:	200001c0 	.word	0x200001c0

0800d858 <__libc_init_array>:
 800d858:	b570      	push	{r4, r5, r6, lr}
 800d85a:	2600      	movs	r6, #0
 800d85c:	4c0c      	ldr	r4, [pc, #48]	@ (800d890 <__libc_init_array+0x38>)
 800d85e:	4d0d      	ldr	r5, [pc, #52]	@ (800d894 <__libc_init_array+0x3c>)
 800d860:	1b64      	subs	r4, r4, r5
 800d862:	10a4      	asrs	r4, r4, #2
 800d864:	42a6      	cmp	r6, r4
 800d866:	d109      	bne.n	800d87c <__libc_init_array+0x24>
 800d868:	2600      	movs	r6, #0
 800d86a:	f000 fc51 	bl	800e110 <_init>
 800d86e:	4c0a      	ldr	r4, [pc, #40]	@ (800d898 <__libc_init_array+0x40>)
 800d870:	4d0a      	ldr	r5, [pc, #40]	@ (800d89c <__libc_init_array+0x44>)
 800d872:	1b64      	subs	r4, r4, r5
 800d874:	10a4      	asrs	r4, r4, #2
 800d876:	42a6      	cmp	r6, r4
 800d878:	d105      	bne.n	800d886 <__libc_init_array+0x2e>
 800d87a:	bd70      	pop	{r4, r5, r6, pc}
 800d87c:	00b3      	lsls	r3, r6, #2
 800d87e:	58eb      	ldr	r3, [r5, r3]
 800d880:	4798      	blx	r3
 800d882:	3601      	adds	r6, #1
 800d884:	e7ee      	b.n	800d864 <__libc_init_array+0xc>
 800d886:	00b3      	lsls	r3, r6, #2
 800d888:	58eb      	ldr	r3, [r5, r3]
 800d88a:	4798      	blx	r3
 800d88c:	3601      	adds	r6, #1
 800d88e:	e7f2      	b.n	800d876 <__libc_init_array+0x1e>
 800d890:	0800ee54 	.word	0x0800ee54
 800d894:	0800ee54 	.word	0x0800ee54
 800d898:	0800ee58 	.word	0x0800ee58
 800d89c:	0800ee54 	.word	0x0800ee54

0800d8a0 <__retarget_lock_acquire_recursive>:
 800d8a0:	4770      	bx	lr

0800d8a2 <__retarget_lock_release_recursive>:
 800d8a2:	4770      	bx	lr

0800d8a4 <memchr>:
 800d8a4:	b2c9      	uxtb	r1, r1
 800d8a6:	1882      	adds	r2, r0, r2
 800d8a8:	4290      	cmp	r0, r2
 800d8aa:	d101      	bne.n	800d8b0 <memchr+0xc>
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	4770      	bx	lr
 800d8b0:	7803      	ldrb	r3, [r0, #0]
 800d8b2:	428b      	cmp	r3, r1
 800d8b4:	d0fb      	beq.n	800d8ae <memchr+0xa>
 800d8b6:	3001      	adds	r0, #1
 800d8b8:	e7f6      	b.n	800d8a8 <memchr+0x4>

0800d8ba <memcpy>:
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	b510      	push	{r4, lr}
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d100      	bne.n	800d8c4 <memcpy+0xa>
 800d8c2:	bd10      	pop	{r4, pc}
 800d8c4:	5ccc      	ldrb	r4, [r1, r3]
 800d8c6:	54c4      	strb	r4, [r0, r3]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	e7f8      	b.n	800d8be <memcpy+0x4>

0800d8cc <_free_r>:
 800d8cc:	b570      	push	{r4, r5, r6, lr}
 800d8ce:	0005      	movs	r5, r0
 800d8d0:	1e0c      	subs	r4, r1, #0
 800d8d2:	d010      	beq.n	800d8f6 <_free_r+0x2a>
 800d8d4:	3c04      	subs	r4, #4
 800d8d6:	6823      	ldr	r3, [r4, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	da00      	bge.n	800d8de <_free_r+0x12>
 800d8dc:	18e4      	adds	r4, r4, r3
 800d8de:	0028      	movs	r0, r5
 800d8e0:	f000 f8e0 	bl	800daa4 <__malloc_lock>
 800d8e4:	4a1d      	ldr	r2, [pc, #116]	@ (800d95c <_free_r+0x90>)
 800d8e6:	6813      	ldr	r3, [r2, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d105      	bne.n	800d8f8 <_free_r+0x2c>
 800d8ec:	6063      	str	r3, [r4, #4]
 800d8ee:	6014      	str	r4, [r2, #0]
 800d8f0:	0028      	movs	r0, r5
 800d8f2:	f000 f8df 	bl	800dab4 <__malloc_unlock>
 800d8f6:	bd70      	pop	{r4, r5, r6, pc}
 800d8f8:	42a3      	cmp	r3, r4
 800d8fa:	d908      	bls.n	800d90e <_free_r+0x42>
 800d8fc:	6820      	ldr	r0, [r4, #0]
 800d8fe:	1821      	adds	r1, r4, r0
 800d900:	428b      	cmp	r3, r1
 800d902:	d1f3      	bne.n	800d8ec <_free_r+0x20>
 800d904:	6819      	ldr	r1, [r3, #0]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	1809      	adds	r1, r1, r0
 800d90a:	6021      	str	r1, [r4, #0]
 800d90c:	e7ee      	b.n	800d8ec <_free_r+0x20>
 800d90e:	001a      	movs	r2, r3
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d001      	beq.n	800d91a <_free_r+0x4e>
 800d916:	42a3      	cmp	r3, r4
 800d918:	d9f9      	bls.n	800d90e <_free_r+0x42>
 800d91a:	6811      	ldr	r1, [r2, #0]
 800d91c:	1850      	adds	r0, r2, r1
 800d91e:	42a0      	cmp	r0, r4
 800d920:	d10b      	bne.n	800d93a <_free_r+0x6e>
 800d922:	6820      	ldr	r0, [r4, #0]
 800d924:	1809      	adds	r1, r1, r0
 800d926:	1850      	adds	r0, r2, r1
 800d928:	6011      	str	r1, [r2, #0]
 800d92a:	4283      	cmp	r3, r0
 800d92c:	d1e0      	bne.n	800d8f0 <_free_r+0x24>
 800d92e:	6818      	ldr	r0, [r3, #0]
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	1841      	adds	r1, r0, r1
 800d934:	6011      	str	r1, [r2, #0]
 800d936:	6053      	str	r3, [r2, #4]
 800d938:	e7da      	b.n	800d8f0 <_free_r+0x24>
 800d93a:	42a0      	cmp	r0, r4
 800d93c:	d902      	bls.n	800d944 <_free_r+0x78>
 800d93e:	230c      	movs	r3, #12
 800d940:	602b      	str	r3, [r5, #0]
 800d942:	e7d5      	b.n	800d8f0 <_free_r+0x24>
 800d944:	6820      	ldr	r0, [r4, #0]
 800d946:	1821      	adds	r1, r4, r0
 800d948:	428b      	cmp	r3, r1
 800d94a:	d103      	bne.n	800d954 <_free_r+0x88>
 800d94c:	6819      	ldr	r1, [r3, #0]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	1809      	adds	r1, r1, r0
 800d952:	6021      	str	r1, [r4, #0]
 800d954:	6063      	str	r3, [r4, #4]
 800d956:	6054      	str	r4, [r2, #4]
 800d958:	e7ca      	b.n	800d8f0 <_free_r+0x24>
 800d95a:	46c0      	nop			@ (mov r8, r8)
 800d95c:	200017b4 	.word	0x200017b4

0800d960 <sbrk_aligned>:
 800d960:	b570      	push	{r4, r5, r6, lr}
 800d962:	4e0f      	ldr	r6, [pc, #60]	@ (800d9a0 <sbrk_aligned+0x40>)
 800d964:	000d      	movs	r5, r1
 800d966:	6831      	ldr	r1, [r6, #0]
 800d968:	0004      	movs	r4, r0
 800d96a:	2900      	cmp	r1, #0
 800d96c:	d102      	bne.n	800d974 <sbrk_aligned+0x14>
 800d96e:	f000 fb85 	bl	800e07c <_sbrk_r>
 800d972:	6030      	str	r0, [r6, #0]
 800d974:	0029      	movs	r1, r5
 800d976:	0020      	movs	r0, r4
 800d978:	f000 fb80 	bl	800e07c <_sbrk_r>
 800d97c:	1c43      	adds	r3, r0, #1
 800d97e:	d103      	bne.n	800d988 <sbrk_aligned+0x28>
 800d980:	2501      	movs	r5, #1
 800d982:	426d      	negs	r5, r5
 800d984:	0028      	movs	r0, r5
 800d986:	bd70      	pop	{r4, r5, r6, pc}
 800d988:	2303      	movs	r3, #3
 800d98a:	1cc5      	adds	r5, r0, #3
 800d98c:	439d      	bics	r5, r3
 800d98e:	42a8      	cmp	r0, r5
 800d990:	d0f8      	beq.n	800d984 <sbrk_aligned+0x24>
 800d992:	1a29      	subs	r1, r5, r0
 800d994:	0020      	movs	r0, r4
 800d996:	f000 fb71 	bl	800e07c <_sbrk_r>
 800d99a:	3001      	adds	r0, #1
 800d99c:	d1f2      	bne.n	800d984 <sbrk_aligned+0x24>
 800d99e:	e7ef      	b.n	800d980 <sbrk_aligned+0x20>
 800d9a0:	200017b0 	.word	0x200017b0

0800d9a4 <_malloc_r>:
 800d9a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9a6:	2203      	movs	r2, #3
 800d9a8:	1ccb      	adds	r3, r1, #3
 800d9aa:	4393      	bics	r3, r2
 800d9ac:	3308      	adds	r3, #8
 800d9ae:	0005      	movs	r5, r0
 800d9b0:	001f      	movs	r7, r3
 800d9b2:	2b0c      	cmp	r3, #12
 800d9b4:	d234      	bcs.n	800da20 <_malloc_r+0x7c>
 800d9b6:	270c      	movs	r7, #12
 800d9b8:	42b9      	cmp	r1, r7
 800d9ba:	d833      	bhi.n	800da24 <_malloc_r+0x80>
 800d9bc:	0028      	movs	r0, r5
 800d9be:	f000 f871 	bl	800daa4 <__malloc_lock>
 800d9c2:	4e37      	ldr	r6, [pc, #220]	@ (800daa0 <_malloc_r+0xfc>)
 800d9c4:	6833      	ldr	r3, [r6, #0]
 800d9c6:	001c      	movs	r4, r3
 800d9c8:	2c00      	cmp	r4, #0
 800d9ca:	d12f      	bne.n	800da2c <_malloc_r+0x88>
 800d9cc:	0039      	movs	r1, r7
 800d9ce:	0028      	movs	r0, r5
 800d9d0:	f7ff ffc6 	bl	800d960 <sbrk_aligned>
 800d9d4:	0004      	movs	r4, r0
 800d9d6:	1c43      	adds	r3, r0, #1
 800d9d8:	d15f      	bne.n	800da9a <_malloc_r+0xf6>
 800d9da:	6834      	ldr	r4, [r6, #0]
 800d9dc:	9400      	str	r4, [sp, #0]
 800d9de:	9b00      	ldr	r3, [sp, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d14a      	bne.n	800da7a <_malloc_r+0xd6>
 800d9e4:	2c00      	cmp	r4, #0
 800d9e6:	d052      	beq.n	800da8e <_malloc_r+0xea>
 800d9e8:	6823      	ldr	r3, [r4, #0]
 800d9ea:	0028      	movs	r0, r5
 800d9ec:	18e3      	adds	r3, r4, r3
 800d9ee:	9900      	ldr	r1, [sp, #0]
 800d9f0:	9301      	str	r3, [sp, #4]
 800d9f2:	f000 fb43 	bl	800e07c <_sbrk_r>
 800d9f6:	9b01      	ldr	r3, [sp, #4]
 800d9f8:	4283      	cmp	r3, r0
 800d9fa:	d148      	bne.n	800da8e <_malloc_r+0xea>
 800d9fc:	6823      	ldr	r3, [r4, #0]
 800d9fe:	0028      	movs	r0, r5
 800da00:	1aff      	subs	r7, r7, r3
 800da02:	0039      	movs	r1, r7
 800da04:	f7ff ffac 	bl	800d960 <sbrk_aligned>
 800da08:	3001      	adds	r0, #1
 800da0a:	d040      	beq.n	800da8e <_malloc_r+0xea>
 800da0c:	6823      	ldr	r3, [r4, #0]
 800da0e:	19db      	adds	r3, r3, r7
 800da10:	6023      	str	r3, [r4, #0]
 800da12:	6833      	ldr	r3, [r6, #0]
 800da14:	685a      	ldr	r2, [r3, #4]
 800da16:	2a00      	cmp	r2, #0
 800da18:	d133      	bne.n	800da82 <_malloc_r+0xde>
 800da1a:	9b00      	ldr	r3, [sp, #0]
 800da1c:	6033      	str	r3, [r6, #0]
 800da1e:	e019      	b.n	800da54 <_malloc_r+0xb0>
 800da20:	2b00      	cmp	r3, #0
 800da22:	dac9      	bge.n	800d9b8 <_malloc_r+0x14>
 800da24:	230c      	movs	r3, #12
 800da26:	602b      	str	r3, [r5, #0]
 800da28:	2000      	movs	r0, #0
 800da2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800da2c:	6821      	ldr	r1, [r4, #0]
 800da2e:	1bc9      	subs	r1, r1, r7
 800da30:	d420      	bmi.n	800da74 <_malloc_r+0xd0>
 800da32:	290b      	cmp	r1, #11
 800da34:	d90a      	bls.n	800da4c <_malloc_r+0xa8>
 800da36:	19e2      	adds	r2, r4, r7
 800da38:	6027      	str	r7, [r4, #0]
 800da3a:	42a3      	cmp	r3, r4
 800da3c:	d104      	bne.n	800da48 <_malloc_r+0xa4>
 800da3e:	6032      	str	r2, [r6, #0]
 800da40:	6863      	ldr	r3, [r4, #4]
 800da42:	6011      	str	r1, [r2, #0]
 800da44:	6053      	str	r3, [r2, #4]
 800da46:	e005      	b.n	800da54 <_malloc_r+0xb0>
 800da48:	605a      	str	r2, [r3, #4]
 800da4a:	e7f9      	b.n	800da40 <_malloc_r+0x9c>
 800da4c:	6862      	ldr	r2, [r4, #4]
 800da4e:	42a3      	cmp	r3, r4
 800da50:	d10e      	bne.n	800da70 <_malloc_r+0xcc>
 800da52:	6032      	str	r2, [r6, #0]
 800da54:	0028      	movs	r0, r5
 800da56:	f000 f82d 	bl	800dab4 <__malloc_unlock>
 800da5a:	0020      	movs	r0, r4
 800da5c:	2207      	movs	r2, #7
 800da5e:	300b      	adds	r0, #11
 800da60:	1d23      	adds	r3, r4, #4
 800da62:	4390      	bics	r0, r2
 800da64:	1ac2      	subs	r2, r0, r3
 800da66:	4298      	cmp	r0, r3
 800da68:	d0df      	beq.n	800da2a <_malloc_r+0x86>
 800da6a:	1a1b      	subs	r3, r3, r0
 800da6c:	50a3      	str	r3, [r4, r2]
 800da6e:	e7dc      	b.n	800da2a <_malloc_r+0x86>
 800da70:	605a      	str	r2, [r3, #4]
 800da72:	e7ef      	b.n	800da54 <_malloc_r+0xb0>
 800da74:	0023      	movs	r3, r4
 800da76:	6864      	ldr	r4, [r4, #4]
 800da78:	e7a6      	b.n	800d9c8 <_malloc_r+0x24>
 800da7a:	9c00      	ldr	r4, [sp, #0]
 800da7c:	6863      	ldr	r3, [r4, #4]
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	e7ad      	b.n	800d9de <_malloc_r+0x3a>
 800da82:	001a      	movs	r2, r3
 800da84:	685b      	ldr	r3, [r3, #4]
 800da86:	42a3      	cmp	r3, r4
 800da88:	d1fb      	bne.n	800da82 <_malloc_r+0xde>
 800da8a:	2300      	movs	r3, #0
 800da8c:	e7da      	b.n	800da44 <_malloc_r+0xa0>
 800da8e:	230c      	movs	r3, #12
 800da90:	0028      	movs	r0, r5
 800da92:	602b      	str	r3, [r5, #0]
 800da94:	f000 f80e 	bl	800dab4 <__malloc_unlock>
 800da98:	e7c6      	b.n	800da28 <_malloc_r+0x84>
 800da9a:	6007      	str	r7, [r0, #0]
 800da9c:	e7da      	b.n	800da54 <_malloc_r+0xb0>
 800da9e:	46c0      	nop			@ (mov r8, r8)
 800daa0:	200017b4 	.word	0x200017b4

0800daa4 <__malloc_lock>:
 800daa4:	b510      	push	{r4, lr}
 800daa6:	4802      	ldr	r0, [pc, #8]	@ (800dab0 <__malloc_lock+0xc>)
 800daa8:	f7ff fefa 	bl	800d8a0 <__retarget_lock_acquire_recursive>
 800daac:	bd10      	pop	{r4, pc}
 800daae:	46c0      	nop			@ (mov r8, r8)
 800dab0:	200017ac 	.word	0x200017ac

0800dab4 <__malloc_unlock>:
 800dab4:	b510      	push	{r4, lr}
 800dab6:	4802      	ldr	r0, [pc, #8]	@ (800dac0 <__malloc_unlock+0xc>)
 800dab8:	f7ff fef3 	bl	800d8a2 <__retarget_lock_release_recursive>
 800dabc:	bd10      	pop	{r4, pc}
 800dabe:	46c0      	nop			@ (mov r8, r8)
 800dac0:	200017ac 	.word	0x200017ac

0800dac4 <__ssputs_r>:
 800dac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dac6:	688e      	ldr	r6, [r1, #8]
 800dac8:	b085      	sub	sp, #20
 800daca:	001f      	movs	r7, r3
 800dacc:	000c      	movs	r4, r1
 800dace:	680b      	ldr	r3, [r1, #0]
 800dad0:	9002      	str	r0, [sp, #8]
 800dad2:	9203      	str	r2, [sp, #12]
 800dad4:	42be      	cmp	r6, r7
 800dad6:	d830      	bhi.n	800db3a <__ssputs_r+0x76>
 800dad8:	210c      	movs	r1, #12
 800dada:	5e62      	ldrsh	r2, [r4, r1]
 800dadc:	2190      	movs	r1, #144	@ 0x90
 800dade:	00c9      	lsls	r1, r1, #3
 800dae0:	420a      	tst	r2, r1
 800dae2:	d028      	beq.n	800db36 <__ssputs_r+0x72>
 800dae4:	2003      	movs	r0, #3
 800dae6:	6921      	ldr	r1, [r4, #16]
 800dae8:	1a5b      	subs	r3, r3, r1
 800daea:	9301      	str	r3, [sp, #4]
 800daec:	6963      	ldr	r3, [r4, #20]
 800daee:	4343      	muls	r3, r0
 800daf0:	9801      	ldr	r0, [sp, #4]
 800daf2:	0fdd      	lsrs	r5, r3, #31
 800daf4:	18ed      	adds	r5, r5, r3
 800daf6:	1c7b      	adds	r3, r7, #1
 800daf8:	181b      	adds	r3, r3, r0
 800dafa:	106d      	asrs	r5, r5, #1
 800dafc:	42ab      	cmp	r3, r5
 800dafe:	d900      	bls.n	800db02 <__ssputs_r+0x3e>
 800db00:	001d      	movs	r5, r3
 800db02:	0552      	lsls	r2, r2, #21
 800db04:	d528      	bpl.n	800db58 <__ssputs_r+0x94>
 800db06:	0029      	movs	r1, r5
 800db08:	9802      	ldr	r0, [sp, #8]
 800db0a:	f7ff ff4b 	bl	800d9a4 <_malloc_r>
 800db0e:	1e06      	subs	r6, r0, #0
 800db10:	d02c      	beq.n	800db6c <__ssputs_r+0xa8>
 800db12:	9a01      	ldr	r2, [sp, #4]
 800db14:	6921      	ldr	r1, [r4, #16]
 800db16:	f7ff fed0 	bl	800d8ba <memcpy>
 800db1a:	89a2      	ldrh	r2, [r4, #12]
 800db1c:	4b18      	ldr	r3, [pc, #96]	@ (800db80 <__ssputs_r+0xbc>)
 800db1e:	401a      	ands	r2, r3
 800db20:	2380      	movs	r3, #128	@ 0x80
 800db22:	4313      	orrs	r3, r2
 800db24:	81a3      	strh	r3, [r4, #12]
 800db26:	9b01      	ldr	r3, [sp, #4]
 800db28:	6126      	str	r6, [r4, #16]
 800db2a:	18f6      	adds	r6, r6, r3
 800db2c:	6026      	str	r6, [r4, #0]
 800db2e:	003e      	movs	r6, r7
 800db30:	6165      	str	r5, [r4, #20]
 800db32:	1aed      	subs	r5, r5, r3
 800db34:	60a5      	str	r5, [r4, #8]
 800db36:	42be      	cmp	r6, r7
 800db38:	d900      	bls.n	800db3c <__ssputs_r+0x78>
 800db3a:	003e      	movs	r6, r7
 800db3c:	0032      	movs	r2, r6
 800db3e:	9903      	ldr	r1, [sp, #12]
 800db40:	6820      	ldr	r0, [r4, #0]
 800db42:	f7ff fe37 	bl	800d7b4 <memmove>
 800db46:	2000      	movs	r0, #0
 800db48:	68a3      	ldr	r3, [r4, #8]
 800db4a:	1b9b      	subs	r3, r3, r6
 800db4c:	60a3      	str	r3, [r4, #8]
 800db4e:	6823      	ldr	r3, [r4, #0]
 800db50:	199b      	adds	r3, r3, r6
 800db52:	6023      	str	r3, [r4, #0]
 800db54:	b005      	add	sp, #20
 800db56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db58:	002a      	movs	r2, r5
 800db5a:	9802      	ldr	r0, [sp, #8]
 800db5c:	f000 faa0 	bl	800e0a0 <_realloc_r>
 800db60:	1e06      	subs	r6, r0, #0
 800db62:	d1e0      	bne.n	800db26 <__ssputs_r+0x62>
 800db64:	6921      	ldr	r1, [r4, #16]
 800db66:	9802      	ldr	r0, [sp, #8]
 800db68:	f7ff feb0 	bl	800d8cc <_free_r>
 800db6c:	230c      	movs	r3, #12
 800db6e:	2001      	movs	r0, #1
 800db70:	9a02      	ldr	r2, [sp, #8]
 800db72:	4240      	negs	r0, r0
 800db74:	6013      	str	r3, [r2, #0]
 800db76:	89a2      	ldrh	r2, [r4, #12]
 800db78:	3334      	adds	r3, #52	@ 0x34
 800db7a:	4313      	orrs	r3, r2
 800db7c:	81a3      	strh	r3, [r4, #12]
 800db7e:	e7e9      	b.n	800db54 <__ssputs_r+0x90>
 800db80:	fffffb7f 	.word	0xfffffb7f

0800db84 <_svfiprintf_r>:
 800db84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db86:	b0a1      	sub	sp, #132	@ 0x84
 800db88:	9003      	str	r0, [sp, #12]
 800db8a:	001d      	movs	r5, r3
 800db8c:	898b      	ldrh	r3, [r1, #12]
 800db8e:	000f      	movs	r7, r1
 800db90:	0016      	movs	r6, r2
 800db92:	061b      	lsls	r3, r3, #24
 800db94:	d511      	bpl.n	800dbba <_svfiprintf_r+0x36>
 800db96:	690b      	ldr	r3, [r1, #16]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d10e      	bne.n	800dbba <_svfiprintf_r+0x36>
 800db9c:	2140      	movs	r1, #64	@ 0x40
 800db9e:	f7ff ff01 	bl	800d9a4 <_malloc_r>
 800dba2:	6038      	str	r0, [r7, #0]
 800dba4:	6138      	str	r0, [r7, #16]
 800dba6:	2800      	cmp	r0, #0
 800dba8:	d105      	bne.n	800dbb6 <_svfiprintf_r+0x32>
 800dbaa:	230c      	movs	r3, #12
 800dbac:	9a03      	ldr	r2, [sp, #12]
 800dbae:	6013      	str	r3, [r2, #0]
 800dbb0:	2001      	movs	r0, #1
 800dbb2:	4240      	negs	r0, r0
 800dbb4:	e0cf      	b.n	800dd56 <_svfiprintf_r+0x1d2>
 800dbb6:	2340      	movs	r3, #64	@ 0x40
 800dbb8:	617b      	str	r3, [r7, #20]
 800dbba:	2300      	movs	r3, #0
 800dbbc:	ac08      	add	r4, sp, #32
 800dbbe:	6163      	str	r3, [r4, #20]
 800dbc0:	3320      	adds	r3, #32
 800dbc2:	7663      	strb	r3, [r4, #25]
 800dbc4:	3310      	adds	r3, #16
 800dbc6:	76a3      	strb	r3, [r4, #26]
 800dbc8:	9507      	str	r5, [sp, #28]
 800dbca:	0035      	movs	r5, r6
 800dbcc:	782b      	ldrb	r3, [r5, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d001      	beq.n	800dbd6 <_svfiprintf_r+0x52>
 800dbd2:	2b25      	cmp	r3, #37	@ 0x25
 800dbd4:	d148      	bne.n	800dc68 <_svfiprintf_r+0xe4>
 800dbd6:	1bab      	subs	r3, r5, r6
 800dbd8:	9305      	str	r3, [sp, #20]
 800dbda:	42b5      	cmp	r5, r6
 800dbdc:	d00b      	beq.n	800dbf6 <_svfiprintf_r+0x72>
 800dbde:	0032      	movs	r2, r6
 800dbe0:	0039      	movs	r1, r7
 800dbe2:	9803      	ldr	r0, [sp, #12]
 800dbe4:	f7ff ff6e 	bl	800dac4 <__ssputs_r>
 800dbe8:	3001      	adds	r0, #1
 800dbea:	d100      	bne.n	800dbee <_svfiprintf_r+0x6a>
 800dbec:	e0ae      	b.n	800dd4c <_svfiprintf_r+0x1c8>
 800dbee:	6963      	ldr	r3, [r4, #20]
 800dbf0:	9a05      	ldr	r2, [sp, #20]
 800dbf2:	189b      	adds	r3, r3, r2
 800dbf4:	6163      	str	r3, [r4, #20]
 800dbf6:	782b      	ldrb	r3, [r5, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d100      	bne.n	800dbfe <_svfiprintf_r+0x7a>
 800dbfc:	e0a6      	b.n	800dd4c <_svfiprintf_r+0x1c8>
 800dbfe:	2201      	movs	r2, #1
 800dc00:	2300      	movs	r3, #0
 800dc02:	4252      	negs	r2, r2
 800dc04:	6062      	str	r2, [r4, #4]
 800dc06:	a904      	add	r1, sp, #16
 800dc08:	3254      	adds	r2, #84	@ 0x54
 800dc0a:	1852      	adds	r2, r2, r1
 800dc0c:	1c6e      	adds	r6, r5, #1
 800dc0e:	6023      	str	r3, [r4, #0]
 800dc10:	60e3      	str	r3, [r4, #12]
 800dc12:	60a3      	str	r3, [r4, #8]
 800dc14:	7013      	strb	r3, [r2, #0]
 800dc16:	65a3      	str	r3, [r4, #88]	@ 0x58
 800dc18:	4b54      	ldr	r3, [pc, #336]	@ (800dd6c <_svfiprintf_r+0x1e8>)
 800dc1a:	2205      	movs	r2, #5
 800dc1c:	0018      	movs	r0, r3
 800dc1e:	7831      	ldrb	r1, [r6, #0]
 800dc20:	9305      	str	r3, [sp, #20]
 800dc22:	f7ff fe3f 	bl	800d8a4 <memchr>
 800dc26:	1c75      	adds	r5, r6, #1
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	d11f      	bne.n	800dc6c <_svfiprintf_r+0xe8>
 800dc2c:	6822      	ldr	r2, [r4, #0]
 800dc2e:	06d3      	lsls	r3, r2, #27
 800dc30:	d504      	bpl.n	800dc3c <_svfiprintf_r+0xb8>
 800dc32:	2353      	movs	r3, #83	@ 0x53
 800dc34:	a904      	add	r1, sp, #16
 800dc36:	185b      	adds	r3, r3, r1
 800dc38:	2120      	movs	r1, #32
 800dc3a:	7019      	strb	r1, [r3, #0]
 800dc3c:	0713      	lsls	r3, r2, #28
 800dc3e:	d504      	bpl.n	800dc4a <_svfiprintf_r+0xc6>
 800dc40:	2353      	movs	r3, #83	@ 0x53
 800dc42:	a904      	add	r1, sp, #16
 800dc44:	185b      	adds	r3, r3, r1
 800dc46:	212b      	movs	r1, #43	@ 0x2b
 800dc48:	7019      	strb	r1, [r3, #0]
 800dc4a:	7833      	ldrb	r3, [r6, #0]
 800dc4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc4e:	d016      	beq.n	800dc7e <_svfiprintf_r+0xfa>
 800dc50:	0035      	movs	r5, r6
 800dc52:	2100      	movs	r1, #0
 800dc54:	200a      	movs	r0, #10
 800dc56:	68e3      	ldr	r3, [r4, #12]
 800dc58:	782a      	ldrb	r2, [r5, #0]
 800dc5a:	1c6e      	adds	r6, r5, #1
 800dc5c:	3a30      	subs	r2, #48	@ 0x30
 800dc5e:	2a09      	cmp	r2, #9
 800dc60:	d950      	bls.n	800dd04 <_svfiprintf_r+0x180>
 800dc62:	2900      	cmp	r1, #0
 800dc64:	d111      	bne.n	800dc8a <_svfiprintf_r+0x106>
 800dc66:	e017      	b.n	800dc98 <_svfiprintf_r+0x114>
 800dc68:	3501      	adds	r5, #1
 800dc6a:	e7af      	b.n	800dbcc <_svfiprintf_r+0x48>
 800dc6c:	9b05      	ldr	r3, [sp, #20]
 800dc6e:	6822      	ldr	r2, [r4, #0]
 800dc70:	1ac0      	subs	r0, r0, r3
 800dc72:	2301      	movs	r3, #1
 800dc74:	4083      	lsls	r3, r0
 800dc76:	4313      	orrs	r3, r2
 800dc78:	002e      	movs	r6, r5
 800dc7a:	6023      	str	r3, [r4, #0]
 800dc7c:	e7cc      	b.n	800dc18 <_svfiprintf_r+0x94>
 800dc7e:	9b07      	ldr	r3, [sp, #28]
 800dc80:	1d19      	adds	r1, r3, #4
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	9107      	str	r1, [sp, #28]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	db01      	blt.n	800dc8e <_svfiprintf_r+0x10a>
 800dc8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc8c:	e004      	b.n	800dc98 <_svfiprintf_r+0x114>
 800dc8e:	425b      	negs	r3, r3
 800dc90:	60e3      	str	r3, [r4, #12]
 800dc92:	2302      	movs	r3, #2
 800dc94:	4313      	orrs	r3, r2
 800dc96:	6023      	str	r3, [r4, #0]
 800dc98:	782b      	ldrb	r3, [r5, #0]
 800dc9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc9c:	d10c      	bne.n	800dcb8 <_svfiprintf_r+0x134>
 800dc9e:	786b      	ldrb	r3, [r5, #1]
 800dca0:	2b2a      	cmp	r3, #42	@ 0x2a
 800dca2:	d134      	bne.n	800dd0e <_svfiprintf_r+0x18a>
 800dca4:	9b07      	ldr	r3, [sp, #28]
 800dca6:	3502      	adds	r5, #2
 800dca8:	1d1a      	adds	r2, r3, #4
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	9207      	str	r2, [sp, #28]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	da01      	bge.n	800dcb6 <_svfiprintf_r+0x132>
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	425b      	negs	r3, r3
 800dcb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcb8:	4e2d      	ldr	r6, [pc, #180]	@ (800dd70 <_svfiprintf_r+0x1ec>)
 800dcba:	2203      	movs	r2, #3
 800dcbc:	0030      	movs	r0, r6
 800dcbe:	7829      	ldrb	r1, [r5, #0]
 800dcc0:	f7ff fdf0 	bl	800d8a4 <memchr>
 800dcc4:	2800      	cmp	r0, #0
 800dcc6:	d006      	beq.n	800dcd6 <_svfiprintf_r+0x152>
 800dcc8:	2340      	movs	r3, #64	@ 0x40
 800dcca:	1b80      	subs	r0, r0, r6
 800dccc:	4083      	lsls	r3, r0
 800dcce:	6822      	ldr	r2, [r4, #0]
 800dcd0:	3501      	adds	r5, #1
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	6023      	str	r3, [r4, #0]
 800dcd6:	7829      	ldrb	r1, [r5, #0]
 800dcd8:	2206      	movs	r2, #6
 800dcda:	4826      	ldr	r0, [pc, #152]	@ (800dd74 <_svfiprintf_r+0x1f0>)
 800dcdc:	1c6e      	adds	r6, r5, #1
 800dcde:	7621      	strb	r1, [r4, #24]
 800dce0:	f7ff fde0 	bl	800d8a4 <memchr>
 800dce4:	2800      	cmp	r0, #0
 800dce6:	d038      	beq.n	800dd5a <_svfiprintf_r+0x1d6>
 800dce8:	4b23      	ldr	r3, [pc, #140]	@ (800dd78 <_svfiprintf_r+0x1f4>)
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d122      	bne.n	800dd34 <_svfiprintf_r+0x1b0>
 800dcee:	2207      	movs	r2, #7
 800dcf0:	9b07      	ldr	r3, [sp, #28]
 800dcf2:	3307      	adds	r3, #7
 800dcf4:	4393      	bics	r3, r2
 800dcf6:	3308      	adds	r3, #8
 800dcf8:	9307      	str	r3, [sp, #28]
 800dcfa:	6963      	ldr	r3, [r4, #20]
 800dcfc:	9a04      	ldr	r2, [sp, #16]
 800dcfe:	189b      	adds	r3, r3, r2
 800dd00:	6163      	str	r3, [r4, #20]
 800dd02:	e762      	b.n	800dbca <_svfiprintf_r+0x46>
 800dd04:	4343      	muls	r3, r0
 800dd06:	0035      	movs	r5, r6
 800dd08:	2101      	movs	r1, #1
 800dd0a:	189b      	adds	r3, r3, r2
 800dd0c:	e7a4      	b.n	800dc58 <_svfiprintf_r+0xd4>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	200a      	movs	r0, #10
 800dd12:	0019      	movs	r1, r3
 800dd14:	3501      	adds	r5, #1
 800dd16:	6063      	str	r3, [r4, #4]
 800dd18:	782a      	ldrb	r2, [r5, #0]
 800dd1a:	1c6e      	adds	r6, r5, #1
 800dd1c:	3a30      	subs	r2, #48	@ 0x30
 800dd1e:	2a09      	cmp	r2, #9
 800dd20:	d903      	bls.n	800dd2a <_svfiprintf_r+0x1a6>
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d0c8      	beq.n	800dcb8 <_svfiprintf_r+0x134>
 800dd26:	9109      	str	r1, [sp, #36]	@ 0x24
 800dd28:	e7c6      	b.n	800dcb8 <_svfiprintf_r+0x134>
 800dd2a:	4341      	muls	r1, r0
 800dd2c:	0035      	movs	r5, r6
 800dd2e:	2301      	movs	r3, #1
 800dd30:	1889      	adds	r1, r1, r2
 800dd32:	e7f1      	b.n	800dd18 <_svfiprintf_r+0x194>
 800dd34:	aa07      	add	r2, sp, #28
 800dd36:	9200      	str	r2, [sp, #0]
 800dd38:	0021      	movs	r1, r4
 800dd3a:	003a      	movs	r2, r7
 800dd3c:	4b0f      	ldr	r3, [pc, #60]	@ (800dd7c <_svfiprintf_r+0x1f8>)
 800dd3e:	9803      	ldr	r0, [sp, #12]
 800dd40:	e000      	b.n	800dd44 <_svfiprintf_r+0x1c0>
 800dd42:	bf00      	nop
 800dd44:	9004      	str	r0, [sp, #16]
 800dd46:	9b04      	ldr	r3, [sp, #16]
 800dd48:	3301      	adds	r3, #1
 800dd4a:	d1d6      	bne.n	800dcfa <_svfiprintf_r+0x176>
 800dd4c:	89bb      	ldrh	r3, [r7, #12]
 800dd4e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800dd50:	065b      	lsls	r3, r3, #25
 800dd52:	d500      	bpl.n	800dd56 <_svfiprintf_r+0x1d2>
 800dd54:	e72c      	b.n	800dbb0 <_svfiprintf_r+0x2c>
 800dd56:	b021      	add	sp, #132	@ 0x84
 800dd58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd5a:	aa07      	add	r2, sp, #28
 800dd5c:	9200      	str	r2, [sp, #0]
 800dd5e:	0021      	movs	r1, r4
 800dd60:	003a      	movs	r2, r7
 800dd62:	4b06      	ldr	r3, [pc, #24]	@ (800dd7c <_svfiprintf_r+0x1f8>)
 800dd64:	9803      	ldr	r0, [sp, #12]
 800dd66:	f000 f87b 	bl	800de60 <_printf_i>
 800dd6a:	e7eb      	b.n	800dd44 <_svfiprintf_r+0x1c0>
 800dd6c:	0800ee19 	.word	0x0800ee19
 800dd70:	0800ee1f 	.word	0x0800ee1f
 800dd74:	0800ee23 	.word	0x0800ee23
 800dd78:	00000000 	.word	0x00000000
 800dd7c:	0800dac5 	.word	0x0800dac5

0800dd80 <_printf_common>:
 800dd80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd82:	0016      	movs	r6, r2
 800dd84:	9301      	str	r3, [sp, #4]
 800dd86:	688a      	ldr	r2, [r1, #8]
 800dd88:	690b      	ldr	r3, [r1, #16]
 800dd8a:	000c      	movs	r4, r1
 800dd8c:	9000      	str	r0, [sp, #0]
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	da00      	bge.n	800dd94 <_printf_common+0x14>
 800dd92:	0013      	movs	r3, r2
 800dd94:	0022      	movs	r2, r4
 800dd96:	6033      	str	r3, [r6, #0]
 800dd98:	3243      	adds	r2, #67	@ 0x43
 800dd9a:	7812      	ldrb	r2, [r2, #0]
 800dd9c:	2a00      	cmp	r2, #0
 800dd9e:	d001      	beq.n	800dda4 <_printf_common+0x24>
 800dda0:	3301      	adds	r3, #1
 800dda2:	6033      	str	r3, [r6, #0]
 800dda4:	6823      	ldr	r3, [r4, #0]
 800dda6:	069b      	lsls	r3, r3, #26
 800dda8:	d502      	bpl.n	800ddb0 <_printf_common+0x30>
 800ddaa:	6833      	ldr	r3, [r6, #0]
 800ddac:	3302      	adds	r3, #2
 800ddae:	6033      	str	r3, [r6, #0]
 800ddb0:	6822      	ldr	r2, [r4, #0]
 800ddb2:	2306      	movs	r3, #6
 800ddb4:	0015      	movs	r5, r2
 800ddb6:	401d      	ands	r5, r3
 800ddb8:	421a      	tst	r2, r3
 800ddba:	d027      	beq.n	800de0c <_printf_common+0x8c>
 800ddbc:	0023      	movs	r3, r4
 800ddbe:	3343      	adds	r3, #67	@ 0x43
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	1e5a      	subs	r2, r3, #1
 800ddc4:	4193      	sbcs	r3, r2
 800ddc6:	6822      	ldr	r2, [r4, #0]
 800ddc8:	0692      	lsls	r2, r2, #26
 800ddca:	d430      	bmi.n	800de2e <_printf_common+0xae>
 800ddcc:	0022      	movs	r2, r4
 800ddce:	9901      	ldr	r1, [sp, #4]
 800ddd0:	9800      	ldr	r0, [sp, #0]
 800ddd2:	9d08      	ldr	r5, [sp, #32]
 800ddd4:	3243      	adds	r2, #67	@ 0x43
 800ddd6:	47a8      	blx	r5
 800ddd8:	3001      	adds	r0, #1
 800ddda:	d025      	beq.n	800de28 <_printf_common+0xa8>
 800dddc:	2206      	movs	r2, #6
 800ddde:	6823      	ldr	r3, [r4, #0]
 800dde0:	2500      	movs	r5, #0
 800dde2:	4013      	ands	r3, r2
 800dde4:	2b04      	cmp	r3, #4
 800dde6:	d105      	bne.n	800ddf4 <_printf_common+0x74>
 800dde8:	6833      	ldr	r3, [r6, #0]
 800ddea:	68e5      	ldr	r5, [r4, #12]
 800ddec:	1aed      	subs	r5, r5, r3
 800ddee:	43eb      	mvns	r3, r5
 800ddf0:	17db      	asrs	r3, r3, #31
 800ddf2:	401d      	ands	r5, r3
 800ddf4:	68a3      	ldr	r3, [r4, #8]
 800ddf6:	6922      	ldr	r2, [r4, #16]
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	dd01      	ble.n	800de00 <_printf_common+0x80>
 800ddfc:	1a9b      	subs	r3, r3, r2
 800ddfe:	18ed      	adds	r5, r5, r3
 800de00:	2600      	movs	r6, #0
 800de02:	42b5      	cmp	r5, r6
 800de04:	d120      	bne.n	800de48 <_printf_common+0xc8>
 800de06:	2000      	movs	r0, #0
 800de08:	e010      	b.n	800de2c <_printf_common+0xac>
 800de0a:	3501      	adds	r5, #1
 800de0c:	68e3      	ldr	r3, [r4, #12]
 800de0e:	6832      	ldr	r2, [r6, #0]
 800de10:	1a9b      	subs	r3, r3, r2
 800de12:	42ab      	cmp	r3, r5
 800de14:	ddd2      	ble.n	800ddbc <_printf_common+0x3c>
 800de16:	0022      	movs	r2, r4
 800de18:	2301      	movs	r3, #1
 800de1a:	9901      	ldr	r1, [sp, #4]
 800de1c:	9800      	ldr	r0, [sp, #0]
 800de1e:	9f08      	ldr	r7, [sp, #32]
 800de20:	3219      	adds	r2, #25
 800de22:	47b8      	blx	r7
 800de24:	3001      	adds	r0, #1
 800de26:	d1f0      	bne.n	800de0a <_printf_common+0x8a>
 800de28:	2001      	movs	r0, #1
 800de2a:	4240      	negs	r0, r0
 800de2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800de2e:	2030      	movs	r0, #48	@ 0x30
 800de30:	18e1      	adds	r1, r4, r3
 800de32:	3143      	adds	r1, #67	@ 0x43
 800de34:	7008      	strb	r0, [r1, #0]
 800de36:	0021      	movs	r1, r4
 800de38:	1c5a      	adds	r2, r3, #1
 800de3a:	3145      	adds	r1, #69	@ 0x45
 800de3c:	7809      	ldrb	r1, [r1, #0]
 800de3e:	18a2      	adds	r2, r4, r2
 800de40:	3243      	adds	r2, #67	@ 0x43
 800de42:	3302      	adds	r3, #2
 800de44:	7011      	strb	r1, [r2, #0]
 800de46:	e7c1      	b.n	800ddcc <_printf_common+0x4c>
 800de48:	0022      	movs	r2, r4
 800de4a:	2301      	movs	r3, #1
 800de4c:	9901      	ldr	r1, [sp, #4]
 800de4e:	9800      	ldr	r0, [sp, #0]
 800de50:	9f08      	ldr	r7, [sp, #32]
 800de52:	321a      	adds	r2, #26
 800de54:	47b8      	blx	r7
 800de56:	3001      	adds	r0, #1
 800de58:	d0e6      	beq.n	800de28 <_printf_common+0xa8>
 800de5a:	3601      	adds	r6, #1
 800de5c:	e7d1      	b.n	800de02 <_printf_common+0x82>
	...

0800de60 <_printf_i>:
 800de60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de62:	b08b      	sub	sp, #44	@ 0x2c
 800de64:	9206      	str	r2, [sp, #24]
 800de66:	000a      	movs	r2, r1
 800de68:	3243      	adds	r2, #67	@ 0x43
 800de6a:	9307      	str	r3, [sp, #28]
 800de6c:	9005      	str	r0, [sp, #20]
 800de6e:	9203      	str	r2, [sp, #12]
 800de70:	7e0a      	ldrb	r2, [r1, #24]
 800de72:	000c      	movs	r4, r1
 800de74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800de76:	2a78      	cmp	r2, #120	@ 0x78
 800de78:	d809      	bhi.n	800de8e <_printf_i+0x2e>
 800de7a:	2a62      	cmp	r2, #98	@ 0x62
 800de7c:	d80b      	bhi.n	800de96 <_printf_i+0x36>
 800de7e:	2a00      	cmp	r2, #0
 800de80:	d100      	bne.n	800de84 <_printf_i+0x24>
 800de82:	e0bc      	b.n	800dffe <_printf_i+0x19e>
 800de84:	497b      	ldr	r1, [pc, #492]	@ (800e074 <_printf_i+0x214>)
 800de86:	9104      	str	r1, [sp, #16]
 800de88:	2a58      	cmp	r2, #88	@ 0x58
 800de8a:	d100      	bne.n	800de8e <_printf_i+0x2e>
 800de8c:	e090      	b.n	800dfb0 <_printf_i+0x150>
 800de8e:	0025      	movs	r5, r4
 800de90:	3542      	adds	r5, #66	@ 0x42
 800de92:	702a      	strb	r2, [r5, #0]
 800de94:	e022      	b.n	800dedc <_printf_i+0x7c>
 800de96:	0010      	movs	r0, r2
 800de98:	3863      	subs	r0, #99	@ 0x63
 800de9a:	2815      	cmp	r0, #21
 800de9c:	d8f7      	bhi.n	800de8e <_printf_i+0x2e>
 800de9e:	f7f2 f93b 	bl	8000118 <__gnu_thumb1_case_shi>
 800dea2:	0016      	.short	0x0016
 800dea4:	fff6001f 	.word	0xfff6001f
 800dea8:	fff6fff6 	.word	0xfff6fff6
 800deac:	001ffff6 	.word	0x001ffff6
 800deb0:	fff6fff6 	.word	0xfff6fff6
 800deb4:	fff6fff6 	.word	0xfff6fff6
 800deb8:	003600a1 	.word	0x003600a1
 800debc:	fff60080 	.word	0xfff60080
 800dec0:	00b2fff6 	.word	0x00b2fff6
 800dec4:	0036fff6 	.word	0x0036fff6
 800dec8:	fff6fff6 	.word	0xfff6fff6
 800decc:	0084      	.short	0x0084
 800dece:	0025      	movs	r5, r4
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	3542      	adds	r5, #66	@ 0x42
 800ded4:	1d11      	adds	r1, r2, #4
 800ded6:	6019      	str	r1, [r3, #0]
 800ded8:	6813      	ldr	r3, [r2, #0]
 800deda:	702b      	strb	r3, [r5, #0]
 800dedc:	2301      	movs	r3, #1
 800dede:	e0a0      	b.n	800e022 <_printf_i+0x1c2>
 800dee0:	6818      	ldr	r0, [r3, #0]
 800dee2:	6809      	ldr	r1, [r1, #0]
 800dee4:	1d02      	adds	r2, r0, #4
 800dee6:	060d      	lsls	r5, r1, #24
 800dee8:	d50b      	bpl.n	800df02 <_printf_i+0xa2>
 800deea:	6806      	ldr	r6, [r0, #0]
 800deec:	601a      	str	r2, [r3, #0]
 800deee:	2e00      	cmp	r6, #0
 800def0:	da03      	bge.n	800defa <_printf_i+0x9a>
 800def2:	232d      	movs	r3, #45	@ 0x2d
 800def4:	9a03      	ldr	r2, [sp, #12]
 800def6:	4276      	negs	r6, r6
 800def8:	7013      	strb	r3, [r2, #0]
 800defa:	4b5e      	ldr	r3, [pc, #376]	@ (800e074 <_printf_i+0x214>)
 800defc:	270a      	movs	r7, #10
 800defe:	9304      	str	r3, [sp, #16]
 800df00:	e018      	b.n	800df34 <_printf_i+0xd4>
 800df02:	6806      	ldr	r6, [r0, #0]
 800df04:	601a      	str	r2, [r3, #0]
 800df06:	0649      	lsls	r1, r1, #25
 800df08:	d5f1      	bpl.n	800deee <_printf_i+0x8e>
 800df0a:	b236      	sxth	r6, r6
 800df0c:	e7ef      	b.n	800deee <_printf_i+0x8e>
 800df0e:	6808      	ldr	r0, [r1, #0]
 800df10:	6819      	ldr	r1, [r3, #0]
 800df12:	c940      	ldmia	r1!, {r6}
 800df14:	0605      	lsls	r5, r0, #24
 800df16:	d402      	bmi.n	800df1e <_printf_i+0xbe>
 800df18:	0640      	lsls	r0, r0, #25
 800df1a:	d500      	bpl.n	800df1e <_printf_i+0xbe>
 800df1c:	b2b6      	uxth	r6, r6
 800df1e:	6019      	str	r1, [r3, #0]
 800df20:	4b54      	ldr	r3, [pc, #336]	@ (800e074 <_printf_i+0x214>)
 800df22:	270a      	movs	r7, #10
 800df24:	9304      	str	r3, [sp, #16]
 800df26:	2a6f      	cmp	r2, #111	@ 0x6f
 800df28:	d100      	bne.n	800df2c <_printf_i+0xcc>
 800df2a:	3f02      	subs	r7, #2
 800df2c:	0023      	movs	r3, r4
 800df2e:	2200      	movs	r2, #0
 800df30:	3343      	adds	r3, #67	@ 0x43
 800df32:	701a      	strb	r2, [r3, #0]
 800df34:	6863      	ldr	r3, [r4, #4]
 800df36:	60a3      	str	r3, [r4, #8]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	db03      	blt.n	800df44 <_printf_i+0xe4>
 800df3c:	2104      	movs	r1, #4
 800df3e:	6822      	ldr	r2, [r4, #0]
 800df40:	438a      	bics	r2, r1
 800df42:	6022      	str	r2, [r4, #0]
 800df44:	2e00      	cmp	r6, #0
 800df46:	d102      	bne.n	800df4e <_printf_i+0xee>
 800df48:	9d03      	ldr	r5, [sp, #12]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d00c      	beq.n	800df68 <_printf_i+0x108>
 800df4e:	9d03      	ldr	r5, [sp, #12]
 800df50:	0030      	movs	r0, r6
 800df52:	0039      	movs	r1, r7
 800df54:	f7f2 f970 	bl	8000238 <__aeabi_uidivmod>
 800df58:	9b04      	ldr	r3, [sp, #16]
 800df5a:	3d01      	subs	r5, #1
 800df5c:	5c5b      	ldrb	r3, [r3, r1]
 800df5e:	702b      	strb	r3, [r5, #0]
 800df60:	0033      	movs	r3, r6
 800df62:	0006      	movs	r6, r0
 800df64:	429f      	cmp	r7, r3
 800df66:	d9f3      	bls.n	800df50 <_printf_i+0xf0>
 800df68:	2f08      	cmp	r7, #8
 800df6a:	d109      	bne.n	800df80 <_printf_i+0x120>
 800df6c:	6823      	ldr	r3, [r4, #0]
 800df6e:	07db      	lsls	r3, r3, #31
 800df70:	d506      	bpl.n	800df80 <_printf_i+0x120>
 800df72:	6862      	ldr	r2, [r4, #4]
 800df74:	6923      	ldr	r3, [r4, #16]
 800df76:	429a      	cmp	r2, r3
 800df78:	dc02      	bgt.n	800df80 <_printf_i+0x120>
 800df7a:	2330      	movs	r3, #48	@ 0x30
 800df7c:	3d01      	subs	r5, #1
 800df7e:	702b      	strb	r3, [r5, #0]
 800df80:	9b03      	ldr	r3, [sp, #12]
 800df82:	1b5b      	subs	r3, r3, r5
 800df84:	6123      	str	r3, [r4, #16]
 800df86:	9b07      	ldr	r3, [sp, #28]
 800df88:	0021      	movs	r1, r4
 800df8a:	9300      	str	r3, [sp, #0]
 800df8c:	9805      	ldr	r0, [sp, #20]
 800df8e:	9b06      	ldr	r3, [sp, #24]
 800df90:	aa09      	add	r2, sp, #36	@ 0x24
 800df92:	f7ff fef5 	bl	800dd80 <_printf_common>
 800df96:	3001      	adds	r0, #1
 800df98:	d148      	bne.n	800e02c <_printf_i+0x1cc>
 800df9a:	2001      	movs	r0, #1
 800df9c:	4240      	negs	r0, r0
 800df9e:	b00b      	add	sp, #44	@ 0x2c
 800dfa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfa2:	2220      	movs	r2, #32
 800dfa4:	6809      	ldr	r1, [r1, #0]
 800dfa6:	430a      	orrs	r2, r1
 800dfa8:	6022      	str	r2, [r4, #0]
 800dfaa:	2278      	movs	r2, #120	@ 0x78
 800dfac:	4932      	ldr	r1, [pc, #200]	@ (800e078 <_printf_i+0x218>)
 800dfae:	9104      	str	r1, [sp, #16]
 800dfb0:	0021      	movs	r1, r4
 800dfb2:	3145      	adds	r1, #69	@ 0x45
 800dfb4:	700a      	strb	r2, [r1, #0]
 800dfb6:	6819      	ldr	r1, [r3, #0]
 800dfb8:	6822      	ldr	r2, [r4, #0]
 800dfba:	c940      	ldmia	r1!, {r6}
 800dfbc:	0610      	lsls	r0, r2, #24
 800dfbe:	d402      	bmi.n	800dfc6 <_printf_i+0x166>
 800dfc0:	0650      	lsls	r0, r2, #25
 800dfc2:	d500      	bpl.n	800dfc6 <_printf_i+0x166>
 800dfc4:	b2b6      	uxth	r6, r6
 800dfc6:	6019      	str	r1, [r3, #0]
 800dfc8:	07d3      	lsls	r3, r2, #31
 800dfca:	d502      	bpl.n	800dfd2 <_printf_i+0x172>
 800dfcc:	2320      	movs	r3, #32
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	6023      	str	r3, [r4, #0]
 800dfd2:	2e00      	cmp	r6, #0
 800dfd4:	d001      	beq.n	800dfda <_printf_i+0x17a>
 800dfd6:	2710      	movs	r7, #16
 800dfd8:	e7a8      	b.n	800df2c <_printf_i+0xcc>
 800dfda:	2220      	movs	r2, #32
 800dfdc:	6823      	ldr	r3, [r4, #0]
 800dfde:	4393      	bics	r3, r2
 800dfe0:	6023      	str	r3, [r4, #0]
 800dfe2:	e7f8      	b.n	800dfd6 <_printf_i+0x176>
 800dfe4:	681a      	ldr	r2, [r3, #0]
 800dfe6:	680d      	ldr	r5, [r1, #0]
 800dfe8:	1d10      	adds	r0, r2, #4
 800dfea:	6949      	ldr	r1, [r1, #20]
 800dfec:	6018      	str	r0, [r3, #0]
 800dfee:	6813      	ldr	r3, [r2, #0]
 800dff0:	062e      	lsls	r6, r5, #24
 800dff2:	d501      	bpl.n	800dff8 <_printf_i+0x198>
 800dff4:	6019      	str	r1, [r3, #0]
 800dff6:	e002      	b.n	800dffe <_printf_i+0x19e>
 800dff8:	066d      	lsls	r5, r5, #25
 800dffa:	d5fb      	bpl.n	800dff4 <_printf_i+0x194>
 800dffc:	8019      	strh	r1, [r3, #0]
 800dffe:	2300      	movs	r3, #0
 800e000:	9d03      	ldr	r5, [sp, #12]
 800e002:	6123      	str	r3, [r4, #16]
 800e004:	e7bf      	b.n	800df86 <_printf_i+0x126>
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	1d11      	adds	r1, r2, #4
 800e00a:	6019      	str	r1, [r3, #0]
 800e00c:	6815      	ldr	r5, [r2, #0]
 800e00e:	2100      	movs	r1, #0
 800e010:	0028      	movs	r0, r5
 800e012:	6862      	ldr	r2, [r4, #4]
 800e014:	f7ff fc46 	bl	800d8a4 <memchr>
 800e018:	2800      	cmp	r0, #0
 800e01a:	d001      	beq.n	800e020 <_printf_i+0x1c0>
 800e01c:	1b40      	subs	r0, r0, r5
 800e01e:	6060      	str	r0, [r4, #4]
 800e020:	6863      	ldr	r3, [r4, #4]
 800e022:	6123      	str	r3, [r4, #16]
 800e024:	2300      	movs	r3, #0
 800e026:	9a03      	ldr	r2, [sp, #12]
 800e028:	7013      	strb	r3, [r2, #0]
 800e02a:	e7ac      	b.n	800df86 <_printf_i+0x126>
 800e02c:	002a      	movs	r2, r5
 800e02e:	6923      	ldr	r3, [r4, #16]
 800e030:	9906      	ldr	r1, [sp, #24]
 800e032:	9805      	ldr	r0, [sp, #20]
 800e034:	9d07      	ldr	r5, [sp, #28]
 800e036:	47a8      	blx	r5
 800e038:	3001      	adds	r0, #1
 800e03a:	d0ae      	beq.n	800df9a <_printf_i+0x13a>
 800e03c:	6823      	ldr	r3, [r4, #0]
 800e03e:	079b      	lsls	r3, r3, #30
 800e040:	d415      	bmi.n	800e06e <_printf_i+0x20e>
 800e042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e044:	68e0      	ldr	r0, [r4, #12]
 800e046:	4298      	cmp	r0, r3
 800e048:	daa9      	bge.n	800df9e <_printf_i+0x13e>
 800e04a:	0018      	movs	r0, r3
 800e04c:	e7a7      	b.n	800df9e <_printf_i+0x13e>
 800e04e:	0022      	movs	r2, r4
 800e050:	2301      	movs	r3, #1
 800e052:	9906      	ldr	r1, [sp, #24]
 800e054:	9805      	ldr	r0, [sp, #20]
 800e056:	9e07      	ldr	r6, [sp, #28]
 800e058:	3219      	adds	r2, #25
 800e05a:	47b0      	blx	r6
 800e05c:	3001      	adds	r0, #1
 800e05e:	d09c      	beq.n	800df9a <_printf_i+0x13a>
 800e060:	3501      	adds	r5, #1
 800e062:	68e3      	ldr	r3, [r4, #12]
 800e064:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e066:	1a9b      	subs	r3, r3, r2
 800e068:	42ab      	cmp	r3, r5
 800e06a:	dcf0      	bgt.n	800e04e <_printf_i+0x1ee>
 800e06c:	e7e9      	b.n	800e042 <_printf_i+0x1e2>
 800e06e:	2500      	movs	r5, #0
 800e070:	e7f7      	b.n	800e062 <_printf_i+0x202>
 800e072:	46c0      	nop			@ (mov r8, r8)
 800e074:	0800ee2a 	.word	0x0800ee2a
 800e078:	0800ee3b 	.word	0x0800ee3b

0800e07c <_sbrk_r>:
 800e07c:	2300      	movs	r3, #0
 800e07e:	b570      	push	{r4, r5, r6, lr}
 800e080:	4d06      	ldr	r5, [pc, #24]	@ (800e09c <_sbrk_r+0x20>)
 800e082:	0004      	movs	r4, r0
 800e084:	0008      	movs	r0, r1
 800e086:	602b      	str	r3, [r5, #0]
 800e088:	f7f3 f99c 	bl	80013c4 <_sbrk>
 800e08c:	1c43      	adds	r3, r0, #1
 800e08e:	d103      	bne.n	800e098 <_sbrk_r+0x1c>
 800e090:	682b      	ldr	r3, [r5, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d000      	beq.n	800e098 <_sbrk_r+0x1c>
 800e096:	6023      	str	r3, [r4, #0]
 800e098:	bd70      	pop	{r4, r5, r6, pc}
 800e09a:	46c0      	nop			@ (mov r8, r8)
 800e09c:	200017a8 	.word	0x200017a8

0800e0a0 <_realloc_r>:
 800e0a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0a2:	0006      	movs	r6, r0
 800e0a4:	000c      	movs	r4, r1
 800e0a6:	0015      	movs	r5, r2
 800e0a8:	2900      	cmp	r1, #0
 800e0aa:	d105      	bne.n	800e0b8 <_realloc_r+0x18>
 800e0ac:	0011      	movs	r1, r2
 800e0ae:	f7ff fc79 	bl	800d9a4 <_malloc_r>
 800e0b2:	0004      	movs	r4, r0
 800e0b4:	0020      	movs	r0, r4
 800e0b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e0b8:	2a00      	cmp	r2, #0
 800e0ba:	d103      	bne.n	800e0c4 <_realloc_r+0x24>
 800e0bc:	f7ff fc06 	bl	800d8cc <_free_r>
 800e0c0:	2400      	movs	r4, #0
 800e0c2:	e7f7      	b.n	800e0b4 <_realloc_r+0x14>
 800e0c4:	f000 f81b 	bl	800e0fe <_malloc_usable_size_r>
 800e0c8:	0007      	movs	r7, r0
 800e0ca:	4285      	cmp	r5, r0
 800e0cc:	d802      	bhi.n	800e0d4 <_realloc_r+0x34>
 800e0ce:	0843      	lsrs	r3, r0, #1
 800e0d0:	42ab      	cmp	r3, r5
 800e0d2:	d3ef      	bcc.n	800e0b4 <_realloc_r+0x14>
 800e0d4:	0029      	movs	r1, r5
 800e0d6:	0030      	movs	r0, r6
 800e0d8:	f7ff fc64 	bl	800d9a4 <_malloc_r>
 800e0dc:	9001      	str	r0, [sp, #4]
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	d0ee      	beq.n	800e0c0 <_realloc_r+0x20>
 800e0e2:	002a      	movs	r2, r5
 800e0e4:	42bd      	cmp	r5, r7
 800e0e6:	d900      	bls.n	800e0ea <_realloc_r+0x4a>
 800e0e8:	003a      	movs	r2, r7
 800e0ea:	0021      	movs	r1, r4
 800e0ec:	9801      	ldr	r0, [sp, #4]
 800e0ee:	f7ff fbe4 	bl	800d8ba <memcpy>
 800e0f2:	0021      	movs	r1, r4
 800e0f4:	0030      	movs	r0, r6
 800e0f6:	f7ff fbe9 	bl	800d8cc <_free_r>
 800e0fa:	9c01      	ldr	r4, [sp, #4]
 800e0fc:	e7da      	b.n	800e0b4 <_realloc_r+0x14>

0800e0fe <_malloc_usable_size_r>:
 800e0fe:	1f0b      	subs	r3, r1, #4
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	1f18      	subs	r0, r3, #4
 800e104:	2b00      	cmp	r3, #0
 800e106:	da01      	bge.n	800e10c <_malloc_usable_size_r+0xe>
 800e108:	580b      	ldr	r3, [r1, r0]
 800e10a:	18c0      	adds	r0, r0, r3
 800e10c:	4770      	bx	lr
	...

0800e110 <_init>:
 800e110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e112:	46c0      	nop			@ (mov r8, r8)
 800e114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e116:	bc08      	pop	{r3}
 800e118:	469e      	mov	lr, r3
 800e11a:	4770      	bx	lr

0800e11c <_fini>:
 800e11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e11e:	46c0      	nop			@ (mov r8, r8)
 800e120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e122:	bc08      	pop	{r3}
 800e124:	469e      	mov	lr, r3
 800e126:	4770      	bx	lr
